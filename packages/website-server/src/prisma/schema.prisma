generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("NX_DATABASE_URL")
}

model Blog {
  id            String       @id @default(uuid()) @db.Uuid
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  title         String
  slug          String       @unique
  content       String
  imageId       String       @db.Uuid
  featuredImage Image        @relation(fields: [imageId], references: [id])
  authors       BlogAuthor[]
}

model BlogAuthor {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  blogId    String   @db.Uuid
  personId  String   @db.Uuid
  blog      Blog     @relation(fields: [blogId], references: [id])
  author    Person   @relation(fields: [personId], references: [id])
}

model Project {
  id            String               @id @default(uuid()) @db.Uuid
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  name          String
  slug          String               @unique
  githubUrl     String?
  projectUrl    String?
  summary       String
  imageId       String               @db.Uuid
  featuredImage Image                @relation(fields: [imageId], references: [id])
  contributors  ProjectContributor[]
}

model ProjectContributor {
  id            String   @id @default(uuid()) @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  contributorId String   @db.Uuid
  projectId     String   @db.Uuid
  contributor   Person   @relation(fields: [contributorId], references: [id])
  project       Project  @relation(fields: [projectId], references: [id])
}

model Person {
  id          String               @id @default(uuid()) @db.Uuid
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  websiteUrl  String?
  githubUrl   String?
  linkedinUrl String?
  summary     String?
  imageId     String?              @db.Uuid
  firstName   String
  lastName    String
  image       Image?               @relation(fields: [imageId], references: [id])
  blogs       BlogAuthor[]
  courses     CourseInstructor[]
  projects    ProjectContributor[]
  User        User[]
}

model Course {
  id          String             @id @default(uuid()) @db.Uuid
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  title       String
  yearUpdated Int
  rating      Rating?
  ratingUrl   String?
  recommended Boolean
  duration    Float
  schoolId    String             @db.Uuid
  courseUrls  String[]
  complete    Boolean
  order       Int
  school      School             @relation(fields: [schoolId], references: [id])
  instructors CourseInstructor[]
}

model CourseInstructor {
  id           String   @id @default(uuid()) @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  instructorId String   @db.Uuid
  courseId     String   @db.Uuid
  course       Course   @relation(fields: [courseId], references: [id])
  instructor   Person   @relation(fields: [instructorId], references: [id])
}

model School {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  url         String   @unique
  description String
  imageId     String   @db.Uuid
  logo        Image    @relation(fields: [imageId], references: [id])
  courses     Course[]
}

model TechnologyLogo {
  id           String   @id @default(uuid()) @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String
  isOnHomepage Boolean
  imageId      String   @unique @db.Uuid
  logo         Image    @relation(fields: [imageId], references: [id])
}

model Image {
  id              String           @id @default(uuid()) @db.Uuid
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  url             String           @unique
  altText         String
  height          String
  width           String
  blogs           Blog[]
  persons         Person[]
  projects        Project[]
  schools         School[]
  TechnologyLogos TechnologyLogo[]
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  username  String   @unique
  password  String
  personId  String   @db.Uuid
  role      Role     @default(USER)
  person    Person   @relation(fields: [personId], references: [id])

  @@unique([username, password], map: "UserCredentials_username_password_unique_constraint")
}

enum Role {
  USER
  ADMIN
}

enum Rating {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}
