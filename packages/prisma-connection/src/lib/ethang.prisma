generator client {
  provider = "prisma-client-js"
  output   = "ethang-prisma-data"
}

datasource db {
  provider = "postgresql"
  url      = env("NX_DATABASE_URL")
}

model Blog {
  id         String       @id @db.Uuid
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  title      String
  slug       String       @unique
  content    String
  imageId    String       @db.Uuid
  Image      Image        @relation(fields: [imageId], references: [id])
  BlogAuthor BlogAuthor[]
}

model BlogAuthor {
  id        String   @id @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime
  blogId    String   @db.Uuid
  personId  String   @db.Uuid
  Blog      Blog     @relation(fields: [blogId], references: [id])
  Person    Person   @relation(fields: [personId], references: [id])
}

model Course {
  id               String             @id @db.Uuid
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  title            String
  yearUpdated      Int
  recommended      Boolean
  duration         Float
  schoolId         String             @db.Uuid
  complete         Boolean
  order            Int
  rating           Rating?
  ratingUrl        String?
  School           School             @relation(fields: [schoolId], references: [id])
  CourseInstructor CourseInstructor[]
  CourseUrl        CourseUrl[]
}

model CourseUrl {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  courseId  String   @db.Uuid
  url       String   @unique
  schoolId  String   @db.Uuid
  Course    Course   @relation(fields: [courseId], references: [id])
  School    School   @relation(fields: [schoolId], references: [id])

  @@unique([courseId, url, schoolId])
}

model CourseInstructor {
  id           String   @id @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  instructorId String   @db.Uuid
  courseId     String   @db.Uuid
  Course       Course   @relation(fields: [courseId], references: [id])
  Person       Person   @relation(fields: [instructorId], references: [id])
}

model Image {
  id             String          @id @db.Uuid
  createdAt      DateTime        @default(now())
  updatedAt      DateTime
  url            String          @unique
  altText        String
  height         String
  width          String
  Blog           Blog[]
  Person         Person[]
  Project        Project[]
  School         School[]
  TechnologyLogo TechnologyLogo?
}

model Person {
  id                 String               @id @db.Uuid
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  websiteUrl         String?
  githubUrl          String?
  linkedinUrl        String?
  summary            String?
  imageId            String?              @db.Uuid
  firstName          String
  lastName           String
  Image              Image?               @relation(fields: [imageId], references: [id])
  BlogAuthor         BlogAuthor[]
  CourseInstructor   CourseInstructor[]
  ProjectContributor ProjectContributor[]
  User               User[]
}

model Project {
  id                 String               @id @db.Uuid
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  name               String
  slug               String               @unique
  githubUrl          String?
  projectUrl         String?
  summary            String
  imageId            String               @db.Uuid
  Image              Image                @relation(fields: [imageId], references: [id])
  ProjectContributor ProjectContributor[]
}

model ProjectContributor {
  id            String   @id @db.Uuid
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  contributorId String   @db.Uuid
  projectId     String   @db.Uuid
  Person        Person   @relation(fields: [contributorId], references: [id])
  Project       Project  @relation(fields: [projectId], references: [id])
}

model School {
  id          String      @id @db.Uuid
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  name        String
  url         String      @unique
  description String
  imageId     String      @db.Uuid
  Image       Image       @relation(fields: [imageId], references: [id])
  Course      Course[]
  CourseUrl   CourseUrl[]
}

model TechnologyLogo {
  id           String   @id @db.Uuid
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  name         String
  isOnHomepage Boolean
  imageId      String   @unique @db.Uuid
  Image        Image    @relation(fields: [imageId], references: [id])
}

model User {
  id        String   @id @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime
  username  String   @unique
  password  String
  personId  String   @db.Uuid
  role      Role     @default(USER)
  Person    Person   @relation(fields: [personId], references: [id])

  @@unique([username, password], map: "UserCredentials_username_password_unique_constraint")
}

enum Rating {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

enum Role {
  USER
  ADMIN
}
