/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */


/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  apiToken?: GQLApiToken;
  apiTokensList: GQLApiTokenListResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.application` instead.
   */
  application?: GQLApplication;

  /**
   *
   * @deprecated No longer supported. Use `system.applicationsList` instead.
   */
  applicationsList?: GQLApplicationListResponse;
  asyncSessionStatus?: GQLAsyncSessionStatusResponse;
  authenticationProfile?: GQLAuthenticationProfile;
  authenticationProfilesList: GQLAuthenticationProfileListResponse;
  authenticationSettings?: GQLAuthenticationSetting;

  /**
   *
   * @deprecated No longer supported. Use `system.billingCurrentPlan` instead.
   */
  billingCurrentPlan?: GQLBillingCurrentPlanResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.memberPaymentDetails, system.organizationPaymentDetails or system.workspacePaymentDetails` instead.
   */
  billingDetails?: GQLBillingDetailsResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.memberBillingHistory, system.organizationBillingHistory or system.workspaceBillingHistory` instead.
   */
  billingInvoicesList: GQLBillingInvoicesListResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.billingMetricUsageQuotasList` instead.
   */
  billingMetricUsageQuotasList: GQLBillingMetricUsageQuotasListResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.billingMetricUsagesList` instead.
   */
  billingMetricUsagesList: GQLBillingMetricUsagesListResponse;
  blog?: GQLBlog;
  blogUser?: GQLBlogUser;
  blogUsersList: GQLBlogUserListResponse;
  blogsList: GQLBlogListResponse;
  comment?: GQLComment;
  commentsList: GQLCommentListResponse;
  companyName?: string;
  course?: GQLCourse;
  courseUrl?: GQLCourseUrl;
  courseUrlsList: GQLCourseUrlListResponse;
  coursesList: GQLCourseListResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.deployStatus` instead.
   */
  deployStatus: GQLDeployStatusResult;
  environmentVariable?: GQLEnvironmentVariable;
  environmentVariablesList: GQLEnvironmentVariableListResponse;
  file?: GQLFile;
  fileUploadInfo?: GQLFileUploadInfoResponse;
  filesList: GQLFileListResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.functionsList` instead.
   */
  functionsList?: GQLFunctionListResponse;
  getWorkspaceTransferInfo?: GQLWorkspaceTransferItem;
  image?: GQLImage;
  imagesList: GQLImageListResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.logsList` instead.
   */
  logs?: Array<string | null>;
  peopleList: GQLPersonListResponse;
  person?: GQLPerson;
  role?: GQLRole;
  rolesList: GQLRoleListResponse;
  school?: GQLSchool;
  schoolsList: GQLSchoolListResponse;
  settings?: GQLSetting;
  system?: GQLSystemQuery;

  /**
   *
   * @deprecated No longer supported. Use `system.table` instead.
   */
  table?: GQLTable;

  /**
   *
   * @deprecated No longer supported. Use `system.tableField` instead.
   */
  tableField?: GQLTableField;

  /**
   *
   * @deprecated No longer supported. Use `system.tablesList` instead.
   */
  tablesList: GQLTableListResponse;
  technologyLogo?: GQLTechnologyLogo;
  technologyLogosList: GQLTechnologyLogoListResponse;
  user?: GQLUser;
  userBillingConfiguration: GQLUserBillingConfigurationResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.userInvitationsList` instead.
   */
  userInvitationsList?: GQLUserInvitationList;
  usersList: GQLUserListResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.workspacesList` instead.
   */
  workspacesList?: GQLWorkspaceListResponse;
}

export interface GQLApiToken {
  _description?: string;
  createdAt?: GQLDateTime;
  createdBy?: GQLUser;
  deletedAt?: number;
  id?: string;
  name?: string;
  roles?: GQLRoleListResponse;
  updatedAt?: GQLDateTime;
}

/**
 * A date-time string at UTC, such as `2007-12-25T16:15:30Z`, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
 */
export type GQLDateTime = any;

export interface GQLUser {
  _description?: string;
  avatar?: GQLFile;
  createdAt?: GQLDateTime;
  createdBy?: GQLUser;
  deletedAt?: number;
  email?: string;
  firstName?: string;
  id?: string;
  is8base?: boolean;
  lastName?: string;
  origin?: string;
  permissions?: GQLUserPermissionList;
  roles?: GQLRoleListResponse;
  status?: string;
  timezone?: string;
  updatedAt?: GQLDateTime;
}

export interface GQLFile {
  _description?: string;
  createdAt?: GQLDateTime;
  createdBy?: GQLUser;
  deletedAt?: number;
  downloadStorageUrl?: string;
  downloadUrl?: string;
  fields?: GQLJSON;
  fileId?: string;
  filename?: string;
  id?: string;
  image_image?: GQLImageListResponse;
  meta?: GQLJSON;
  mods?: GQLJSON;
  previewUrl?: string;
  provider?: string;
  public?: boolean;
  settings_landingPageImage?: GQLSettingListResponse;
  settings_menuBarLogo?: GQLSettingListResponse;
  shareUrl?: string;
  updatedAt?: GQLDateTime;
  uploadUrl?: string;
  uploaded?: boolean;
  users_avatar?: GQLUserListResponse;
}

/**
 * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
 */
export type GQLJSON = any;

export interface GQLImageFilter {
  AND?: Array<GQLImageFilter>;
  OR?: Array<GQLImageFilter>;
  _fullText?: string;
  altText?: GQLStringPredicate;
  blogs?: GQLBlogRelationFilter;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUserFilter;
  deletedAt?: GQLIntPredicate;
  height?: GQLIntPredicate;
  id?: GQLIDPredicate;
  image?: GQLFileFilter;
  person?: GQLPersonFilter;
  schools?: GQLSchoolFilter;
  technologyLogos?: GQLTechnologyLogoFilter;
  updatedAt?: GQLDateTimePredicate;
  width?: GQLIntPredicate;
}

export interface GQLStringPredicate {
  contains?: string;
  ends_with?: string;
  equals?: string;
  in?: Array<string>;
  is_empty?: boolean;
  is_not_empty?: boolean;
  not_contains?: string;
  not_ends_with?: string;
  not_equals?: string;
  not_in?: Array<string>;
  not_starts_with?: string;
  starts_with?: string;
}

export interface GQLBlogRelationFilter {
  every?: GQLBlogFilter;
  none?: GQLBlogFilter;
  some?: GQLBlogFilter;
}

export interface GQLBlogFilter {
  AND?: Array<GQLBlogFilter>;
  OR?: Array<GQLBlogFilter>;
  _fullText?: string;
  authors?: GQLPersonRelationFilter;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUserFilter;
  deletedAt?: GQLIntPredicate;
  description?: GQLStringPredicate;
  featuredImage?: GQLImageFilter;
  id?: GQLIDPredicate;
  orderDate?: GQLDateTimePredicate;
  slug?: GQLStringPredicate;
  title?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
}

export interface GQLPersonRelationFilter {
  every?: GQLPersonFilter;
  none?: GQLPersonFilter;
  some?: GQLPersonFilter;
}

export interface GQLPersonFilter {
  AND?: Array<GQLPersonFilter>;
  OR?: Array<GQLPersonFilter>;
  _fullText?: string;
  blogs?: GQLBlogRelationFilter;
  courses?: GQLCourseRelationFilter;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUserFilter;
  deletedAt?: GQLIntPredicate;
  firstName?: GQLStringPredicate;
  githubUrl?: GQLStringPredicate;
  id?: GQLIDPredicate;
  image?: GQLImageFilter;
  lastName?: GQLStringPredicate;
  linkedinUrl?: GQLStringPredicate;
  summary?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
  websiteUrl?: GQLStringPredicate;
}

export interface GQLCourseRelationFilter {
  every?: GQLCourseFilter;
  none?: GQLCourseFilter;
  some?: GQLCourseFilter;
}

export interface GQLCourseFilter {
  AND?: Array<GQLCourseFilter>;
  OR?: Array<GQLCourseFilter>;
  _fullText?: string;
  courseUrls?: GQLCourseUrlRelationFilter;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUserFilter;
  deletedAt?: GQLIntPredicate;
  duration?: GQLFloatPredicate;
  id?: GQLIDPredicate;
  instructors?: GQLPersonRelationFilter;
  rating?: GQLIntPredicate;
  ratingUrl?: GQLStringPredicate;
  recommendationOrder?: GQLIntPredicate;
  school?: GQLSchoolFilter;
  title?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
  yearUpdated?: GQLIntPredicate;
}

export interface GQLCourseUrlRelationFilter {
  every?: GQLCourseUrlFilter;
  none?: GQLCourseUrlFilter;
  some?: GQLCourseUrlFilter;
}

export interface GQLCourseUrlFilter {
  AND?: Array<GQLCourseUrlFilter>;
  OR?: Array<GQLCourseUrlFilter>;
  _fullText?: string;
  course?: GQLCourseFilter;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUserFilter;
  deletedAt?: GQLIntPredicate;
  id?: GQLIDPredicate;
  school?: GQLSchoolFilter;
  updatedAt?: GQLDateTimePredicate;
  url?: GQLStringPredicate;
}

export interface GQLDateTimePredicate {
  equals?: GQLDateTime;
  gt?: GQLDateTime;
  gte?: GQLDateTime;
  in?: Array<GQLDateTime>;
  is_empty?: boolean;
  is_not_empty?: boolean;
  lt?: GQLDateTime;
  lte?: GQLDateTime;
  not_equals?: GQLDateTime;
  not_in?: Array<GQLDateTime>;
  relative?: GQLDateRelativePredicates;
}

export interface GQLDateRelativePredicates {
  gt?: GQLDateRelativePredicateType;
  gte?: GQLDateRelativePredicateType;
  lt?: GQLDateRelativePredicateType;
  lte?: GQLDateRelativePredicateType;
}

export interface GQLDateRelativePredicateType {
  op?: GQLRelativePredicateOpEnum;
  unit?: GQLRelativePredicateUnitEnum;
  value: string;
}

/**
 * Relative Date Predicate Operation Enum
 */
export const enum GQLRelativePredicateOpEnum {
  ADD = 'ADD',
  SUB = 'SUB'
}

/**
 * Relative Date Predicate Unit Enum
 */
export const enum GQLRelativePredicateUnitEnum {
  DAY = 'DAY',
  DAY_HOUR = 'DAY_HOUR',
  DAY_MICROSECOND = 'DAY_MICROSECOND',
  DAY_MINUTE = 'DAY_MINUTE',
  DAY_SECOND = 'DAY_SECOND',
  HOUR = 'HOUR',
  HOUR_MICROSECOND = 'HOUR_MICROSECOND',
  HOUR_MINUTE = 'HOUR_MINUTE',
  HOUR_SECOND = 'HOUR_SECOND',
  MICROSECOND = 'MICROSECOND',
  MINUTE = 'MINUTE',
  MINUTE_MICROSECOND = 'MINUTE_MICROSECOND',
  MINUTE_SECOND = 'MINUTE_SECOND',
  MONTH = 'MONTH',
  QUARTER = 'QUARTER',
  SECOND = 'SECOND',
  SECOND_MICROSECOND = 'SECOND_MICROSECOND',
  WEEK = 'WEEK',
  YEAR = 'YEAR',
  YEAR_MONTH = 'YEAR_MONTH'
}

export interface GQLUserFilter {
  AND?: Array<GQLUserFilter>;
  OR?: Array<GQLUserFilter>;
  _fullText?: string;
  avatar?: GQLFileFilter;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUserFilter;
  deletedAt?: GQLIntPredicate;
  email?: GQLStringPredicate;
  firstName?: GQLStringPredicate;
  id?: GQLIDPredicate;
  is8base?: GQLBoolPredicate;
  is_self?: boolean;
  lastName?: GQLStringPredicate;
  not_self?: boolean;
  origin?: GQLStringPredicate;
  roles?: GQLRoleRelationFilter;
  status?: GQLStringPredicate;
  timezone?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
}

export interface GQLFileFilter {
  AND?: Array<GQLFileFilter>;
  OR?: Array<GQLFileFilter>;
  _fullText?: string;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUserFilter;
  deletedAt?: GQLIntPredicate;
  downloadUrl?: GQLStringPredicate;
  fileId?: GQLStringPredicate;
  filename?: GQLStringPredicate;
  id?: GQLIDPredicate;
  image_image?: GQLImageRelationFilter;
  provider?: GQLStringPredicate;
  public?: GQLBoolPredicate;
  settings_landingPageImage?: GQLSettingRelationFilter;
  settings_menuBarLogo?: GQLSettingRelationFilter;
  shareUrl?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
  uploadUrl?: GQLStringPredicate;
  uploaded?: GQLBoolPredicate;
  users_avatar?: GQLUserRelationFilter;
}

export interface GQLIntPredicate {
  equals?: number;
  gt?: number;
  gte?: number;
  in?: Array<number>;
  is_empty?: boolean;
  is_not_empty?: boolean;
  lt?: number;
  lte?: number;
  not_equals?: number;
  not_in?: Array<number>;
}

export interface GQLIDPredicate {
  contains?: string;
  ends_with?: string;
  equals?: string;
  gt?: string;
  gte?: string;
  in?: Array<string>;
  is_empty?: boolean;
  is_not_empty?: boolean;
  lt?: string;
  lte?: string;
  not_contains?: string;
  not_ends_with?: string;
  not_equals?: string;
  not_in?: Array<string>;
  not_starts_with?: string;
  starts_with?: string;
}

export interface GQLImageRelationFilter {
  every?: GQLImageFilter;
  none?: GQLImageFilter;
  some?: GQLImageFilter;
}

export interface GQLBoolPredicate {
  equals?: boolean;
  is_empty?: boolean;
  is_not_empty?: boolean;
  not_equals?: boolean;
}

export interface GQLSettingRelationFilter {
  every?: GQLSettingFilter;
  none?: GQLSettingFilter;
  some?: GQLSettingFilter;
}

export interface GQLSettingFilter {
  AND?: Array<GQLSettingFilter>;
  OR?: Array<GQLSettingFilter>;
  _fullText?: string;
  bgColor?: GQLStringPredicate;
  buttonLinkColor?: GQLStringPredicate;
  containerColor?: GQLStringPredicate;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUserFilter;
  currency?: GQLStringPredicate;
  dateFormat?: GQLStringPredicate;
  deletedAt?: GQLIntPredicate;
  landingPageImage?: GQLFileFilter;
  language?: GQLStringPredicate;
  leftNavColor?: GQLStringPredicate;
  menuBarBGColor?: GQLStringPredicate;
  menuBarIconsColor?: GQLStringPredicate;
  menuBarLogo?: GQLFileFilter;
  passwordMinLength?: GQLIntPredicate;
  passwordRequireLowercase?: GQLBoolPredicate;
  passwordRequireNumbers?: GQLBoolPredicate;
  passwordRequireSpecial?: GQLBoolPredicate;
  passwordRequireUppercase?: GQLBoolPredicate;
  passwordUpdateInterval?: GQLIntPredicate;
  rememberDevice?: GQLStringPredicate;
  timezone?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
  userInterfaceStyle?: GQLStringPredicate;
  vanityUrl?: GQLStringPredicate;
}

export interface GQLUserRelationFilter {
  every?: GQLUserFilter;
  none?: GQLUserFilter;
  some?: GQLUserFilter;
}

export interface GQLRoleRelationFilter {
  every?: GQLRoleFilter;
  none?: GQLRoleFilter;
  some?: GQLRoleFilter;
}

export interface GQLRoleFilter {
  AND?: Array<GQLRoleFilter>;
  OR?: Array<GQLRoleFilter>;
  _fullText?: string;
  apiTokens?: GQLApiTokenRelationFilter;
  authenticationProfiles?: GQLAuthenticationProfileRelationFilter;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUserFilter;
  deletedAt?: GQLIntPredicate;
  description?: GQLStringPredicate;
  id?: GQLIDPredicate;
  name?: GQLStringPredicate;
  permissions?: GQLPermissionRelationFilter;
  updatedAt?: GQLDateTimePredicate;
  users?: GQLUserRelationFilter;
}

export interface GQLApiTokenRelationFilter {
  every?: GQLApiTokenFilter;
  none?: GQLApiTokenFilter;
  some?: GQLApiTokenFilter;
}

export interface GQLApiTokenFilter {
  AND?: Array<GQLApiTokenFilter>;
  OR?: Array<GQLApiTokenFilter>;
  _fullText?: string;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUserFilter;
  deletedAt?: GQLIntPredicate;
  id?: GQLIDPredicate;
  name?: GQLStringPredicate;
  roles?: GQLRoleRelationFilter;
  token?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
}

export interface GQLAuthenticationProfileRelationFilter {
  every?: GQLAuthenticationProfileFilter;
  none?: GQLAuthenticationProfileFilter;
  some?: GQLAuthenticationProfileFilter;
}

export interface GQLAuthenticationProfileFilter {
  AND?: Array<GQLAuthenticationProfileFilter>;
  OR?: Array<GQLAuthenticationProfileFilter>;
  _fullText?: string;
  clientId?: GQLStringPredicate;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUserFilter;
  databaseName?: GQLStringPredicate;
  deletedAt?: GQLIntPredicate;
  domain?: GQLStringPredicate;
  id?: GQLIDPredicate;
  managementDomain?: GQLStringPredicate;
  name?: GQLStringPredicate;
  roles?: GQLRoleRelationFilter;
  secret?: GQLStringPredicate;
  selfSignUpEnabled?: GQLBoolPredicate;
  type?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
}

export interface GQLPermissionRelationFilter {
  every?: GQLPermissionFilter;
  none?: GQLPermissionFilter;
  some?: GQLPermissionFilter;
}

export interface GQLPermissionFilter {
  AND?: Array<GQLPermissionFilter>;
  OR?: Array<GQLPermissionFilter>;
  _fullText?: string;
  appId?: GQLStringPredicate;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUserFilter;
  deletedAt?: GQLIntPredicate;
  resource?: GQLStringPredicate;
  resourceType?: GQLStringPredicate;
  role?: GQLRoleFilter;
  updatedAt?: GQLDateTimePredicate;
}

export interface GQLSchoolFilter {
  AND?: Array<GQLSchoolFilter>;
  OR?: Array<GQLSchoolFilter>;
  _fullText?: string;
  courseUrls?: GQLCourseUrlRelationFilter;
  courses?: GQLCourseRelationFilter;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUserFilter;
  deletedAt?: GQLIntPredicate;
  description?: GQLStringPredicate;
  id?: GQLIDPredicate;
  image?: GQLImageFilter;
  name?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
  url?: GQLStringPredicate;
}

export interface GQLFloatPredicate {
  equals?: number;
  gt?: number;
  gte?: number;
  in?: Array<number>;
  is_empty?: boolean;
  is_not_empty?: boolean;
  lt?: number;
  lte?: number;
  not_equals?: number;
  not_in?: Array<number>;
}

export interface GQLTechnologyLogoFilter {
  AND?: Array<GQLTechnologyLogoFilter>;
  OR?: Array<GQLTechnologyLogoFilter>;
  _fullText?: string;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUserFilter;
  deletedAt?: GQLIntPredicate;
  id?: GQLIDPredicate;
  image?: GQLImageFilter;
  updatedAt?: GQLDateTimePredicate;
}

export interface GQLImageGroupBy {
  first?: number;
  having?: GQLHaving;
  last?: number;
  query: GQLImageGroupByQuery;
  skip?: number;
  sort?: Array<GQLGroupBySort>;
}

export interface GQLHaving {
  AND?: Array<GQLHaving>;
  OR?: Array<GQLHaving>;
  alias?: string;
  bigint?: GQLBigIntPredicateHaving;
  bool?: GQLBoolPredicateHaving;
  date?: GQLDatePredicateHaving;
  datetime?: GQLDateTimePredicateHaving;
  float?: GQLFloatPredicateHaving;
  id?: GQLIDPredicateHaving;
  int?: GQLIntPredicateHaving;
  string?: GQLStringPredicateHaving;
}

export interface GQLBigIntPredicateHaving {
  AND?: Array<GQLBigIntPredicateHaving>;
  OR?: Array<GQLBigIntPredicateHaving>;
  equals?: GQLBigInt;
  gt?: GQLBigInt;
  gte?: GQLBigInt;
  in?: Array<GQLBigInt>;
  is_empty?: boolean;
  is_not_empty?: boolean;
  lt?: GQLBigInt;
  lte?: GQLBigInt;
  not_equals?: GQLBigInt;
  not_in?: Array<GQLBigInt>;
}

/**
 * The `BigInt` scalar type represents whole numeric values.
 */
export type GQLBigInt = any;

export interface GQLBoolPredicateHaving {
  AND?: Array<GQLBoolPredicateHaving>;
  OR?: Array<GQLBoolPredicateHaving>;
  equals?: boolean;
  is_empty?: boolean;
  is_not_empty?: boolean;
  not_equals?: boolean;
}

export interface GQLDatePredicateHaving {
  AND?: Array<GQLDatePredicateHaving>;
  OR?: Array<GQLDatePredicateHaving>;
  equals?: GQLDate;
  gt?: GQLDate;
  gte?: GQLDate;
  in?: Array<GQLDate>;
  is_empty?: boolean;
  is_not_empty?: boolean;
  lt?: GQLDate;
  lte?: GQLDate;
  not_equals?: GQLDate;
  not_in?: Array<GQLDate>;
}

/**
 * A date string, such as `2007-12-25`, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
 */
export type GQLDate = any;

export interface GQLDateTimePredicateHaving {
  AND?: Array<GQLDateTimePredicateHaving>;
  OR?: Array<GQLDateTimePredicateHaving>;
  equals?: GQLDateTime;
  gt?: GQLDateTime;
  gte?: GQLDateTime;
  in?: Array<GQLDateTime>;
  is_empty?: boolean;
  is_not_empty?: boolean;
  lt?: GQLDateTime;
  lte?: GQLDateTime;
  not_equals?: GQLDateTime;
  not_in?: Array<GQLDateTime>;
}

export interface GQLFloatPredicateHaving {
  AND?: Array<GQLFloatPredicateHaving>;
  OR?: Array<GQLFloatPredicateHaving>;
  equals?: number;
  gt?: number;
  gte?: number;
  in?: Array<number>;
  is_empty?: boolean;
  is_not_empty?: boolean;
  lt?: number;
  lte?: number;
  not_equals?: number;
  not_in?: Array<number>;
}

export interface GQLIDPredicateHaving {
  AND?: Array<GQLIDPredicateHaving>;
  OR?: Array<GQLIDPredicateHaving>;
  contains?: string;
  ends_with?: string;
  equals?: string;
  gt?: string;
  gte?: string;
  in?: Array<string>;
  is_empty?: boolean;
  is_not_empty?: boolean;
  lt?: string;
  lte?: string;
  not_contains?: string;
  not_ends_with?: string;
  not_equals?: string;
  not_in?: Array<string>;
  not_starts_with?: string;
  starts_with?: string;
}

export interface GQLIntPredicateHaving {
  AND?: Array<GQLIntPredicateHaving>;
  OR?: Array<GQLIntPredicateHaving>;
  equals?: number;
  gt?: number;
  gte?: number;
  in?: Array<number>;
  is_empty?: boolean;
  is_not_empty?: boolean;
  lt?: number;
  lte?: number;
  not_equals?: number;
  not_in?: Array<number>;
}

export interface GQLStringPredicateHaving {
  AND?: Array<GQLStringPredicateHaving>;
  OR?: Array<GQLStringPredicateHaving>;
  contains?: string;
  ends_with?: string;
  equals?: string;
  in?: Array<string>;
  is_empty?: boolean;
  is_not_empty?: boolean;
  not_contains?: string;
  not_ends_with?: string;
  not_equals?: string;
  not_in?: Array<string>;
  not_starts_with?: string;
  starts_with?: string;
}

export interface GQLImageGroupByQuery {
  _group?: Array<GQLGroupIdentifiersGroupByField>;
  altText?: Array<GQLGroupByField>;
  blogs?: GQLBlogGroupByQuery;
  createdAt?: Array<GQLGroupByField>;
  createdBy?: GQLUserGroupByQuery;
  height?: Array<GQLGroupByField>;
  id?: Array<GQLGroupByField>;
  image?: GQLFileGroupByQuery;
  person?: GQLPersonGroupByQuery;
  schools?: GQLSchoolGroupByQuery;
  technologyLogos?: GQLTechnologyLogoGroupByQuery;
  updatedAt?: Array<GQLGroupByField>;
  width?: Array<GQLGroupByField>;
}

export interface GQLGroupIdentifiersGroupByField {
  as: string;
}

export interface GQLGroupByField {
  as?: string;
  fn?: Array<GQLGroupByFieldFunction | null>;
}

export interface GQLGroupByFieldFunction {
  abs?: boolean;
  aggregate?: GQLAggregationFunctionType;
  ascii?: boolean;
  bitLength?: boolean;
  ceil?: boolean;
  charLength?: boolean;
  crc32?: boolean;
  datePart?: GQLDatePartFunctionType;
  distinct?: boolean;
  floor?: boolean;
  hex?: boolean;
  ifNull?: string;
  isNull?: boolean;
  left?: number;
  length?: boolean;
  like?: GQLPatternFunctionArguments;
  locate?: GQLLocateFunctionArguments;
  lower?: boolean;
  lpad?: GQLStringPadFunctionArguments;
  ltrim?: boolean;
  mod?: number;
  notLike?: GQLPatternFunctionArguments;
  nullIf?: string;
  replace?: GQLReplaceFunctionArguments;
  reverse?: boolean;
  right?: number;
  round?: number;
  rpad?: GQLStringPadFunctionArguments;
  rtrim?: boolean;
  sign?: boolean;
  substring?: GQLSubstringFunctionArguments;
  trim?: GQLTrimFunctionArguments;
  truncate?: number;
  upper?: boolean;
}

export const enum GQLAggregationFunctionType {
  ANY_VALUE = 'ANY_VALUE',
  AVG = 'AVG',
  COUNT = 'COUNT',
  GROUP_CONCAT = 'GROUP_CONCAT',
  MAX = 'MAX',
  MIN = 'MIN',
  STDDEV_POP = 'STDDEV_POP',
  STDDEV_SAMP = 'STDDEV_SAMP',
  SUM = 'SUM',
  VAR_POP = 'VAR_POP',
  VAR_SAMP = 'VAR_SAMP'
}

export const enum GQLDatePartFunctionType {
  DATE = 'DATE',
  DAY = 'DAY',
  DAY_NAME = 'DAY_NAME',
  DAY_OF_MONTH = 'DAY_OF_MONTH',
  DAY_OF_WEEK = 'DAY_OF_WEEK',
  DAY_OF_YEAR = 'DAY_OF_YEAR',
  HOUR = 'HOUR',
  LAST_DAY = 'LAST_DAY',
  MICROSECOND = 'MICROSECOND',
  MINUTE = 'MINUTE',
  MONTH = 'MONTH',
  MONTH_NAME = 'MONTH_NAME',
  QUARTER = 'QUARTER',
  SECOND = 'SECOND',
  TIME = 'TIME',
  WEEK = 'WEEK',
  WEEK_DAY = 'WEEK_DAY',
  WEEK_OF_YEAR = 'WEEK_OF_YEAR',
  YEAR = 'YEAR',
  YEAR_WEEK = 'YEAR_WEEK'
}

export interface GQLPatternFunctionArguments {
  escape?: string;
  pattern: string;
}

export interface GQLLocateFunctionArguments {
  pos?: number;
  str: string;
}

export interface GQLStringPadFunctionArguments {
  len: number;
  str: string;
}

export interface GQLReplaceFunctionArguments {
  from: string;
  to: string;
}

export interface GQLSubstringFunctionArguments {
  len?: number;
  pos: number;
}

export interface GQLTrimFunctionArguments {
  mode?: GQLStringTrimMode;
  str: string;
}

export const enum GQLStringTrimMode {
  BOTH = 'BOTH',
  LEADING = 'LEADING',
  TRAILING = 'TRAILING'
}

export interface GQLBlogGroupByQuery {
  _group?: Array<GQLGroupIdentifiersGroupByField>;
  authors?: GQLPersonGroupByQuery;
  createdAt?: Array<GQLGroupByField>;
  createdBy?: GQLUserGroupByQuery;
  description?: Array<GQLGroupByField>;
  featuredImage?: GQLImageGroupByQuery;
  id?: Array<GQLGroupByField>;
  orderDate?: Array<GQLGroupByField>;
  slug?: Array<GQLGroupByField>;
  title?: Array<GQLGroupByField>;
  updatedAt?: Array<GQLGroupByField>;
}

export interface GQLPersonGroupByQuery {
  _group?: Array<GQLGroupIdentifiersGroupByField>;
  blogs?: GQLBlogGroupByQuery;
  courses?: GQLCourseGroupByQuery;
  createdAt?: Array<GQLGroupByField>;
  createdBy?: GQLUserGroupByQuery;
  firstName?: Array<GQLGroupByField>;
  githubUrl?: Array<GQLGroupByField>;
  id?: Array<GQLGroupByField>;
  image?: GQLImageGroupByQuery;
  lastName?: Array<GQLGroupByField>;
  linkedinUrl?: Array<GQLGroupByField>;
  summary?: Array<GQLGroupByField>;
  updatedAt?: Array<GQLGroupByField>;
  websiteUrl?: Array<GQLGroupByField>;
}

export interface GQLCourseGroupByQuery {
  _group?: Array<GQLGroupIdentifiersGroupByField>;
  courseUrls?: GQLCourseUrlGroupByQuery;
  createdAt?: Array<GQLGroupByField>;
  createdBy?: GQLUserGroupByQuery;
  duration?: Array<GQLGroupByField>;
  id?: Array<GQLGroupByField>;
  instructors?: GQLPersonGroupByQuery;
  rating?: Array<GQLGroupByField>;
  ratingUrl?: Array<GQLGroupByField>;
  recommendationOrder?: Array<GQLGroupByField>;
  school?: GQLSchoolGroupByQuery;
  title?: Array<GQLGroupByField>;
  updatedAt?: Array<GQLGroupByField>;
  yearUpdated?: Array<GQLGroupByField>;
}

export interface GQLCourseUrlGroupByQuery {
  _group?: Array<GQLGroupIdentifiersGroupByField>;
  course?: GQLCourseGroupByQuery;
  createdAt?: Array<GQLGroupByField>;
  createdBy?: GQLUserGroupByQuery;
  id?: Array<GQLGroupByField>;
  school?: GQLSchoolGroupByQuery;
  updatedAt?: Array<GQLGroupByField>;
  url?: Array<GQLGroupByField>;
}

export interface GQLUserGroupByQuery {
  _group?: Array<GQLGroupIdentifiersGroupByField>;
  avatar?: GQLFileGroupByQuery;
  createdAt?: Array<GQLGroupByField>;
  createdBy?: GQLUserGroupByQuery;
  email?: Array<GQLGroupByField>;
  firstName?: Array<GQLGroupByField>;
  id?: Array<GQLGroupByField>;
  is8base?: Array<GQLGroupByField>;
  lastName?: Array<GQLGroupByField>;
  origin?: Array<GQLGroupByField>;
  roles?: GQLRoleGroupByQuery;
  status?: Array<GQLGroupByField>;
  timezone?: Array<GQLGroupByField>;
  updatedAt?: Array<GQLGroupByField>;
}

export interface GQLFileGroupByQuery {
  _group?: Array<GQLGroupIdentifiersGroupByField>;
  createdAt?: Array<GQLGroupByField>;
  createdBy?: GQLUserGroupByQuery;
  downloadUrl?: Array<GQLGroupByField>;
  fields?: Array<GQLGroupByField>;
  fileId?: Array<GQLGroupByField>;
  filename?: Array<GQLGroupByField>;
  id?: Array<GQLGroupByField>;
  image_image?: GQLImageGroupByQuery;
  meta?: Array<GQLGroupByField>;
  mods?: Array<GQLGroupByField>;
  provider?: Array<GQLGroupByField>;
  public?: Array<GQLGroupByField>;
  settings_landingPageImage?: GQLSettingGroupByQuery;
  settings_menuBarLogo?: GQLSettingGroupByQuery;
  shareUrl?: Array<GQLGroupByField>;
  updatedAt?: Array<GQLGroupByField>;
  uploadUrl?: Array<GQLGroupByField>;
  uploaded?: Array<GQLGroupByField>;
  users_avatar?: GQLUserGroupByQuery;
}

export interface GQLSettingGroupByQuery {
  _group?: Array<GQLGroupIdentifiersGroupByField>;
  bgColor?: Array<GQLGroupByField>;
  buttonLinkColor?: Array<GQLGroupByField>;
  containerColor?: Array<GQLGroupByField>;
  createdAt?: Array<GQLGroupByField>;
  createdBy?: GQLUserGroupByQuery;
  currency?: Array<GQLGroupByField>;
  dateFormat?: Array<GQLGroupByField>;
  landingPageImage?: GQLFileGroupByQuery;
  language?: Array<GQLGroupByField>;
  leftNavColor?: Array<GQLGroupByField>;
  menuBarBGColor?: Array<GQLGroupByField>;
  menuBarIconsColor?: Array<GQLGroupByField>;
  menuBarLogo?: GQLFileGroupByQuery;
  passwordMinLength?: Array<GQLGroupByField>;
  passwordRequireLowercase?: Array<GQLGroupByField>;
  passwordRequireNumbers?: Array<GQLGroupByField>;
  passwordRequireSpecial?: Array<GQLGroupByField>;
  passwordRequireUppercase?: Array<GQLGroupByField>;
  passwordUpdateInterval?: Array<GQLGroupByField>;
  rememberDevice?: Array<GQLGroupByField>;
  timezone?: Array<GQLGroupByField>;
  updatedAt?: Array<GQLGroupByField>;
  userInterfaceStyle?: Array<GQLGroupByField>;
  vanityUrl?: Array<GQLGroupByField>;
}

export interface GQLRoleGroupByQuery {
  _group?: Array<GQLGroupIdentifiersGroupByField>;
  apiTokens?: GQLApiTokenGroupByQuery;
  authenticationProfiles?: GQLAuthenticationProfileGroupByQuery;
  createdAt?: Array<GQLGroupByField>;
  createdBy?: GQLUserGroupByQuery;
  description?: Array<GQLGroupByField>;
  id?: Array<GQLGroupByField>;
  name?: Array<GQLGroupByField>;
  permissions?: GQLPermissionGroupByQuery;
  updatedAt?: Array<GQLGroupByField>;
  users?: GQLUserGroupByQuery;
}

export interface GQLApiTokenGroupByQuery {
  _group?: Array<GQLGroupIdentifiersGroupByField>;
  createdAt?: Array<GQLGroupByField>;
  createdBy?: GQLUserGroupByQuery;
  id?: Array<GQLGroupByField>;
  name?: Array<GQLGroupByField>;
  roles?: GQLRoleGroupByQuery;
  updatedAt?: Array<GQLGroupByField>;
}

export interface GQLAuthenticationProfileGroupByQuery {
  _group?: Array<GQLGroupIdentifiersGroupByField>;
  audiences?: Array<GQLGroupByField>;
  clientId?: Array<GQLGroupByField>;
  createdAt?: Array<GQLGroupByField>;
  createdBy?: GQLUserGroupByQuery;
  databaseName?: Array<GQLGroupByField>;
  domain?: Array<GQLGroupByField>;
  id?: Array<GQLGroupByField>;
  managementDomain?: Array<GQLGroupByField>;
  name?: Array<GQLGroupByField>;
  roles?: GQLRoleGroupByQuery;
  secret?: Array<GQLGroupByField>;
  selfSignUpEmailDomains?: Array<GQLGroupByField>;
  selfSignUpEnabled?: Array<GQLGroupByField>;
  type?: Array<GQLGroupByField>;
  updatedAt?: Array<GQLGroupByField>;
}

export interface GQLPermissionGroupByQuery {
  _group?: Array<GQLGroupIdentifiersGroupByField>;
  appId?: Array<GQLGroupByField>;
  createdAt?: Array<GQLGroupByField>;
  createdBy?: GQLUserGroupByQuery;
  permission?: Array<GQLGroupByField>;
  resource?: Array<GQLGroupByField>;
  resourceType?: Array<GQLGroupByField>;
  role?: GQLRoleGroupByQuery;
  updatedAt?: Array<GQLGroupByField>;
}

export interface GQLSchoolGroupByQuery {
  _group?: Array<GQLGroupIdentifiersGroupByField>;
  courseUrls?: GQLCourseUrlGroupByQuery;
  courses?: GQLCourseGroupByQuery;
  createdAt?: Array<GQLGroupByField>;
  createdBy?: GQLUserGroupByQuery;
  description?: Array<GQLGroupByField>;
  id?: Array<GQLGroupByField>;
  image?: GQLImageGroupByQuery;
  name?: Array<GQLGroupByField>;
  updatedAt?: Array<GQLGroupByField>;
  url?: Array<GQLGroupByField>;
}

export interface GQLTechnologyLogoGroupByQuery {
  _group?: Array<GQLGroupIdentifiersGroupByField>;
  createdAt?: Array<GQLGroupByField>;
  createdBy?: GQLUserGroupByQuery;
  id?: Array<GQLGroupByField>;
  image?: GQLImageGroupByQuery;
  updatedAt?: Array<GQLGroupByField>;
}

export interface GQLGroupBySort {
  alias: string;
  direction: GQLSortOrder;
}

/**
 * SortOrder
 */
export const enum GQLSortOrder {
  ASC = 'ASC',
  DESC = 'DESC'
}

/**
 * No longer supported. Use `sort` instead.
 */
export const enum GQLImageOrderBy {
  altText_ASC = 'altText_ASC',
  altText_DESC = 'altText_DESC',
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  deletedAt_ASC = 'deletedAt_ASC',
  deletedAt_DESC = 'deletedAt_DESC',
  height_ASC = 'height_ASC',
  height_DESC = 'height_DESC',
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC',
  width_ASC = 'width_ASC',
  width_DESC = 'width_DESC'
}

export interface GQLImageSort {
  altText?: GQLSortOrder;
  createdAt?: GQLSortOrder;
  createdBy?: GQLUserSort;
  deletedAt?: GQLSortOrder;
  height?: GQLSortOrder;
  id?: GQLSortOrder;
  image?: GQLFileSort;
  person?: GQLPersonSort;
  schools?: GQLSchoolSort;
  technologyLogos?: GQLTechnologyLogoSort;
  updatedAt?: GQLSortOrder;
  width?: GQLSortOrder;
}

export interface GQLUserSort {
  avatar?: GQLFileSort;
  createdAt?: GQLSortOrder;
  createdBy?: GQLUserSort;
  deletedAt?: GQLSortOrder;
  email?: GQLSortOrder;
  firstName?: GQLSortOrder;
  id?: GQLSortOrder;
  is8base?: GQLSortOrder;
  lastName?: GQLSortOrder;
  origin?: GQLSortOrder;
  status?: GQLSortOrder;
  timezone?: GQLSortOrder;
  updatedAt?: GQLSortOrder;
}

export interface GQLFileSort {
  createdAt?: GQLSortOrder;
  createdBy?: GQLUserSort;
  deletedAt?: GQLSortOrder;
  downloadUrl?: GQLSortOrder;
  fileId?: GQLSortOrder;
  filename?: GQLSortOrder;
  id?: GQLSortOrder;
  provider?: GQLSortOrder;
  public?: GQLSortOrder;
  shareUrl?: GQLSortOrder;
  updatedAt?: GQLSortOrder;
  uploadUrl?: GQLSortOrder;
  uploaded?: GQLSortOrder;
}

export interface GQLPersonSort {
  createdAt?: GQLSortOrder;
  createdBy?: GQLUserSort;
  deletedAt?: GQLSortOrder;
  firstName?: GQLSortOrder;
  githubUrl?: GQLSortOrder;
  id?: GQLSortOrder;
  image?: GQLImageSort;
  lastName?: GQLSortOrder;
  linkedinUrl?: GQLSortOrder;
  summary?: GQLSortOrder;
  updatedAt?: GQLSortOrder;
  websiteUrl?: GQLSortOrder;
}

export interface GQLSchoolSort {
  createdAt?: GQLSortOrder;
  createdBy?: GQLUserSort;
  deletedAt?: GQLSortOrder;
  description?: GQLSortOrder;
  id?: GQLSortOrder;
  image?: GQLImageSort;
  name?: GQLSortOrder;
  updatedAt?: GQLSortOrder;
  url?: GQLSortOrder;
}

export interface GQLTechnologyLogoSort {
  createdAt?: GQLSortOrder;
  createdBy?: GQLUserSort;
  deletedAt?: GQLSortOrder;
  id?: GQLSortOrder;
  image?: GQLImageSort;
  updatedAt?: GQLSortOrder;
}

/**
 * ImageListResponse output
 */
export interface GQLImageListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * Aggregated items
   */
  groups: Array<GQLGroupByResponse>;

  /**
   * List items
   */
  items: Array<GQLImage>;
}

export interface GQLGroupByResponse {
  ApiTokenGroup: GQLApiTokenListResponse;
  AuthenticationProfileGroup: GQLAuthenticationProfileListResponse;
  BigInt?: GQLBigInt;
  BlogGroup: GQLBlogListResponse;
  BlogUserGroup: GQLBlogUserListResponse;
  Boolean?: boolean;
  CommentGroup: GQLCommentListResponse;
  CourseGroup: GQLCourseListResponse;
  CourseUrlGroup: GQLCourseUrlListResponse;
  Date?: GQLDate;
  DateTime?: GQLDateTime;
  EnvironmentVariableGroup: GQLEnvironmentVariableListResponse;
  FileGroup: GQLFileListResponse;
  Float?: number;
  GroupIds?: Array<string>;
  ID?: string;
  ImageGroup: GQLImageListResponse;
  Int?: number;
  JSON?: GQLJSON;
  PersonGroup: GQLPersonListResponse;
  RoleGroup: GQLRoleListResponse;
  SchoolGroup: GQLSchoolListResponse;
  String?: string;
  TechnologyLogoGroup: GQLTechnologyLogoListResponse;
  UserGroup: GQLUserListResponse;
}

export interface GQLApiTokenGroupBy {
  first?: number;
  having?: GQLHaving;
  last?: number;
  query: GQLApiTokenGroupByQuery;
  skip?: number;
  sort?: Array<GQLGroupBySort>;
}

/**
 * No longer supported. Use `sort` instead.
 */
export const enum GQLApiTokenOrderBy {
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  deletedAt_ASC = 'deletedAt_ASC',
  deletedAt_DESC = 'deletedAt_DESC',
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  name_ASC = 'name_ASC',
  name_DESC = 'name_DESC',
  token_ASC = 'token_ASC',
  token_DESC = 'token_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC'
}

export interface GQLApiTokenSort {
  createdAt?: GQLSortOrder;
  createdBy?: GQLUserSort;
  deletedAt?: GQLSortOrder;
  id?: GQLSortOrder;
  name?: GQLSortOrder;
  updatedAt?: GQLSortOrder;
}

/**
 * ApiTokenListResponse output
 */
export interface GQLApiTokenListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * Aggregated items
   */
  groups: Array<GQLGroupByResponse>;

  /**
   * List items
   */
  items: Array<GQLApiToken>;
}

export interface GQLAuthenticationProfileGroupBy {
  first?: number;
  having?: GQLHaving;
  last?: number;
  query: GQLAuthenticationProfileGroupByQuery;
  skip?: number;
  sort?: Array<GQLGroupBySort>;
}

/**
 * No longer supported. Use `sort` instead.
 */
export const enum GQLAuthenticationProfileOrderBy {
  clientId_ASC = 'clientId_ASC',
  clientId_DESC = 'clientId_DESC',
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  databaseName_ASC = 'databaseName_ASC',
  databaseName_DESC = 'databaseName_DESC',
  deletedAt_ASC = 'deletedAt_ASC',
  deletedAt_DESC = 'deletedAt_DESC',
  domain_ASC = 'domain_ASC',
  domain_DESC = 'domain_DESC',
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  managementDomain_ASC = 'managementDomain_ASC',
  managementDomain_DESC = 'managementDomain_DESC',
  name_ASC = 'name_ASC',
  name_DESC = 'name_DESC',
  secret_ASC = 'secret_ASC',
  secret_DESC = 'secret_DESC',
  selfSignUpEnabled_ASC = 'selfSignUpEnabled_ASC',
  selfSignUpEnabled_DESC = 'selfSignUpEnabled_DESC',
  type_ASC = 'type_ASC',
  type_DESC = 'type_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC'
}

export interface GQLAuthenticationProfileSort {
  clientId?: GQLSortOrder;
  createdAt?: GQLSortOrder;
  createdBy?: GQLUserSort;
  databaseName?: GQLSortOrder;
  deletedAt?: GQLSortOrder;
  domain?: GQLSortOrder;
  id?: GQLSortOrder;
  managementDomain?: GQLSortOrder;
  name?: GQLSortOrder;
  secret?: GQLSortOrder;
  selfSignUpEnabled?: GQLSortOrder;
  type?: GQLSortOrder;
  updatedAt?: GQLSortOrder;
}

/**
 * AuthenticationProfileListResponse output
 */
export interface GQLAuthenticationProfileListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * Aggregated items
   */
  groups: Array<GQLGroupByResponse>;

  /**
   * List items
   */
  items: Array<GQLAuthenticationProfile>;
}

export interface GQLAuthenticationProfile {
  _description?: string;
  attributes?: GQLAuthenticationProfileAttributes;
  audiences?: Array<string | null>;
  clientId?: string;
  createdAt?: GQLDateTime;
  createdBy?: GQLUser;
  databaseName?: string;
  deletedAt?: number;
  domain?: string;
  id?: string;
  managementDomain?: string;
  name?: string;
  roles?: GQLRoleListResponse;
  secret?: string;
  selfSignUpEmailDomains?: Array<string | null>;
  selfSignUpEnabled?: boolean;
  type?: string;
  updatedAt?: GQLDateTime;
}

/**
 * Authentication Profile Attributes
 */
export type GQLAuthenticationProfileAttributes =
GQLCognitoAuthProfileAttributes;

/** Use this to resolve union type AuthenticationProfileAttributes */
export type GQLPossibleAuthenticationProfileAttributesTypeNames =
'CognitoAuthProfileAttributes';

export interface GQLAuthenticationProfileAttributesNameMap {
  AuthenticationProfileAttributes: GQLAuthenticationProfileAttributes;
  CognitoAuthProfileAttributes: GQLCognitoAuthProfileAttributes;
}

/**
 * Authentication Profile Attributes for Cognito
 */
export interface GQLCognitoAuthProfileAttributes {
  clientAuthDomain?: string;
}

export interface GQLRoleGroupBy {
  first?: number;
  having?: GQLHaving;
  last?: number;
  query: GQLRoleGroupByQuery;
  skip?: number;
  sort?: Array<GQLGroupBySort>;
}

/**
 * No longer supported. Use `sort` instead.
 */
export const enum GQLRoleOrderBy {
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  deletedAt_ASC = 'deletedAt_ASC',
  deletedAt_DESC = 'deletedAt_DESC',
  description_ASC = 'description_ASC',
  description_DESC = 'description_DESC',
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  name_ASC = 'name_ASC',
  name_DESC = 'name_DESC',
  systemType_ASC = 'systemType_ASC',
  systemType_DESC = 'systemType_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC'
}

export interface GQLRoleSort {
  createdAt?: GQLSortOrder;
  createdBy?: GQLUserSort;
  deletedAt?: GQLSortOrder;
  description?: GQLSortOrder;
  id?: GQLSortOrder;
  name?: GQLSortOrder;
  updatedAt?: GQLSortOrder;
}

/**
 * RoleListResponse output
 */
export interface GQLRoleListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * Aggregated items
   */
  groups: Array<GQLGroupByResponse>;

  /**
   * List items
   */
  items: Array<GQLRole>;
}

export interface GQLRole {
  _description?: string;
  apiTokens?: GQLApiTokenListResponse;
  authenticationProfiles?: GQLAuthenticationProfileListResponse;
  createdAt?: GQLDateTime;
  createdBy?: GQLUser;
  deletedAt?: number;
  description?: string;
  id?: string;
  membersCount: number;
  name?: string;
  permissions?: GQLPermissionListResponse;
  updatedAt?: GQLDateTime;
  users?: GQLUserListResponse;
}

/**
 * Permission Filter
 */
export interface GQLPermissionInputFilter {
  action?: string;
  applicationName?: string;
  resource?: string;
  resourceType?: GQLPermissionResourceTypeEnum;
}

export const enum GQLPermissionResourceTypeEnum {
  custom = 'custom',
  data = 'data'
}

/**
 * PermissionListResponse output
 */
export interface GQLPermissionListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * Aggregated items
   */
  groups: Array<GQLGroupByResponse>;

  /**
   * List items
   */
  items: Array<GQLPermission>;
}

export interface GQLPermission {
  _description?: string;
  appId?: string;
  createdAt?: GQLDateTime;
  createdBy?: GQLUser;
  permission?: GQLJSON;
  resource?: string;
  resourceType?: string;
  role?: GQLRole;
  updatedAt?: GQLDateTime;
}

export interface GQLUserGroupBy {
  first?: number;
  having?: GQLHaving;
  last?: number;
  query: GQLUserGroupByQuery;
  skip?: number;
  sort?: Array<GQLGroupBySort>;
}

/**
 * No longer supported. Use `sort` instead.
 */
export const enum GQLUserOrderBy {
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  deletedAt_ASC = 'deletedAt_ASC',
  deletedAt_DESC = 'deletedAt_DESC',
  email_ASC = 'email_ASC',
  email_DESC = 'email_DESC',
  firstName_ASC = 'firstName_ASC',
  firstName_DESC = 'firstName_DESC',
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  is8base_ASC = 'is8base_ASC',
  is8base_DESC = 'is8base_DESC',
  isOwner_ASC = 'isOwner_ASC',
  isOwner_DESC = 'isOwner_DESC',
  lastName_ASC = 'lastName_ASC',
  lastName_DESC = 'lastName_DESC',
  origin_ASC = 'origin_ASC',
  origin_DESC = 'origin_DESC',
  status_ASC = 'status_ASC',
  status_DESC = 'status_DESC',
  timezone_ASC = 'timezone_ASC',
  timezone_DESC = 'timezone_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC'
}

/**
 * UserListResponse output
 */
export interface GQLUserListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * Aggregated items
   */
  groups: Array<GQLGroupByResponse>;

  /**
   * List items
   */
  items: Array<GQLUser>;
}

export interface GQLBlogGroupBy {
  first?: number;
  having?: GQLHaving;
  last?: number;
  query: GQLBlogGroupByQuery;
  skip?: number;
  sort?: Array<GQLGroupBySort>;
}

/**
 * No longer supported. Use `sort` instead.
 */
export const enum GQLBlogOrderBy {
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  deletedAt_ASC = 'deletedAt_ASC',
  deletedAt_DESC = 'deletedAt_DESC',
  description_ASC = 'description_ASC',
  description_DESC = 'description_DESC',
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  orderDate_ASC = 'orderDate_ASC',
  orderDate_DESC = 'orderDate_DESC',
  slug_ASC = 'slug_ASC',
  slug_DESC = 'slug_DESC',
  title_ASC = 'title_ASC',
  title_DESC = 'title_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC'
}

export interface GQLBlogSort {
  createdAt?: GQLSortOrder;
  createdBy?: GQLUserSort;
  deletedAt?: GQLSortOrder;
  description?: GQLSortOrder;
  featuredImage?: GQLImageSort;
  id?: GQLSortOrder;
  orderDate?: GQLSortOrder;
  slug?: GQLSortOrder;
  title?: GQLSortOrder;
  updatedAt?: GQLSortOrder;
}

/**
 * BlogListResponse output
 */
export interface GQLBlogListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * Aggregated items
   */
  groups: Array<GQLGroupByResponse>;

  /**
   * List items
   */
  items: Array<GQLBlog>;
}

export interface GQLBlog {
  _description?: string;

  /**
   * Authors
   */
  authors?: GQLPersonListResponse;
  createdAt?: GQLDateTime;
  createdBy?: GQLUser;
  deletedAt?: number;
  description?: string;

  /**
   * Featured Image
   */
  featuredImage?: GQLImage;
  id?: string;

  /**
   * The date that determines which order blogs will display in. Change this on update if it needs to go to the top of the list. Or use it to schedule posts for the future.
   */
  orderDate?: GQLDateTime;
  slug?: string;
  title?: string;
  updatedAt?: GQLDateTime;
}

export interface GQLPersonGroupBy {
  first?: number;
  having?: GQLHaving;
  last?: number;
  query: GQLPersonGroupByQuery;
  skip?: number;
  sort?: Array<GQLGroupBySort>;
}

/**
 * No longer supported. Use `sort` instead.
 */
export const enum GQLPersonOrderBy {
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  deletedAt_ASC = 'deletedAt_ASC',
  deletedAt_DESC = 'deletedAt_DESC',
  firstName_ASC = 'firstName_ASC',
  firstName_DESC = 'firstName_DESC',
  githubUrl_ASC = 'githubUrl_ASC',
  githubUrl_DESC = 'githubUrl_DESC',
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  lastName_ASC = 'lastName_ASC',
  lastName_DESC = 'lastName_DESC',
  linkedinUrl_ASC = 'linkedinUrl_ASC',
  linkedinUrl_DESC = 'linkedinUrl_DESC',
  summary_ASC = 'summary_ASC',
  summary_DESC = 'summary_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC',
  websiteUrl_ASC = 'websiteUrl_ASC',
  websiteUrl_DESC = 'websiteUrl_DESC'
}

/**
 * PersonListResponse output
 */
export interface GQLPersonListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * Aggregated items
   */
  groups: Array<GQLGroupByResponse>;

  /**
   * List items
   */
  items: Array<GQLPerson>;
}

export interface GQLPerson {
  _description?: string;
  blogs?: GQLBlogListResponse;
  courses?: GQLCourseListResponse;
  createdAt?: GQLDateTime;
  createdBy?: GQLUser;
  deletedAt?: number;
  firstName?: string;
  githubUrl?: string;
  id?: string;
  image?: GQLImage;
  lastName?: string;
  linkedinUrl?: string;
  summary?: string;
  updatedAt?: GQLDateTime;
  websiteUrl?: string;
}

export interface GQLCourseGroupBy {
  first?: number;
  having?: GQLHaving;
  last?: number;
  query: GQLCourseGroupByQuery;
  skip?: number;
  sort?: Array<GQLGroupBySort>;
}

/**
 * No longer supported. Use `sort` instead.
 */
export const enum GQLCourseOrderBy {
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  deletedAt_ASC = 'deletedAt_ASC',
  deletedAt_DESC = 'deletedAt_DESC',
  duration_ASC = 'duration_ASC',
  duration_DESC = 'duration_DESC',
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  ratingUrl_ASC = 'ratingUrl_ASC',
  ratingUrl_DESC = 'ratingUrl_DESC',
  rating_ASC = 'rating_ASC',
  rating_DESC = 'rating_DESC',
  recommendationOrder_ASC = 'recommendationOrder_ASC',
  recommendationOrder_DESC = 'recommendationOrder_DESC',
  title_ASC = 'title_ASC',
  title_DESC = 'title_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC',
  yearUpdated_ASC = 'yearUpdated_ASC',
  yearUpdated_DESC = 'yearUpdated_DESC'
}

export interface GQLCourseSort {
  createdAt?: GQLSortOrder;
  createdBy?: GQLUserSort;
  deletedAt?: GQLSortOrder;
  duration?: GQLSortOrder;
  id?: GQLSortOrder;
  rating?: GQLSortOrder;
  ratingUrl?: GQLSortOrder;
  recommendationOrder?: GQLSortOrder;
  school?: GQLSchoolSort;
  title?: GQLSortOrder;
  updatedAt?: GQLSortOrder;
  yearUpdated?: GQLSortOrder;
}

/**
 * CourseListResponse output
 */
export interface GQLCourseListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * Aggregated items
   */
  groups: Array<GQLGroupByResponse>;

  /**
   * List items
   */
  items: Array<GQLCourse>;
}

export interface GQLCourse {
  _description?: string;
  courseUrls?: GQLCourseUrlListResponse;
  createdAt?: GQLDateTime;
  createdBy?: GQLUser;
  deletedAt?: number;
  duration?: number;
  id?: string;

  /**
   * Instructors
   */
  instructors?: GQLPersonListResponse;
  rating?: number;
  ratingUrl?: string;
  recommendationOrder?: number;
  school?: GQLSchool;
  title?: string;
  updatedAt?: GQLDateTime;
  yearUpdated?: number;
}

export interface GQLCourseUrlGroupBy {
  first?: number;
  having?: GQLHaving;
  last?: number;
  query: GQLCourseUrlGroupByQuery;
  skip?: number;
  sort?: Array<GQLGroupBySort>;
}

/**
 * No longer supported. Use `sort` instead.
 */
export const enum GQLCourseUrlOrderBy {
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  deletedAt_ASC = 'deletedAt_ASC',
  deletedAt_DESC = 'deletedAt_DESC',
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC',
  url_ASC = 'url_ASC',
  url_DESC = 'url_DESC'
}

export interface GQLCourseUrlSort {
  course?: GQLCourseSort;
  createdAt?: GQLSortOrder;
  createdBy?: GQLUserSort;
  deletedAt?: GQLSortOrder;
  id?: GQLSortOrder;
  school?: GQLSchoolSort;
  updatedAt?: GQLSortOrder;
  url?: GQLSortOrder;
}

/**
 * CourseUrlListResponse output
 */
export interface GQLCourseUrlListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * Aggregated items
   */
  groups: Array<GQLGroupByResponse>;

  /**
   * List items
   */
  items: Array<GQLCourseUrl>;
}

export interface GQLCourseUrl {
  _description?: string;
  course?: GQLCourse;
  createdAt?: GQLDateTime;
  createdBy?: GQLUser;
  deletedAt?: number;
  id?: string;
  school?: GQLSchool;
  updatedAt?: GQLDateTime;
  url?: string;
}

export interface GQLSchool {
  _description?: string;
  courseUrls?: GQLCourseUrlListResponse;
  courses?: GQLCourseListResponse;
  createdAt?: GQLDateTime;
  createdBy?: GQLUser;
  deletedAt?: number;
  description?: string;
  id?: string;
  image?: GQLImage;
  name?: string;
  updatedAt?: GQLDateTime;
  url?: string;
}

export interface GQLImage {
  _description?: string;
  altText?: string;
  blogs?: GQLBlogListResponse;
  createdAt?: GQLDateTime;
  createdBy?: GQLUser;
  deletedAt?: number;
  height?: number;
  id?: string;
  image?: GQLFile;
  person?: GQLPerson;
  schools?: GQLSchool;
  technologyLogos?: GQLTechnologyLogo;
  updatedAt?: GQLDateTime;
  width?: number;
}

export interface GQLTechnologyLogo {
  _description?: string;
  createdAt?: GQLDateTime;
  createdBy?: GQLUser;
  deletedAt?: number;
  id?: string;
  image?: GQLImage;
  updatedAt?: GQLDateTime;
}

export interface GQLBlogUserFilter {
  AND?: Array<GQLBlogUserFilter>;
  OR?: Array<GQLBlogUserFilter>;
  _fullText?: string;
  comments?: GQLCommentRelationFilter;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUserFilter;
  deletedAt?: GQLIntPredicate;
  email?: GQLStringPredicate;
  id?: GQLIDPredicate;
  password?: GQLStringPredicate;
  token?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
  username?: GQLStringPredicate;
}

export interface GQLCommentRelationFilter {
  every?: GQLCommentFilter;
  none?: GQLCommentFilter;
  some?: GQLCommentFilter;
}

export interface GQLCommentFilter {
  AND?: Array<GQLCommentFilter>;
  OR?: Array<GQLCommentFilter>;
  _fullText?: string;
  blogUser?: GQLBlogUserFilter;
  comment?: GQLStringPredicate;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUserFilter;
  deletedAt?: GQLIntPredicate;
  id?: GQLIDPredicate;
  slug?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
}

export interface GQLBlogUserGroupBy {
  first?: number;
  having?: GQLHaving;
  last?: number;
  query: GQLBlogUserGroupByQuery;
  skip?: number;
  sort?: Array<GQLGroupBySort>;
}

export interface GQLBlogUserGroupByQuery {
  _group?: Array<GQLGroupIdentifiersGroupByField>;
  comments?: GQLCommentGroupByQuery;
  createdAt?: Array<GQLGroupByField>;
  createdBy?: GQLUserGroupByQuery;
  email?: Array<GQLGroupByField>;
  id?: Array<GQLGroupByField>;
  password?: Array<GQLGroupByField>;
  token?: Array<GQLGroupByField>;
  updatedAt?: Array<GQLGroupByField>;
  username?: Array<GQLGroupByField>;
}

export interface GQLCommentGroupByQuery {
  _group?: Array<GQLGroupIdentifiersGroupByField>;
  blogUser?: GQLBlogUserGroupByQuery;
  comment?: Array<GQLGroupByField>;
  createdAt?: Array<GQLGroupByField>;
  createdBy?: GQLUserGroupByQuery;
  id?: Array<GQLGroupByField>;
  slug?: Array<GQLGroupByField>;
  updatedAt?: Array<GQLGroupByField>;
}

/**
 * No longer supported. Use `sort` instead.
 */
export const enum GQLBlogUserOrderBy {
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  deletedAt_ASC = 'deletedAt_ASC',
  deletedAt_DESC = 'deletedAt_DESC',
  email_ASC = 'email_ASC',
  email_DESC = 'email_DESC',
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  password_ASC = 'password_ASC',
  password_DESC = 'password_DESC',
  token_ASC = 'token_ASC',
  token_DESC = 'token_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC',
  username_ASC = 'username_ASC',
  username_DESC = 'username_DESC'
}

export interface GQLBlogUserSort {
  createdAt?: GQLSortOrder;
  createdBy?: GQLUserSort;
  deletedAt?: GQLSortOrder;
  email?: GQLSortOrder;
  id?: GQLSortOrder;
  password?: GQLSortOrder;
  token?: GQLSortOrder;
  updatedAt?: GQLSortOrder;
  username?: GQLSortOrder;
}

/**
 * BlogUserListResponse output
 */
export interface GQLBlogUserListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * Aggregated items
   */
  groups: Array<GQLGroupByResponse>;

  /**
   * List items
   */
  items: Array<GQLBlogUser>;
}

export interface GQLBlogUser {
  _description?: string;
  comments?: GQLCommentListResponse;
  createdAt?: GQLDateTime;
  createdBy?: GQLUser;
  deletedAt?: number;
  email?: string;
  id?: string;
  password?: string;
  token?: string;
  updatedAt?: GQLDateTime;
  username?: string;
}

export interface GQLCommentGroupBy {
  first?: number;
  having?: GQLHaving;
  last?: number;
  query: GQLCommentGroupByQuery;
  skip?: number;
  sort?: Array<GQLGroupBySort>;
}

/**
 * No longer supported. Use `sort` instead.
 */
export const enum GQLCommentOrderBy {
  comment_ASC = 'comment_ASC',
  comment_DESC = 'comment_DESC',
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  deletedAt_ASC = 'deletedAt_ASC',
  deletedAt_DESC = 'deletedAt_DESC',
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  slug_ASC = 'slug_ASC',
  slug_DESC = 'slug_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC'
}

export interface GQLCommentSort {
  blogUser?: GQLBlogUserSort;
  comment?: GQLSortOrder;
  createdAt?: GQLSortOrder;
  createdBy?: GQLUserSort;
  deletedAt?: GQLSortOrder;
  id?: GQLSortOrder;
  slug?: GQLSortOrder;
  updatedAt?: GQLSortOrder;
}

/**
 * CommentListResponse output
 */
export interface GQLCommentListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * Aggregated items
   */
  groups: Array<GQLGroupByResponse>;

  /**
   * List items
   */
  items: Array<GQLComment>;
}

export interface GQLComment {
  _description?: string;
  blogUser?: GQLBlogUser;
  comment?: string;
  createdAt?: GQLDateTime;
  createdBy?: GQLUser;
  deletedAt?: number;
  id?: string;
  slug?: string;
  updatedAt?: GQLDateTime;
}

export interface GQLEnvironmentVariableFilter {
  AND?: Array<GQLEnvironmentVariableFilter>;
  OR?: Array<GQLEnvironmentVariableFilter>;
  _fullText?: string;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUserFilter;
  deletedAt?: GQLIntPredicate;
  id?: GQLIDPredicate;
  name?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
  value?: GQLStringPredicate;
}

export interface GQLEnvironmentVariableGroupBy {
  first?: number;
  having?: GQLHaving;
  last?: number;
  query: GQLEnvironmentVariableGroupByQuery;
  skip?: number;
  sort?: Array<GQLGroupBySort>;
}

export interface GQLEnvironmentVariableGroupByQuery {
  _group?: Array<GQLGroupIdentifiersGroupByField>;
  createdAt?: Array<GQLGroupByField>;
  createdBy?: GQLUserGroupByQuery;
  id?: Array<GQLGroupByField>;
  name?: Array<GQLGroupByField>;
  updatedAt?: Array<GQLGroupByField>;
  value?: Array<GQLGroupByField>;
}

/**
 * No longer supported. Use `sort` instead.
 */
export const enum GQLEnvironmentVariableOrderBy {
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  deletedAt_ASC = 'deletedAt_ASC',
  deletedAt_DESC = 'deletedAt_DESC',
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  name_ASC = 'name_ASC',
  name_DESC = 'name_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC',
  value_ASC = 'value_ASC',
  value_DESC = 'value_DESC'
}

export interface GQLEnvironmentVariableSort {
  createdAt?: GQLSortOrder;
  createdBy?: GQLUserSort;
  deletedAt?: GQLSortOrder;
  id?: GQLSortOrder;
  name?: GQLSortOrder;
  updatedAt?: GQLSortOrder;
  value?: GQLSortOrder;
}

/**
 * EnvironmentVariableListResponse output
 */
export interface GQLEnvironmentVariableListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * Aggregated items
   */
  groups: Array<GQLGroupByResponse>;

  /**
   * List items
   */
  items: Array<GQLEnvironmentVariable>;
}

export interface GQLEnvironmentVariable {
  _description?: string;
  createdAt?: GQLDateTime;
  createdBy?: GQLUser;
  deletedAt?: number;
  id?: string;
  name?: string;
  updatedAt?: GQLDateTime;
  value?: string;
}

export interface GQLFileGroupBy {
  first?: number;
  having?: GQLHaving;
  last?: number;
  query: GQLFileGroupByQuery;
  skip?: number;
  sort?: Array<GQLGroupBySort>;
}

/**
 * No longer supported. Use `sort` instead.
 */
export const enum GQLFileOrderBy {
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  deletedAt_ASC = 'deletedAt_ASC',
  deletedAt_DESC = 'deletedAt_DESC',
  downloadUrl_ASC = 'downloadUrl_ASC',
  downloadUrl_DESC = 'downloadUrl_DESC',
  fields_ASC = 'fields_ASC',
  fields_DESC = 'fields_DESC',
  fileId_ASC = 'fileId_ASC',
  fileId_DESC = 'fileId_DESC',
  filename_ASC = 'filename_ASC',
  filename_DESC = 'filename_DESC',
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  meta_ASC = 'meta_ASC',
  meta_DESC = 'meta_DESC',
  mods_ASC = 'mods_ASC',
  mods_DESC = 'mods_DESC',
  provider_ASC = 'provider_ASC',
  provider_DESC = 'provider_DESC',
  public_ASC = 'public_ASC',
  public_DESC = 'public_DESC',
  shareUrl_ASC = 'shareUrl_ASC',
  shareUrl_DESC = 'shareUrl_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC',
  uploadUrl_ASC = 'uploadUrl_ASC',
  uploadUrl_DESC = 'uploadUrl_DESC',
  uploaded_ASC = 'uploaded_ASC',
  uploaded_DESC = 'uploaded_DESC'
}

/**
 * FileListResponse output
 */
export interface GQLFileListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * Aggregated items
   */
  groups: Array<GQLGroupByResponse>;

  /**
   * List items
   */
  items: Array<GQLFile>;
}

export interface GQLSchoolGroupBy {
  first?: number;
  having?: GQLHaving;
  last?: number;
  query: GQLSchoolGroupByQuery;
  skip?: number;
  sort?: Array<GQLGroupBySort>;
}

/**
 * No longer supported. Use `sort` instead.
 */
export const enum GQLSchoolOrderBy {
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  deletedAt_ASC = 'deletedAt_ASC',
  deletedAt_DESC = 'deletedAt_DESC',
  description_ASC = 'description_ASC',
  description_DESC = 'description_DESC',
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  name_ASC = 'name_ASC',
  name_DESC = 'name_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC',
  url_ASC = 'url_ASC',
  url_DESC = 'url_DESC'
}

/**
 * SchoolListResponse output
 */
export interface GQLSchoolListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * Aggregated items
   */
  groups: Array<GQLGroupByResponse>;

  /**
   * List items
   */
  items: Array<GQLSchool>;
}

export interface GQLTechnologyLogoGroupBy {
  first?: number;
  having?: GQLHaving;
  last?: number;
  query: GQLTechnologyLogoGroupByQuery;
  skip?: number;
  sort?: Array<GQLGroupBySort>;
}

/**
 * No longer supported. Use `sort` instead.
 */
export const enum GQLTechnologyLogoOrderBy {
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  deletedAt_ASC = 'deletedAt_ASC',
  deletedAt_DESC = 'deletedAt_DESC',
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC'
}

/**
 * TechnologyLogoListResponse output
 */
export interface GQLTechnologyLogoListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * Aggregated items
   */
  groups: Array<GQLGroupByResponse>;

  /**
   * List items
   */
  items: Array<GQLTechnologyLogo>;
}

export interface GQLSettingGroupBy {
  first?: number;
  having?: GQLHaving;
  last?: number;
  query: GQLSettingGroupByQuery;
  skip?: number;
  sort?: Array<GQLGroupBySort>;
}

/**
 * No longer supported. Use `sort` instead.
 */
export const enum GQLSettingOrderBy {
  bgColor_ASC = 'bgColor_ASC',
  bgColor_DESC = 'bgColor_DESC',
  buttonLinkColor_ASC = 'buttonLinkColor_ASC',
  buttonLinkColor_DESC = 'buttonLinkColor_DESC',
  containerColor_ASC = 'containerColor_ASC',
  containerColor_DESC = 'containerColor_DESC',
  createdAt_ASC = 'createdAt_ASC',
  createdAt_DESC = 'createdAt_DESC',
  currency_ASC = 'currency_ASC',
  currency_DESC = 'currency_DESC',
  dateFormat_ASC = 'dateFormat_ASC',
  dateFormat_DESC = 'dateFormat_DESC',
  deletedAt_ASC = 'deletedAt_ASC',
  deletedAt_DESC = 'deletedAt_DESC',
  id_ASC = 'id_ASC',
  id_DESC = 'id_DESC',
  language_ASC = 'language_ASC',
  language_DESC = 'language_DESC',
  leftNavColor_ASC = 'leftNavColor_ASC',
  leftNavColor_DESC = 'leftNavColor_DESC',
  menuBarBGColor_ASC = 'menuBarBGColor_ASC',
  menuBarBGColor_DESC = 'menuBarBGColor_DESC',
  menuBarIconsColor_ASC = 'menuBarIconsColor_ASC',
  menuBarIconsColor_DESC = 'menuBarIconsColor_DESC',
  passwordMinLength_ASC = 'passwordMinLength_ASC',
  passwordMinLength_DESC = 'passwordMinLength_DESC',
  passwordRequireLowercase_ASC = 'passwordRequireLowercase_ASC',
  passwordRequireLowercase_DESC = 'passwordRequireLowercase_DESC',
  passwordRequireNumbers_ASC = 'passwordRequireNumbers_ASC',
  passwordRequireNumbers_DESC = 'passwordRequireNumbers_DESC',
  passwordRequireSpecial_ASC = 'passwordRequireSpecial_ASC',
  passwordRequireSpecial_DESC = 'passwordRequireSpecial_DESC',
  passwordRequireUppercase_ASC = 'passwordRequireUppercase_ASC',
  passwordRequireUppercase_DESC = 'passwordRequireUppercase_DESC',
  passwordUpdateInterval_ASC = 'passwordUpdateInterval_ASC',
  passwordUpdateInterval_DESC = 'passwordUpdateInterval_DESC',
  rememberDevice_ASC = 'rememberDevice_ASC',
  rememberDevice_DESC = 'rememberDevice_DESC',
  timezone_ASC = 'timezone_ASC',
  timezone_DESC = 'timezone_DESC',
  updatedAt_ASC = 'updatedAt_ASC',
  updatedAt_DESC = 'updatedAt_DESC',
  userInterfaceStyle_ASC = 'userInterfaceStyle_ASC',
  userInterfaceStyle_DESC = 'userInterfaceStyle_DESC',
  vanityUrl_ASC = 'vanityUrl_ASC',
  vanityUrl_DESC = 'vanityUrl_DESC'
}

export interface GQLSettingSort {
  bgColor?: GQLSortOrder;
  buttonLinkColor?: GQLSortOrder;
  containerColor?: GQLSortOrder;
  createdAt?: GQLSortOrder;
  createdBy?: GQLUserSort;
  currency?: GQLSortOrder;
  dateFormat?: GQLSortOrder;
  deletedAt?: GQLSortOrder;
  landingPageImage?: GQLFileSort;
  language?: GQLSortOrder;
  leftNavColor?: GQLSortOrder;
  menuBarBGColor?: GQLSortOrder;
  menuBarIconsColor?: GQLSortOrder;
  menuBarLogo?: GQLFileSort;
  passwordMinLength?: GQLSortOrder;
  passwordRequireLowercase?: GQLSortOrder;
  passwordRequireNumbers?: GQLSortOrder;
  passwordRequireSpecial?: GQLSortOrder;
  passwordRequireUppercase?: GQLSortOrder;
  passwordUpdateInterval?: GQLSortOrder;
  rememberDevice?: GQLSortOrder;
  timezone?: GQLSortOrder;
  updatedAt?: GQLSortOrder;
  userInterfaceStyle?: GQLSortOrder;
  vanityUrl?: GQLSortOrder;
}

/**
 * SettingListResponse output
 */
export interface GQLSettingListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * Aggregated items
   */
  groups: Array<GQLGroupByResponse>;

  /**
   * List items
   */
  items: Array<GQLSetting>;
}

export interface GQLSetting {
  _description?: string;
  bgColor?: string;
  buttonLinkColor?: string;
  containerColor?: string;
  createdAt?: GQLDateTime;
  createdBy?: GQLUser;
  currency?: string;
  dateFormat?: string;
  landingPageImage?: GQLFile;
  language?: string;
  leftNavColor?: string;
  menuBarBGColor?: string;
  menuBarIconsColor?: string;
  menuBarLogo?: GQLFile;
  passwordMinLength?: number;
  passwordRequireLowercase?: boolean;
  passwordRequireNumbers?: boolean;
  passwordRequireSpecial?: boolean;
  passwordRequireUppercase?: boolean;
  passwordUpdateInterval?: number;
  rememberDevice?: string;
  timezone?: string;
  updatedAt?: GQLDateTime;
  userInterfaceStyle?: string;
  vanityUrl?: string;
}

/**
 * User Permission List
 */
export interface GQLUserPermissionList {
  count: number;
  items?: Array<GQLUserPermission>;
}

/**
 * User Permission
 */
export interface GQLUserPermission {
  permission?: GQLJSON;
  resource?: string;
  resourceType?: string;
}

/**
 * Application
 */
export interface GQLApplication {
  appType: string;
  createdAt: GQLDateTime;
  description?: string;
  displayName?: string;
  id: string;
  name: string;
  status: GQLApplicationStatusEnum;
}

/**
 * Application Status Enum
 */
export const enum GQLApplicationStatusEnum {
  ACTIVE = 'ACTIVE',
  INACTIVE = 'INACTIVE'
}

/**
 * ApplicationListResponse output
 */
export interface GQLApplicationListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLApplication>;
}

export interface GQLAsyncSessionStatusResponse {
  message?: string;
  status: string;
}

export interface GQLAuthenticationSetting {
  _description?: string;
  allowedCallbacks?: Array<string | null>;
  allowedLogouts?: Array<string | null>;
  allowedWebOrigins?: Array<string | null>;
  connections?: GQLAuthenticationProfileConnectionOptions;
  createdAt?: GQLDateTime;
  createdBy?: GQLUser;
  updatedAt?: GQLDateTime;
}

/**
 * Authentication profile connection options
 */
export interface GQLAuthenticationProfileConnectionOptions {
  facebook?: GQLFacebookOptions;
  github?: GQLGithubOptions;
  google?: GQLGoogleOptions;
}

/**
 * Facebook connection params
 */
export interface GQLFacebookOptions {
  app_id: string;
  app_secret: string;
  enabled: boolean;
}

/**
 * Github connection params
 */
export interface GQLGithubOptions {
  client_id: string;
  client_secret: string;
  enabled: boolean;
}

/**
 * Google connection params
 */
export interface GQLGoogleOptions {
  client_id: string;
  client_secret: string;
  enabled: boolean;
}

export interface GQLBillingCurrentPlanResponse {
  displayName?: string;
  id?: string;
  name?: string;
  nextPlan?: GQLBillingNextPlanResponse;
  price?: number;
  status?: GQLWorkspaceStatus;
  trialEnd?: GQLDateTime;
}

export interface GQLBillingNextPlanResponse {
  displayName?: string;
  id?: string;
  name?: string;
  price?: number;
}

export const enum GQLWorkspaceStatus {
  active = 'active',
  blocked = 'blocked',
  canceled = 'canceled',
  canceling = 'canceling',
  pending = 'pending',
  suspended = 'suspended'
}

export interface GQLBillingDetailsResponse {
  brand?: string;
  expMonth?: number;
  expYear?: number;
  last4?: string;
}

export const enum GQLBillingInvoicesListFilterType {
  CUSTOMER = 'CUSTOMER',
  WORKSPACE = 'WORKSPACE'
}

/**
 * BillingInvoicesListResponse output
 */
export interface GQLBillingInvoicesListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLBillingInvoiceItem>;
}

export interface GQLBillingInvoiceItem {
  amountDue?: number;
  amountPaid?: number;
  amountRemaining?: number;
  description?: string;
  endingBalance?: number;
  id: string;
  invoicePdf?: string;
  number?: string;
  organization?: GQLBillingInvoiceItemOrganizationInfo;
  paid?: boolean;
  periodEnd?: GQLDateTime;
  periodStart?: GQLDateTime;
  plan?: GQLBillingInvoiceItemPlanInfo;
  status?: string;
  total?: number;
  workspace?: GQLBillingInvoiceItemWorkspaceInfo;
}

export interface GQLBillingInvoiceItemOrganizationInfo {
  id?: string;
  name?: string;
}

export interface GQLBillingInvoiceItemPlanInfo {
  displayName?: string;
  id?: string;
  name?: string;
}

export interface GQLBillingInvoiceItemWorkspaceInfo {
  id?: string;
  name?: string;
}

/**
 * BillingMetricUsageQuotasListResponse output
 */
export interface GQLBillingMetricUsageQuotasListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLBillingMetricUsageQuotaItem>;
}

export interface GQLBillingMetricUsageQuotaItem {
  limitMetric?: GQLBillingLimitMetricItem;
  value?: number;
}

export interface GQLBillingLimitMetricItem {
  displayName?: string;
  name?: string;
  showPriority?: number;
  unit?: string;
}

export interface GQLBillingMetricUsagesListFilter {
  entryDate: GQLDateTimePredicate;
}

/**
 * BillingMetricUsagesListResponse output
 */
export interface GQLBillingMetricUsagesListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLBillingMetricUsageItem>;
}

export interface GQLBillingMetricUsageItem {
  limitMetric?: GQLBillingLimitMetricItem;
  value?: number;
}

/**
 * DeployStatusResult
 */
export interface GQLDeployStatusResult {
  message?: string;
  status: GQLDeployStatusEnum;
}

export const enum GQLDeployStatusEnum {
  compiling = 'compiling',
  complete_error = 'complete_error',
  complete_success = 'complete_success',
  deploying = 'deploying',
  initialize = 'initialize',
  preparing = 'preparing'
}

export interface GQLFileUploadInfoResponse {
  apiKey: string;
  path: string;
  policy: string;
  signature: string;
}

/**
 * FunctionInfoFilter
 */
export interface GQLFunctionInfoFilter {
  description?: string;
  functionType?: GQLFunctionType;
  name?: string;
}

/**
 * FunctionType
 */
export const enum GQLFunctionType {
  resolver = 'resolver',
  schedule = 'schedule',
  task = 'task',
  trigger = 'trigger',
  webhook = 'webhook'
}

/**
 * FunctionInfoOrderBy
 */
export const enum GQLFunctionInfoOrderBy {
  description_ASC = 'description_ASC',
  description_DESC = 'description_DESC',
  functionType_ASC = 'functionType_ASC',
  functionType_DESC = 'functionType_DESC',
  name_ASC = 'name_ASC',
  name_DESC = 'name_DESC'
}

/**
 * FunctionListResponse output
 */
export interface GQLFunctionListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLFunctionInfo>;
}

/**
 * FunctionInfo
 */
export interface GQLFunctionInfo {
  application?: GQLApplication;
  description?: string;
  functionType: GQLFunctionType;
  name: string;
}

/** Use this to resolve interface type FunctionInfo */
export type GQLPossibleFunctionInfoTypeNames =
'FunctionResolverInfo' |
'FunctionTaskInfo' |
'FunctionTriggerInfo' |
'FunctionWebhookInfo';

export interface GQLFunctionInfoNameMap {
  FunctionInfo: GQLFunctionInfo;
  FunctionResolverInfo: GQLFunctionResolverInfo;
  FunctionTaskInfo: GQLFunctionTaskInfo;
  FunctionTriggerInfo: GQLFunctionTriggerInfo;
  FunctionWebhookInfo: GQLFunctionWebhookInfo;
}

export interface GQLWorkspaceTransferItem {
  newOwnerEmail: string;
  newOwnerFirstName?: string;
  newOwnerLastName?: string;
  ownerEmail: string;
  ownerFirstName?: string;
  ownerLastName?: string;
  status: string;
  workspaceId: string;
  workspaceName: string;
}

export interface GQLSystemQuery {
  application?: GQLSystemApplication;
  applicationsList?: GQLSystemApplicationListResponse;
  billingCurrentPlan?: GQLSystemBillingCurrentPlanResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.memberPaymentDetails, system.organizationPaymentDetails or system.workspacePaymentDetails` instead.
   */
  billingDetails?: GQLSystemBillingDetailsResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.memberBillingHistory, system.organizationBillingHistory or system.workspaceBillingHistory` instead.
   */
  billingInvoicesList: GQLSystemBillingInvoicesListResponse;
  billingMetricUsageQuotasList: GQLSystemBillingMetricUsageQuotasListResponse;
  billingMetricUsagesList: GQLSystemBillingMetricUsagesListResponse;
  ciGenerate?: GQLSystemGenerateEnvironmentOutput;

  /**
   *
   * @deprecated No longer supported. Use `ciGenerate` instead.
   */
  ciPlan?: GQLSystemPlanEnvironmentOutput;
  ciStatus?: GQLSystemCiStatusOutput;
  deployStatus: GQLSystemDeployStatusResult;
  environmentBackupsList?: GQLSystemEnvironmentBackupListResponse;
  environmentMember?: GQLSystemEnvironmentMember;
  environmentMembersList?: GQLSystemEnvironmentMembersListResponse;
  environmentSettings?: GQLSystemEnvironmentSettings;
  environmentsList?: GQLSystemEnvironmentsListResponse;
  functionsList?: GQLSystemFunctionListResponse;
  getEnvironmentRoles?: Array<GQLSystemEnvironmentRoleList | null>;
  getFrontendPlanId: GQLSystemFrontendPlanIdItem;
  getWorkspaceTransferInfo?: GQLWorkspaceTransferItem;
  inboxEventsList?: GQLSystemInboxEventsListResponse;
  introspection?: GQLIntrospectionQueryResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.logsList` instead.
   */
  logs?: Array<string | null>;
  logsList?: Array<GQLSystemFunctionLogEntry | null>;
  memberAccount?: GQLSystemMemberAccountInfo;
  memberBillingHistory: GQLSystemBillingInvoicesListResponse;
  memberInvitation?: GQLSystemMemberInvitation;
  memberInvitationsList?: GQLSystemMemberInvitationsList;
  memberPaymentDetails?: GQLSystemPaymentDetailsResponse;
  organizationBillingHistory: GQLSystemBillingInvoicesListResponse;
  organizationById?: GQLSystemOrganizationItem;
  organizationInvitationById?: GQLSystemOrganizationInvitation;
  organizationPaymentDetails?: GQLSystemPaymentDetailsResponse;
  organizationWorkspaceAddSession?: GQLSystemOrganizationWorkspaceAddSession;
  organizationsListAll?: GQLSystemOrganizationsListAllResponse;
  organizationsListByUser?: GQLSystemOrganizationsListResponse;
  table?: GQLSystemTable;
  tableField?: GQLSystemTableField;
  tablesList: GQLSystemTableListResponse;
  userBillingConfiguration: GQLSystemUserBillingConfigurationResponse;
  userInvitationsList?: GQLSystemUserInvitationList;
  workspaceBillingHistory: GQLSystemBillingInvoicesListResponse;
  workspacePaymentDetails?: GQLSystemPaymentDetailsResponse;
  workspacesFrontendList?: GQLSystemWorkspaceListResponse;
  workspacesList?: GQLSystemWorkspaceListResponse;
}

/**
 * Application
 */
export interface GQLSystemApplication {
  appType: string;
  createdAt: GQLDateTime;
  description?: string;
  displayName?: string;
  id: string;
  name: string;
  status: GQLSystemApplicationStatusEnum;
}

/**
 * Application Status Enum
 */
export const enum GQLSystemApplicationStatusEnum {
  ACTIVE = 'ACTIVE',
  INACTIVE = 'INACTIVE'
}

/**
 * SystemApplicationListResponse output
 */
export interface GQLSystemApplicationListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLSystemApplication>;
}

export interface GQLSystemBillingCurrentPlanResponse {
  displayName?: string;
  id?: string;
  name?: string;
  nextPlan?: GQLSystemBillingNextPlanResponse;
  price?: number;
  status?: GQLSystemWorkspaceStatus;
  trialEnd?: GQLDateTime;
}

export interface GQLSystemBillingNextPlanResponse {
  displayName?: string;
  id?: string;
  name?: string;
  price?: number;
}

export const enum GQLSystemWorkspaceStatus {
  active = 'active',
  blocked = 'blocked',
  canceled = 'canceled',
  canceling = 'canceling',
  pending = 'pending',
  suspended = 'suspended'
}

export interface GQLSystemBillingDetailsResponse {
  brand?: string;
  expMonth?: number;
  expYear?: number;
  last4?: string;
}

export const enum GQLSystemBillingInvoicesListFilterType {
  CUSTOMER = 'CUSTOMER',
  WORKSPACE = 'WORKSPACE'
}

/**
 * SystemBillingInvoicesListResponse output
 */
export interface GQLSystemBillingInvoicesListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLSystemBillingInvoiceItem>;
}

export interface GQLSystemBillingInvoiceItem {
  amountDue?: number;
  amountPaid?: number;
  amountRemaining?: number;
  description?: string;
  endingBalance?: number;
  id: string;
  invoicePdf?: string;
  number?: string;
  organization?: GQLSystemBillingInvoiceItemOrganizationInfo;
  paid?: boolean;
  periodEnd?: GQLDateTime;
  periodStart?: GQLDateTime;
  plan?: GQLSystemBillingInvoiceItemPlanInfo;
  status?: string;
  total?: number;
  workspace?: GQLSystemBillingInvoiceItemWorkspaceInfo;
}

export interface GQLSystemBillingInvoiceItemOrganizationInfo {
  id?: string;
  name?: string;
}

export interface GQLSystemBillingInvoiceItemPlanInfo {
  displayName?: string;
  id?: string;
  name?: string;
}

export interface GQLSystemBillingInvoiceItemWorkspaceInfo {
  id?: string;
  name?: string;
}

/**
 * SystemBillingMetricUsageQuotasListResponse output
 */
export interface GQLSystemBillingMetricUsageQuotasListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLSystemBillingMetricUsageQuotaItem>;
}

export interface GQLSystemBillingMetricUsageQuotaItem {
  limitMetric?: GQLSystemBillingLimitMetricItem;
  value?: number;
}

export interface GQLSystemBillingLimitMetricItem {
  displayName?: string;
  name?: string;
  showPriority?: number;
  unit?: string;
}

export interface GQLSystemBillingMetricUsagesListFilter {
  entryDate: GQLDateTimePredicate;
}

/**
 * SystemBillingMetricUsagesListResponse output
 */
export interface GQLSystemBillingMetricUsagesListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLSystemBillingMetricUsageItem>;
}

export interface GQLSystemBillingMetricUsageItem {
  limitMetric?: GQLSystemBillingLimitMetricItem;
  value?: number;
}

/**
 * Diff Environment Input
 */
export interface GQLSystemGenerateEnvironmentOutput {
  url?: string;
}

/**
 * Diff Environment Input
 */
export interface GQLSystemPlanEnvironmentOutput {
  url?: string;
}

/**
 * Ci Status
 */
export interface GQLSystemCiStatusOutput {
  migrations?: Array<string | null>;
  status: string;
}

/**
 * SystemDeployStatusResult
 */
export interface GQLSystemDeployStatusResult {
  message?: string;
  status: GQLSystemDeployStatusEnum;
}

export const enum GQLSystemDeployStatusEnum {
  compiling = 'compiling',
  complete_error = 'complete_error',
  complete_success = 'complete_success',
  deploying = 'deploying',
  initialize = 'initialize',
  preparing = 'preparing'
}

/**
 * SystemEnvironmentBackupListResponse output
 */
export interface GQLSystemEnvironmentBackupListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLEnvironmentBackupItem>;
}

export interface GQLEnvironmentBackupItem {
  name: string;
  size: number;
}

export interface GQLSystemEnvironmentMemberFilter {
  email: string;
}

export interface GQLSystemEnvironmentMember {
  avatar?: GQLSystemEnvironmentMemberAvatar;
  createdAt?: GQLDateTime;
  email: string;
  firstName?: string;
  lastName?: string;
  permissions?: GQLSystemEnvironmentMemberPermissionsList;
  roles?: GQLSystemEnvironmentMemberRolesList;
  status: string;
}

export interface GQLSystemEnvironmentMemberAvatar {
  downloadUrl?: string;
  id?: string;
}

export interface GQLSystemEnvironmentMemberPermissionsList {
  count: number;
  items?: Array<GQLSystemEnvironmentMemberPermission>;
}

export interface GQLSystemEnvironmentMemberPermission {
  permission?: GQLJSON;
  resource?: string;
  resourceType?: string;
}

export interface GQLSystemEnvironmentMemberRolesList {
  count: number;
  items?: Array<GQLSystemEnvironmentMemberRole>;
}

export interface GQLSystemEnvironmentMemberRole {
  id: string;
  name: string;
}

export interface GQLSystemEnvironmentMembersListFilter {
  email?: string;
  firstName?: string;
  lastName?: string;
  roleId?: GQLSystemEnvironmentMemberRoleIdFilterPredicate;
}

export interface GQLSystemEnvironmentMemberRoleIdFilterPredicate {
  equals?: string;
  not_equals?: string;
}

export interface GQLSystemEnvironmentMembersListSort {
  email?: GQLSortOrder;
  firstName?: GQLSortOrder;
  isOwner?: GQLSortOrder;
  lastName?: GQLSortOrder;
  status?: GQLSortOrder;
}

/**
 * SystemEnvironmentMembersListResponse output
 */
export interface GQLSystemEnvironmentMembersListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLSystemEnvironmentMember>;
}

export interface GQLSystemEnvironmentSettings {
  deleteLock?: boolean;
  fileManagementProvider?: string;
}

/**
 * SystemEnvironmentsListResponse output
 */
export interface GQLSystemEnvironmentsListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLEnvironmentItem>;
}

export interface GQLEnvironmentItem {
  id: string;
  name: string;
}

/**
 * FunctionInfoFilter
 */
export interface GQLSystemFunctionInfoFilter {
  description?: string;
  functionType?: GQLSystemFunctionType;
  name?: string;
}

/**
 * FunctionType
 */
export const enum GQLSystemFunctionType {
  resolver = 'resolver',
  schedule = 'schedule',
  task = 'task',
  trigger = 'trigger',
  webhook = 'webhook'
}

/**
 * FunctionInfoOrderBy
 */
export const enum GQLSystemFunctionInfoOrderBy {
  description_ASC = 'description_ASC',
  description_DESC = 'description_DESC',
  functionType_ASC = 'functionType_ASC',
  functionType_DESC = 'functionType_DESC',
  name_ASC = 'name_ASC',
  name_DESC = 'name_DESC'
}

/**
 * SystemFunctionListResponse output
 */
export interface GQLSystemFunctionListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLSystemFunctionInfo>;
}

/**
 * FunctionInfo
 */
export interface GQLSystemFunctionInfo {
  application?: GQLSystemApplication;
  description?: string;
  functionType: GQLSystemFunctionType;
  name: string;
}

/** Use this to resolve interface type SystemFunctionInfo */
export type GQLPossibleSystemFunctionInfoTypeNames =
'SystemFunctionResolverInfo' |
'SystemFunctionTaskInfo' |
'SystemFunctionTriggerInfo' |
'SystemFunctionWebhookInfo';

export interface GQLSystemFunctionInfoNameMap {
  SystemFunctionInfo: GQLSystemFunctionInfo;
  SystemFunctionResolverInfo: GQLSystemFunctionResolverInfo;
  SystemFunctionTaskInfo: GQLSystemFunctionTaskInfo;
  SystemFunctionTriggerInfo: GQLSystemFunctionTriggerInfo;
  SystemFunctionWebhookInfo: GQLSystemFunctionWebhookInfo;
}

export interface GQLSystemEnvironmentRoleList {
  environmentId: string;
  environmentName: string;
  exists?: boolean;
  roles?: Array<GQLSystemEnvironmentRoleBaseInfo | null>;
}

export interface GQLSystemEnvironmentRoleBaseInfo {
  id: string;
  name: string;
}

export interface GQLSystemFrontendPlanIdItem {
  id?: string;
}

/**
 * Inbox Events List Filter
 */
export interface GQLInboxEventsListFilter {
  isCompleted?: GQLIntPredicate;
}

/**
 * SystemInboxEventsListResponse output
 */
export interface GQLSystemInboxEventsListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLSystemInboxEventItem>;
}

export interface GQLSystemInboxEventItem {
  createdAt: GQLDateTime;
  details?: GQLSystemInboxEventDetailsUnion;
  id: string;
  isCompleted?: boolean;
  type?: GQLSystemInboxEventTypeEnum;
}

export type GQLSystemInboxEventDetailsUnion =
GQLSystemInboxEventEnvironmentInvitationDetails |
GQLSystemInboxEventNotificationDetailsType |
GQLSystemInboxEventOrganizationInvitationDetails;

/** Use this to resolve union type SystemInboxEventDetailsUnion */
export type GQLPossibleSystemInboxEventDetailsUnionTypeNames =
'SystemInboxEventEnvironmentInvitationDetails' |
'SystemInboxEventNotificationDetailsType' |
'SystemInboxEventOrganizationInvitationDetails';

export interface GQLSystemInboxEventDetailsUnionNameMap {
  SystemInboxEventDetailsUnion: GQLSystemInboxEventDetailsUnion;
  SystemInboxEventEnvironmentInvitationDetails: GQLSystemInboxEventEnvironmentInvitationDetails;
  SystemInboxEventNotificationDetailsType: GQLSystemInboxEventNotificationDetailsType;
  SystemInboxEventOrganizationInvitationDetails: GQLSystemInboxEventOrganizationInvitationDetails;
}

export interface GQLSystemInboxEventEnvironmentInvitationDetails {
  environmentName?: string;
  invitedBy?: GQLSystemInboxEventInvitedBy;
  status?: GQLSystemInboxEventStatusEnum;
  uuid?: string;
  workspace?: GQLSystemInboxEventWorkspace;
}

export interface GQLSystemInboxEventInvitedBy {
  avatar?: GQLGraphQLFileItemResponse;
  email?: string;
  firstName?: string;
  lastName?: string;
}

/**
 * GraphQLFileItemResponse
 */
export interface GQLGraphQLFileItemResponse {
  downloadUrl?: string;
  id?: string;
}

export const enum GQLSystemInboxEventStatusEnum {
  accepted = 'accepted',
  declined = 'declined',
  sent = 'sent'
}

export interface GQLSystemInboxEventWorkspace {
  apiHost?: string;
  avatar?: GQLGraphQLFileItemResponse;
  id: string;
  name?: string;
}

export interface GQLSystemInboxEventNotificationDetailsType {
  details?: GQLJSON;
  kind?: string;
}

export interface GQLSystemInboxEventOrganizationInvitationDetails {
  invitedBy?: GQLSystemInboxEventInvitedBy;
  organization?: GQLSystemInboxEventOrganization;
  status?: GQLSystemInboxEventStatusEnum;
  uuid?: string;
}

export interface GQLSystemInboxEventOrganization {
  avatar?: GQLGraphQLFileItemResponse;
  id: string;
  name?: string;
}

export const enum GQLSystemInboxEventTypeEnum {
  EnvironmentInvitation = 'EnvironmentInvitation',
  Notification = 'Notification',
  OrganizationInvitation = 'OrganizationInvitation'
}

export interface GQLIntrospectionQueryResponse {
  url: string;
}

/**
 * FunctionLogEntry
 */
export interface GQLSystemFunctionLogEntry {
  message?: string;
  timestamp?: GQLDateTime;
}

export interface GQLSystemMemberAccountInfo {
  aboutMe?: string;
  addressLine1?: string;
  addressLine2?: string;
  avatar?: GQLGraphQLFileItemResponse;
  city?: string;
  companyName?: string;
  country?: string;
  createdAt?: GQLDateTime;
  email: string;
  firstName?: string;
  githubUsername?: string;
  isDeveloper?: boolean;
  lastName?: string;
  learningMode?: boolean;
  linkedInUsername?: string;
  projectDescription?: string;
  role?: string;
  state?: string;
  timezone?: string;
  twitterUsername?: string;
  type?: GQLSystemUserType;
  website?: string;
  zipCode?: string;
}

/**
 * User Type
 */
export const enum GQLSystemUserType {
  Agency = 'Agency',
  MyOwn = 'MyOwn',
  Team = 'Team'
}

/**
 * Member Invitation
 */
export interface GQLSystemMemberInvitation {
  accepted?: boolean;
  acceptedOn?: GQLDateTime;
  apiHost?: string;
  email?: string;
  firstName?: string;
  id?: string;
  invitedBy?: GQLSystemInvitedByName;
  isRegistered?: boolean;
  lastName?: string;
  resentOn?: GQLDateTime;
}

/**
 * Invited By Name
 */
export interface GQLSystemInvitedByName {
  email?: string;
  firstName?: string;
  lastName?: string;
  workspaceName?: string;
}

export interface GQLSystemMemberInvitationsList {
  count?: number;
  items?: Array<GQLSystemMemberInvitation | null>;
}

export interface GQLSystemPaymentDetailsResponse {
  brand?: string;
  expMonth?: number;
  expYear?: number;
  last4?: string;
}

export interface GQLSystemOrganizationItem {
  description?: string;
  id: string;
  image?: GQLSystemOrganizationItemImage;
  name: string;
  predefinedPlans?: Array<GQLSystemBillingPlanBaseScalarInfo | null>;
  type?: GQLSystemOrganizationTypeEnum;
  users?: Array<GQLSystemOrganizationUserInfo | null>;
}

export interface GQLSystemOrganizationItemImage {
  downloadUrl?: string;
  id?: string;
}

export interface GQLSystemBillingPlanBaseScalarInfo {
  description?: string;
  displayName?: string;
  id?: string;
  name?: string;
  price?: number;
}

export const enum GQLSystemOrganizationTypeEnum {
  agency = 'agency',
  community = 'community',
  company = 'company'
}

export interface GQLSystemOrganizationUserInfo {
  avatar?: GQLGraphQLFileItemResponse;
  email: string;
  firstName?: string;
  id: string;
  lastName?: string;
  role: string;
  status: string;
  workspaces?: Array<GQLSystemOrganizationWorkspaceItem | null>;
}

export interface GQLSystemOrganizationWorkspaceItem {
  id: string;
  name: string;
  organization?: GQLSystemOrganizationBaseItem;
}

export interface GQLSystemOrganizationBaseItem {
  description?: string;
  id: string;
  name: string;
  type?: GQLSystemOrganizationTypeEnum;
}

export interface GQLSystemOrganizationInvitation {
  accepted?: boolean;
  email: string;
  emailFrom: string;
  firstName?: string;
  firstNameFrom?: string;
  id: string;
  lastName?: string;
  lastNameFrom?: string;
  organization: GQLSystemOrganizationBaseItem;
  role: string;
}

export interface GQLSystemOrganizationWorkspaceAddSession {
  organization: GQLSystemOrganizationBaseItem;
  status?: string;
  user?: GQLSystemOrganizationUserBaseInfo;
  workspace: GQLSystemOrganizationWorkspaceItem;
}

export interface GQLSystemOrganizationUserBaseInfo {
  email: string;
  firstName?: string;
  id: string;
  lastName?: string;
  role: string;
  status: string;
}

/**
 * SystemOrganizationsListAllResponse output
 */
export interface GQLSystemOrganizationsListAllResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLSystemOrganizationItem>;
}

/**
 * SystemOrganizationsListResponse output
 */
export interface GQLSystemOrganizationsListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLSystemOrganizationItem>;
}

/**
 * Table
 */
export interface GQLSystemTable {
  application?: GQLSystemApplication;
  attributes?: GQLSystemTableAttributes;
  dataFeatures: GQLSystemTableDataFeatures;
  description?: string;
  displayName?: string;
  fields?: Array<GQLSystemTableField>;
  id: string;
  indexes?: Array<GQLSystemTableIndex>;
  isSystem: boolean;
  name: string;
  origin: GQLSystemSchemaOrigin;
  schemaFeatures: GQLSystemTableSchemaFeatures;
}

/**
 * Table Attributes
 */
export type GQLSystemTableAttributes = GQLSystemViewAttributes;

/** Use this to resolve union type SystemTableAttributes */
export type GQLPossibleSystemTableAttributesTypeNames = 'SystemViewAttributes';

export interface GQLSystemTableAttributesNameMap {
  SystemTableAttributes: GQLSystemTableAttributes;
  SystemViewAttributes: GQLSystemViewAttributes;
}

/**
 * View Attributes
 */
export interface GQLSystemViewAttributes {
  query?: string;
}

/**
 * Table Data Features
 */
export interface GQLSystemTableDataFeatures {
  create: boolean;
  delete: boolean;
  update: boolean;
}

/**
 * TableField
 */
export interface GQLSystemTableField {
  computedMode?: GQLSystemComputedFieldMode;
  dataFeatures: GQLSystemFieldDataFeatures;
  defaultValue?: string;
  description?: string;
  displayName?: string;
  expression?: string;
  fieldType: GQLSystemFieldType;
  fieldTypeAttributes?: GQLSystemFieldTypeAttributes;
  id: string;
  isList: boolean;
  isMeta: boolean;
  isRequired: boolean;
  isSystem: boolean;
  isUnique?: boolean;
  name: string;
  origin: GQLSystemSchemaOrigin;
  relation?: GQLSystemRelation;
  schemaFeatures: GQLSystemFieldSchemaFeatures;
  table: GQLSystemTable;
}

/**
 * Computed field mode
 */
export const enum GQLSystemComputedFieldMode {
  STORED = 'STORED',
  VIRTUAL = 'VIRTUAL'
}

/**
 * Field Data Features
 */
export interface GQLSystemFieldDataFeatures {
  create: boolean;
  sort: boolean;
  update: boolean;
}

/**
 * Field types
 */
export const enum GQLSystemFieldType {
  DATE = 'DATE',
  FILE = 'FILE',
  GEO = 'GEO',
  ID = 'ID',
  JSON = 'JSON',
  MISSING_RELATION = 'MISSING_RELATION',
  NUMBER = 'NUMBER',
  ONE_WAY_RELATION = 'ONE_WAY_RELATION',
  RELATION = 'RELATION',
  SMART = 'SMART',
  SWITCH = 'SWITCH',
  TEXT = 'TEXT',
  UUID = 'UUID'
}

/**
 * Field Type Attributes
 */
export type GQLSystemFieldTypeAttributes =
GQLSystemDateFieldTypeAttributes |
GQLSystemFileFieldTypeAttributes |
GQLSystemGeoFieldTypeAttributes |
GQLSystemMissingRelationFieldTypeAttributes |
GQLSystemNumberFieldTypeAttributes |
GQLSystemSmartFieldTypeAttributes |
GQLSystemSwitchFieldTypeAttributes |
GQLSystemTextFieldTypeAttributes |
GQLSystemUUIDFieldTypeAttributes;

/** Use this to resolve union type SystemFieldTypeAttributes */
export type GQLPossibleSystemFieldTypeAttributesTypeNames =
'SystemDateFieldTypeAttributes' |
'SystemFileFieldTypeAttributes' |
'SystemGeoFieldTypeAttributes' |
'SystemMissingRelationFieldTypeAttributes' |
'SystemNumberFieldTypeAttributes' |
'SystemSmartFieldTypeAttributes' |
'SystemSwitchFieldTypeAttributes' |
'SystemTextFieldTypeAttributes' |
'SystemUUIDFieldTypeAttributes';

export interface GQLSystemFieldTypeAttributesNameMap {
  SystemFieldTypeAttributes: GQLSystemFieldTypeAttributes;
  SystemDateFieldTypeAttributes: GQLSystemDateFieldTypeAttributes;
  SystemFileFieldTypeAttributes: GQLSystemFileFieldTypeAttributes;
  SystemGeoFieldTypeAttributes: GQLSystemGeoFieldTypeAttributes;
  SystemMissingRelationFieldTypeAttributes: GQLSystemMissingRelationFieldTypeAttributes;
  SystemNumberFieldTypeAttributes: GQLSystemNumberFieldTypeAttributes;
  SystemSmartFieldTypeAttributes: GQLSystemSmartFieldTypeAttributes;
  SystemSwitchFieldTypeAttributes: GQLSystemSwitchFieldTypeAttributes;
  SystemTextFieldTypeAttributes: GQLSystemTextFieldTypeAttributes;
  SystemUUIDFieldTypeAttributes: GQLSystemUUIDFieldTypeAttributes;
}

/**
 * Date Field Attributes
 */
export interface GQLSystemDateFieldTypeAttributes {
  format: string;
}

/**
 * File Field Attributes
 */
export interface GQLSystemFileFieldTypeAttributes {
  expiration?: number;
  format: string;
  maxSize?: number;

  /**
   *
   * @deprecated Field is deprecated
   */
  showTitle?: boolean;

  /**
   *
   * @deprecated Field is deprecated
   */
  showUrl?: boolean;
  typeRestrictions?: Array<string>;
}

/**
 * Geo Field Attributes
 */
export interface GQLSystemGeoFieldTypeAttributes {
  format: string;
  srid?: number;
}

/**
 * MissingRelation Field Attributes
 */
export interface GQLSystemMissingRelationFieldTypeAttributes {
  missingTable: string;
}

/**
 * Number Field Attributes
 */
export interface GQLSystemNumberFieldTypeAttributes {
  autoIncrement?: boolean;
  currency?: string;
  format: string;
  isBigInt?: boolean;
  maxValue?: number;
  minValue?: number;
  precision?: number;
}

/**
 * Smart Field Attributes
 */
export interface GQLSystemSmartFieldTypeAttributes {
  format: string;
  innerFields?: Array<GQLSystemCustomTableField | null>;
}

/**
 * Custom Table Field Type
 */
export interface GQLSystemCustomTableField {
  computedMode?: GQLSystemComputedFieldMode;
  defaultValue?: string;
  description?: string;
  displayName?: string;
  expression?: string;
  fieldType?: GQLSystemFieldType;
  fieldTypeAttributes?: GQLSystemFieldTypeAttributes;
  isList: boolean;
  isRequired: boolean;
  isUnique?: boolean;
  name?: string;
}

/**
 * Switch Field Attributes
 */
export interface GQLSystemSwitchFieldTypeAttributes {
  format: string;
  listOptions?: Array<string | null>;
}

/**
 * Text Field Attributes
 */
export interface GQLSystemTextFieldTypeAttributes {
  fieldSize?: number;
  format: string;
}

/**
 * UUID Field Attributes
 */
export interface GQLSystemUUIDFieldTypeAttributes {
  fieldSize?: number;
}

/**
 * Schema Origin
 */
export interface GQLSystemSchemaOrigin {
  provider?: string;
  type: GQLSystemSchemaOriginType;
}

/**
 * Schema Origin Type Enum
 */
export const enum GQLSystemSchemaOriginType {
  LOCAL = 'LOCAL',
  REMOTE = 'REMOTE',
  VIEW = 'VIEW'
}

/**
 * Relation
 */
export interface GQLSystemRelation {
  refField?: GQLSystemTableField;
  refFieldDisplayName?: string;
  refFieldIsList?: boolean;
  refFieldIsRequired?: boolean;
  refFieldName?: string;
  refTable: GQLSystemTable;
  relationFieldName?: string;
  relationTableName?: string;
}

/**
 * Field Schema Features
 */
export interface GQLSystemFieldSchemaFeatures {
  delete: boolean;
  update: boolean;
}

/**
 * Table Index
 */
export interface GQLSystemTableIndex {
  columns?: Array<GQLSystemTableIndexColumn>;
  id: string;
  isSystem: boolean;
  name?: string;
  table: GQLSystemTable;
  type: string;
}

/**
 * Table Index Column
 */
export interface GQLSystemTableIndexColumn {
  name: string;
}

/**
 * Table Schema Features
 */
export interface GQLSystemTableSchemaFeatures {
  computedFields: boolean;
  create: GQLSystemTableSchemaCreateFeatures;
  update?: GQLSystemTableSchemaMetaFieldFeatures;
}

/**
 * Table Schema Create Features
 */
export interface GQLSystemTableSchemaCreateFeatures {
  DATE: boolean;
  FILE: boolean;
  GEO: boolean;
  ID: boolean;
  JSON: boolean;
  MISSING_RELATION: boolean;
  NUMBER: boolean;
  ONE_WAY_RELATION: boolean;
  RELATION: boolean;
  SMART: boolean;
  SWITCH: boolean;
  TEXT: boolean;
  UUID: boolean;
}

/**
 * Table Schema Meta Field Features
 */
export interface GQLSystemTableSchemaMetaFieldFeatures {
  displayName: boolean;
  name: boolean;
}

/**
 * Table List Filter
 */
export interface GQLSystemTableListFilter {
  applications?: Array<GQLSystemTableListApplicationFilter | null>;
  onlyUserTables?: boolean;
  tableNames?: Array<string | null>;
}

/**
 * Table List Application Filter
 */
export interface GQLSystemTableListApplicationFilter {
  id?: string;
  name?: string;
}

/**
 * Table List Response
 */
export interface GQLSystemTableListResponse {
  count?: number;
  items?: Array<GQLSystemTable | null>;
}

export interface GQLSystemUserBillingConfigurationResponse {
  availablePlans: Array<GQLSystemBillingPlanBaseInfo>;
  isCancelSubscriptionAvailable: boolean;
  isFreePlanAvailable: boolean;
}

export interface GQLSystemBillingPlanBaseInfo {
  description?: string;
  displayName?: string;
  id?: string;
  isCustom?: boolean;
  isLegacy?: boolean;
  limitMetrics?: Array<GQLSystemBillingPlanLimitMetricItem | null>;
  name?: string;
  price?: number;
}

export interface GQLSystemBillingPlanLimitMetricItem {
  displayName?: string;
  hardLimit?: number;
  name?: string;
  overagePrice?: number;
  softLimit?: number;
}

/**
 * User Invitation List
 */
export interface GQLSystemUserInvitationList {
  count?: number;
  items?: Array<GQLSystemUserInvitationDetails | null>;
}

/**
 * User Invitation Details
 */
export interface GQLSystemUserInvitationDetails {
  accepted?: boolean;
  acceptedOn?: GQLDateTime;
  apiHost?: string;
  email?: string;
  firstName?: string;
  id?: string;
  invitedBy?: GQLSystemInvitedByName;
  isRegistered?: boolean;
  lastName?: string;
  resentOn?: GQLDateTime;
}

/**
 * SystemWorkspaceListResponse output
 */
export interface GQLSystemWorkspaceListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLSystemWorkspaceItem>;
}

export interface GQLSystemWorkspaceItem {
  apiHost?: string;
  createdAt?: GQLDateTime;
  description?: string;
  id: string;
  image?: GQLSystemWorkspaceImage;
  isCiCdEnabled?: boolean;
  isOwner: boolean;
  kind?: string;
  lastAccess?: GQLDateTime;
  name: string;
  nextPlan?: GQLSystemBillingNextPlanResponse;
  organization?: GQLSystemOrganizationBaseItem;
  owner?: GQLSystemMemberAccountInfo;
  plan?: GQLSystemBillingCurrentPlanResponse;
  region?: string;
  teamMemberCount?: number;
  webSocket?: string;
}

export interface GQLSystemWorkspaceImage {
  downloadUrl?: string;
  id?: string;
}

/**
 * Table
 */
export interface GQLTable {
  application?: GQLApplication;
  attributes?: GQLTableAttributes;
  dataFeatures: GQLTableDataFeatures;
  description?: string;
  displayName?: string;
  fields?: Array<GQLTableField>;
  id: string;
  indexes?: Array<GQLTableIndex>;
  isSystem: boolean;
  name: string;
  origin: GQLSchemaOrigin;
  schemaFeatures: GQLTableSchemaFeatures;
}

/**
 * Table Attributes
 */
export type GQLTableAttributes = GQLViewAttributes;

/** Use this to resolve union type TableAttributes */
export type GQLPossibleTableAttributesTypeNames = 'ViewAttributes';

export interface GQLTableAttributesNameMap {
  TableAttributes: GQLTableAttributes;
  ViewAttributes: GQLViewAttributes;
}

/**
 * View Attributes
 */
export interface GQLViewAttributes {
  query?: string;
}

/**
 * Table Data Features
 */
export interface GQLTableDataFeatures {
  create: boolean;
  delete: boolean;
  update: boolean;
}

/**
 * TableField
 */
export interface GQLTableField {
  computedMode?: GQLComputedFieldMode;
  dataFeatures: GQLFieldDataFeatures;
  defaultValue?: string;
  description?: string;
  displayName?: string;
  expression?: string;
  fieldType: GQLFieldType;
  fieldTypeAttributes?: GQLFieldTypeAttributes;
  id: string;
  isList: boolean;
  isMeta: boolean;
  isRequired: boolean;
  isSystem: boolean;
  isUnique?: boolean;
  name: string;
  origin: GQLSchemaOrigin;
  relation?: GQLRelation;
  schemaFeatures: GQLFieldSchemaFeatures;
  table: GQLTable;
}

/**
 * Computed field mode
 */
export const enum GQLComputedFieldMode {
  STORED = 'STORED',
  VIRTUAL = 'VIRTUAL'
}

/**
 * Field Data Features
 */
export interface GQLFieldDataFeatures {
  create: boolean;
  sort: boolean;
  update: boolean;
}

/**
 * Field types
 */
export const enum GQLFieldType {
  DATE = 'DATE',
  FILE = 'FILE',
  GEO = 'GEO',
  ID = 'ID',
  JSON = 'JSON',
  MISSING_RELATION = 'MISSING_RELATION',
  NUMBER = 'NUMBER',
  ONE_WAY_RELATION = 'ONE_WAY_RELATION',
  RELATION = 'RELATION',
  SMART = 'SMART',
  SWITCH = 'SWITCH',
  TEXT = 'TEXT',
  UUID = 'UUID'
}

/**
 * Field Type Attributes
 */
export type GQLFieldTypeAttributes =
GQLDateFieldTypeAttributes |
GQLFileFieldTypeAttributes |
GQLGeoFieldTypeAttributes |
GQLMissingRelationFieldTypeAttributes |
GQLNumberFieldTypeAttributes |
GQLSmartFieldTypeAttributes |
GQLSwitchFieldTypeAttributes |
GQLTextFieldTypeAttributes |
GQLUUIDFieldTypeAttributes;

/** Use this to resolve union type FieldTypeAttributes */
export type GQLPossibleFieldTypeAttributesTypeNames =
'DateFieldTypeAttributes' |
'FileFieldTypeAttributes' |
'GeoFieldTypeAttributes' |
'MissingRelationFieldTypeAttributes' |
'NumberFieldTypeAttributes' |
'SmartFieldTypeAttributes' |
'SwitchFieldTypeAttributes' |
'TextFieldTypeAttributes' |
'UUIDFieldTypeAttributes';

export interface GQLFieldTypeAttributesNameMap {
  FieldTypeAttributes: GQLFieldTypeAttributes;
  DateFieldTypeAttributes: GQLDateFieldTypeAttributes;
  FileFieldTypeAttributes: GQLFileFieldTypeAttributes;
  GeoFieldTypeAttributes: GQLGeoFieldTypeAttributes;
  MissingRelationFieldTypeAttributes: GQLMissingRelationFieldTypeAttributes;
  NumberFieldTypeAttributes: GQLNumberFieldTypeAttributes;
  SmartFieldTypeAttributes: GQLSmartFieldTypeAttributes;
  SwitchFieldTypeAttributes: GQLSwitchFieldTypeAttributes;
  TextFieldTypeAttributes: GQLTextFieldTypeAttributes;
  UUIDFieldTypeAttributes: GQLUUIDFieldTypeAttributes;
}

/**
 * Date Field Attributes
 */
export interface GQLDateFieldTypeAttributes {
  format: string;
}

/**
 * File Field Attributes
 */
export interface GQLFileFieldTypeAttributes {
  expiration?: number;
  format: string;
  maxSize?: number;

  /**
   *
   * @deprecated Field is deprecated
   */
  showTitle?: boolean;

  /**
   *
   * @deprecated Field is deprecated
   */
  showUrl?: boolean;
  typeRestrictions?: Array<string>;
}

/**
 * Geo Field Attributes
 */
export interface GQLGeoFieldTypeAttributes {
  format: string;
  srid?: number;
}

/**
 * MissingRelation Field Attributes
 */
export interface GQLMissingRelationFieldTypeAttributes {
  missingTable: string;
}

/**
 * Number Field Attributes
 */
export interface GQLNumberFieldTypeAttributes {
  autoIncrement?: boolean;
  currency?: string;
  format: string;
  isBigInt?: boolean;
  maxValue?: number;
  minValue?: number;
  precision?: number;
}

/**
 * Smart Field Attributes
 */
export interface GQLSmartFieldTypeAttributes {
  format: string;
  innerFields?: Array<GQLCustomTableField | null>;
}

/**
 * Custom Table Field Type
 */
export interface GQLCustomTableField {
  computedMode?: GQLComputedFieldMode;
  defaultValue?: string;
  description?: string;
  displayName?: string;
  expression?: string;
  fieldType?: GQLFieldType;
  fieldTypeAttributes?: GQLFieldTypeAttributes;
  isList: boolean;
  isRequired: boolean;
  isUnique?: boolean;
  name?: string;
}

/**
 * Switch Field Attributes
 */
export interface GQLSwitchFieldTypeAttributes {
  format: string;
  listOptions?: Array<string | null>;
}

/**
 * Text Field Attributes
 */
export interface GQLTextFieldTypeAttributes {
  fieldSize?: number;
  format: string;
}

/**
 * UUID Field Attributes
 */
export interface GQLUUIDFieldTypeAttributes {
  fieldSize?: number;
}

/**
 * Schema Origin
 */
export interface GQLSchemaOrigin {
  provider?: string;
  type: GQLSchemaOriginType;
}

/**
 * Schema Origin Type Enum
 */
export const enum GQLSchemaOriginType {
  LOCAL = 'LOCAL',
  REMOTE = 'REMOTE',
  VIEW = 'VIEW'
}

/**
 * Relation
 */
export interface GQLRelation {
  refField?: GQLTableField;
  refFieldDisplayName?: string;
  refFieldIsList?: boolean;
  refFieldIsRequired?: boolean;
  refFieldName?: string;
  refTable: GQLTable;
  relationFieldName?: string;
  relationTableName?: string;
}

/**
 * Field Schema Features
 */
export interface GQLFieldSchemaFeatures {
  delete: boolean;
  update: boolean;
}

/**
 * Table Index
 */
export interface GQLTableIndex {
  columns?: Array<GQLTableIndexColumn>;
  id: string;
  isSystem: boolean;
  name?: string;
  table: GQLTable;
  type: string;
}

/**
 * Table Index Column
 */
export interface GQLTableIndexColumn {
  name: string;
}

/**
 * Table Schema Features
 */
export interface GQLTableSchemaFeatures {
  computedFields: boolean;
  create: GQLTableSchemaCreateFeatures;
  update?: GQLTableSchemaMetaFieldFeatures;
}

/**
 * Table Schema Create Features
 */
export interface GQLTableSchemaCreateFeatures {
  DATE: boolean;
  FILE: boolean;
  GEO: boolean;
  ID: boolean;
  JSON: boolean;
  MISSING_RELATION: boolean;
  NUMBER: boolean;
  ONE_WAY_RELATION: boolean;
  RELATION: boolean;
  SMART: boolean;
  SWITCH: boolean;
  TEXT: boolean;
  UUID: boolean;
}

/**
 * Table Schema Meta Field Features
 */
export interface GQLTableSchemaMetaFieldFeatures {
  displayName: boolean;
  name: boolean;
}

/**
 * Table List Filter
 */
export interface GQLTableListFilter {
  applications?: Array<GQLTableListApplicationFilter | null>;
  onlyUserTables?: boolean;
  tableNames?: Array<string | null>;
}

/**
 * Table List Application Filter
 */
export interface GQLTableListApplicationFilter {
  id?: string;
  name?: string;
}

/**
 * Table List Response
 */
export interface GQLTableListResponse {
  count?: number;
  items?: Array<GQLTable | null>;
}

export interface GQLUserBillingConfigurationResponse {
  availablePlans: Array<GQLBillingPlanBaseInfo>;
  isCancelSubscriptionAvailable: boolean;
  isFreePlanAvailable: boolean;
}

export interface GQLBillingPlanBaseInfo {
  description?: string;
  displayName?: string;
  id?: string;
  isCustom?: boolean;
  isLegacy?: boolean;
  limitMetrics?: Array<GQLBillingPlanLimitMetricItem | null>;
  name?: string;
  price?: number;
}

export interface GQLBillingPlanLimitMetricItem {
  displayName?: string;
  hardLimit?: number;
  name?: string;
  overagePrice?: number;
  softLimit?: number;
}

/**
 * User Invitation List
 */
export interface GQLUserInvitationList {
  count?: number;
  items?: Array<GQLUserInvitationDetails | null>;
}

/**
 * User Invitation Details
 */
export interface GQLUserInvitationDetails {
  accepted?: boolean;
  acceptedOn?: GQLDateTime;
  apiHost?: string;
  email?: string;
  firstName?: string;
  id?: string;
  invitedBy?: GQLInvitedByName;
  isRegistered?: boolean;
  lastName?: string;
  resentOn?: GQLDateTime;
}

/**
 * Invited By Name
 */
export interface GQLInvitedByName {
  email?: string;
  firstName?: string;
  lastName?: string;
  workspaceName?: string;
}

/**
 * WorkspaceListResponse output
 */
export interface GQLWorkspaceListResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLWorkspaceItem>;
}

export interface GQLWorkspaceItem {
  apiHost?: string;
  createdAt?: GQLDateTime;
  description?: string;
  id: string;
  image?: GQLWorkspaceImage;
  isCiCdEnabled?: boolean;
  isOwner: boolean;
  kind?: string;
  lastAccess?: GQLDateTime;
  name: string;
  nextPlan?: GQLBillingNextPlanResponse;
  organization?: GQLSystemOrganizationBaseItem;
  owner?: GQLSystemMemberAccountInfo;
  plan?: GQLBillingCurrentPlanResponse;
  region?: string;
  teamMemberCount?: number;
  webSocket?: string;
}

export interface GQLWorkspaceImage {
  downloadUrl?: string;
  id?: string;
}

export interface GQLMutation {
  apiTokenCreate: GQLApiTokenResponse;
  apiTokenDelete?: GQLSuccessResponse;
  apiTokenDeleteByFilter?: GQLSuccessResponse;
  apiTokenDestroy?: GQLSuccessResponse;
  apiTokenDestroyByFilter?: GQLSuccessResponse;
  apiTokenRestore: GQLApiToken;
  apiTokenUpdate: GQLApiToken;
  apiTokenUpdateByFilter: GQLApiTokenManyResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.applicationDelete` instead.
   */
  applicationDelete?: GQLSuccessResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.applicationInstall` instead.
   */
  applicationInstall?: GQLApplication;

  /**
   *
   * @deprecated No longer supported. Use `system.applicationUpdate` instead.
   */
  applicationUpdate?: GQLApplication;
  authenticationProfileCreate: GQLAuthenticationProfile;
  authenticationProfileCreateMany: GQLAuthenticationProfileManyResponse;
  authenticationProfileDelete?: GQLSuccessResponse;
  authenticationProfileDeleteByFilter?: GQLSuccessResponse;
  authenticationProfileDestroy?: GQLSuccessResponse;
  authenticationProfileDestroyByFilter?: GQLSuccessResponse;
  authenticationProfileRestore: GQLAuthenticationProfile;
  authenticationProfileUpdate: GQLAuthenticationProfile;
  authenticationProfileUpdateByFilter: GQLAuthenticationProfileManyResponse;
  authenticationSettingsUpdate: GQLAuthenticationSetting;

  /**
   *
   * @deprecated No longer supported. Use `system.memberPaymentDetailsUpdate, system.organizationPaymentDetailsUpdate or system.workspacePaymentDetailsUpdate` instead.
   */
  billingDetailsUpdate?: GQLBillingDetailsResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.billingPlanUpdate` instead.
   */
  billingPlanUpdate?: GQLBillingCurrentPlanResponse;
  blogCreate: GQLBlog;
  blogCreateMany: GQLBlogManyResponse;
  blogDelete?: GQLSuccessResponse;
  blogDeleteByFilter?: GQLSuccessResponse;
  blogDestroy?: GQLSuccessResponse;
  blogDestroyByFilter?: GQLSuccessResponse;
  blogRestore: GQLBlog;
  blogUpdate: GQLBlog;
  blogUpdateByFilter: GQLBlogManyResponse;
  blogUserCreate: GQLBlogUser;
  blogUserCreateMany: GQLBlogUserManyResponse;
  blogUserDelete?: GQLSuccessResponse;
  blogUserDeleteByFilter?: GQLSuccessResponse;
  blogUserDestroy?: GQLSuccessResponse;
  blogUserDestroyByFilter?: GQLSuccessResponse;
  blogUserRestore: GQLBlogUser;
  blogUserUpdate: GQLBlogUser;
  blogUserUpdateByFilter: GQLBlogUserManyResponse;
  commentCreate: GQLComment;
  commentCreateMany: GQLCommentManyResponse;
  commentDelete?: GQLSuccessResponse;
  commentDeleteByFilter?: GQLSuccessResponse;
  commentDestroy?: GQLSuccessResponse;
  commentDestroyByFilter?: GQLSuccessResponse;
  commentRestore: GQLComment;
  commentUpdate: GQLComment;
  commentUpdateByFilter: GQLCommentManyResponse;
  courseCreate: GQLCourse;
  courseCreateMany: GQLCourseManyResponse;
  courseDelete?: GQLSuccessResponse;
  courseDeleteByFilter?: GQLSuccessResponse;
  courseDestroy?: GQLSuccessResponse;
  courseDestroyByFilter?: GQLSuccessResponse;
  courseRestore: GQLCourse;
  courseUpdate: GQLCourse;
  courseUpdateByFilter: GQLCourseManyResponse;
  courseUrlCreate: GQLCourseUrl;
  courseUrlCreateMany: GQLCourseUrlManyResponse;
  courseUrlDelete?: GQLSuccessResponse;
  courseUrlDeleteByFilter?: GQLSuccessResponse;
  courseUrlDestroy?: GQLSuccessResponse;
  courseUrlDestroyByFilter?: GQLSuccessResponse;
  courseUrlRestore: GQLCourseUrl;
  courseUrlUpdate: GQLCourseUrl;
  courseUrlUpdateByFilter: GQLCourseUrlManyResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.deploy` instead.
   */
  deploy?: boolean;
  environmentVariableCreate: GQLEnvironmentVariable;
  environmentVariableCreateMany: GQLEnvironmentVariableManyResponse;
  environmentVariableDelete?: GQLSuccessResponse;
  environmentVariableDeleteByFilter?: GQLSuccessResponse;
  environmentVariableDestroy?: GQLSuccessResponse;
  environmentVariableDestroyByFilter?: GQLSuccessResponse;
  environmentVariableRestore: GQLEnvironmentVariable;
  environmentVariableUpdate: GQLEnvironmentVariable;
  environmentVariableUpdateByFilter: GQLEnvironmentVariableManyResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.fieldCreate` instead.
   */
  fieldCreate: GQLTableField;

  /**
   *
   * @deprecated No longer supported. Use `system.fieldDelete` instead.
   */
  fieldDelete: GQLSuccessResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.fieldUpdate` instead.
   */
  fieldUpdate: GQLTableField;

  /**
   *
   * @deprecated No longer supported. Use `system.fieldUpdatePosition` instead.
   */
  fieldUpdatePosition: GQLSuccessResponse;
  fileCreate: GQLFile;
  fileCreateMany: GQLFileManyResponse;
  fileDelete?: GQLSuccessResponse;
  fileDeleteByFilter?: GQLSuccessResponse;
  fileDestroy?: GQLSuccessResponse;
  fileDestroyByFilter?: GQLSuccessResponse;
  fileRestore: GQLFile;
  fileUpdate: GQLFile;
  fileUpdateByFilter: GQLFileManyResponse;
  imageCreate: GQLImage;
  imageCreateMany: GQLImageManyResponse;
  imageDelete?: GQLSuccessResponse;
  imageDeleteByFilter?: GQLSuccessResponse;
  imageDestroy?: GQLSuccessResponse;
  imageDestroyByFilter?: GQLSuccessResponse;
  imageRestore: GQLImage;
  imageUpdate: GQLImage;
  imageUpdateByFilter: GQLImageManyResponse;
  indexCreate: GQLTableIndex;
  indexDelete?: GQLSuccessResponse;
  indexUpdate: GQLTableIndex;

  /**
   *
   * @deprecated No longer supported. Use `system.invoke` instead.
   */
  invoke?: GQLInvokeFunctionResponse;
  personCreate: GQLPerson;
  personCreateMany: GQLPersonManyResponse;
  personDelete?: GQLSuccessResponse;
  personDeleteByFilter?: GQLSuccessResponse;
  personDestroy?: GQLSuccessResponse;
  personDestroyByFilter?: GQLSuccessResponse;
  personRestore: GQLPerson;
  personUpdate: GQLPerson;
  personUpdateByFilter: GQLPersonManyResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.prepareDeploy` instead.
   */
  prepareDeploy: GQLDeployDataResponse;
  roleCreate: GQLRole;
  roleCreateMany: GQLRoleManyResponse;
  roleDelete?: GQLSuccessResponse;
  roleDeleteByFilter?: GQLSuccessResponse;
  roleDestroy?: GQLSuccessResponse;
  roleDestroyByFilter?: GQLSuccessResponse;
  roleRestore: GQLRole;
  roleUpdate: GQLRole;
  roleUpdateByFilter: GQLRoleManyResponse;
  schoolCreate: GQLSchool;
  schoolCreateMany: GQLSchoolManyResponse;
  schoolDelete?: GQLSuccessResponse;
  schoolDeleteByFilter?: GQLSuccessResponse;
  schoolDestroy?: GQLSuccessResponse;
  schoolDestroyByFilter?: GQLSuccessResponse;
  schoolRestore: GQLSchool;
  schoolUpdate: GQLSchool;
  schoolUpdateByFilter: GQLSchoolManyResponse;
  sendInvitationTo8base?: GQLSuccessResponse;
  settingsUpdate: GQLSetting;
  system?: GQLSystemMutation;

  /**
   *
   * @deprecated No longer supported. Use `system.tableCreate` instead.
   */
  tableCreate: GQLTable;

  /**
   *
   * @deprecated No longer supported. Use `system.tableDelete` instead.
   */
  tableDelete: GQLSuccessResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.tableUpdate` instead.
   */
  tableUpdate: GQLTable;
  technologyLogoCreate: GQLTechnologyLogo;
  technologyLogoCreateMany: GQLTechnologyLogoManyResponse;
  technologyLogoDelete?: GQLSuccessResponse;
  technologyLogoDeleteByFilter?: GQLSuccessResponse;
  technologyLogoDestroy?: GQLSuccessResponse;
  technologyLogoDestroyByFilter?: GQLSuccessResponse;
  technologyLogoRestore: GQLTechnologyLogo;
  technologyLogoUpdate: GQLTechnologyLogo;
  userChangePassword?: GQLSuccessResponse;
  userCreate: GQLUser;
  userCreateMany: GQLUserManyResponse;
  userDelete?: GQLSuccessResponse;
  userDeleteByFilter?: GQLSuccessResponse;
  userDestroy?: GQLSuccessResponse;
  userDestroyByFilter?: GQLSuccessResponse;
  userLogin?: GQLLoginResponse;
  userPasswordForgot?: GQLSuccessResponse;
  userPasswordForgotConfirm?: GQLSuccessResponse;
  userRefreshToken?: GQLAuth;
  userRestore: GQLUser;

  /**
   *
   * @deprecated No longer supported. Use `userSignUpWithToken` instead.
   */
  userSignUp: GQLUser;

  /**
   *
   * @deprecated No longer supported. Use `userVerificationEmailResend` instead.
   */
  userSignUpResend?: GQLSuccessResponse;
  userSignUpWithPassword: GQLUser;
  userSignUpWithToken: GQLUser;
  userUpdate: GQLUser;
  userUpdateByFilter: GQLUserManyResponse;
  userVerificationEmailResend?: GQLSuccessResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.viewCreate` instead.
   */
  viewCreate: GQLTable;
  viewUpdate: GQLTable;

  /**
   *
   * @deprecated No longer supported. Use `system.workspaceCreate` instead.
   */
  workspaceCreate?: GQLWorkspaceCreateResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.workspaceCreateAsync` instead.
   */
  workspaceCreateAsync?: GQLWorkspaceCreateResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.workspaceDelete` instead.
   */
  workspaceDelete?: GQLSuccessResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.workspaceLeave` instead.
   */
  workspaceLeave?: GQLSuccessResponse;

  /**
   *
   * @deprecated No longer supported. Use `system.workspaceUpdate` instead.
   */
  workspaceUpdate?: GQLWorkspaceUpdateResponse;
}

/**
 * ApiTokens create input
 */
export interface GQLApiTokenCreateInput {
  name: string;
  roles?: GQLApiTokensRolesRelationInput;
}

/**
 * ApiTokens relation input
 */
export interface GQLApiTokensRolesRelationInput {
  connect?: Array<GQLRoleKeyFilter>;
  create?: Array<GQLApiTokens_RoleCreateInput | null>;
}

export interface GQLRoleKeyFilter {
  id?: string;
  name?: string;
}

/**
 * Roles create input from apiTokens
 */
export interface GQLApiTokens_RoleCreateInput {
  apiTokens?: GQLRolesApiTokensRelationInput;
  authenticationProfiles?: GQLRolesAuthenticationProfilesRelationInput;
  description?: string;
  name: string;
  permissions?: GQLPermissionsInput;
  users?: GQLRolesUsersRelationInput;
}

/**
 * Roles relation input
 */
export interface GQLRolesApiTokensRelationInput {
  connect?: Array<GQLApiTokenKeyFilter>;
}

export interface GQLApiTokenKeyFilter {
  id?: string;
  name?: string;
}

/**
 * Roles relation input
 */
export interface GQLRolesAuthenticationProfilesRelationInput {
  connect?: Array<GQLAuthenticationProfileKeyFilter>;
  create?: Array<GQLRoles_AuthenticationProfileCreateInput | null>;
}

export interface GQLAuthenticationProfileKeyFilter {
  id?: string;
  name?: string;
}

/**
 * AuthenticationProfiles create input from roles
 */
export interface GQLRoles_AuthenticationProfileCreateInput {
  audiences?: Array<string | null>;
  clientId?: string;
  databaseName?: string;
  domain?: string;
  managementDomain?: string;
  name: string;
  roles?: GQLAuthenticationProfilesRolesRelationInput;
  secret?: string;
  selfSignUpEmailDomains?: Array<string | null>;
  selfSignUpEnabled?: boolean;
  type?: string;
}

/**
 * AuthenticationProfiles relation input
 */
export interface GQLAuthenticationProfilesRolesRelationInput {
  connect?: Array<GQLRoleKeyFilter>;
  create?: Array<GQLAuthenticationProfiles_RoleCreateInput | null>;
}

/**
 * Roles create input from authenticationProfiles
 */
export interface GQLAuthenticationProfiles_RoleCreateInput {
  apiTokens?: GQLRolesApiTokensRelationInput;
  authenticationProfiles?: GQLRolesAuthenticationProfilesRelationInput;
  description?: string;
  name: string;
  permissions?: GQLPermissionsInput;
  users?: GQLRolesUsersRelationInput;
}

/**
 * PermissionsInput create input
 */
export interface GQLPermissionsInput {
  custom?: GQLPermissionsCustom;
  data?: GQLPermissionsData;
}

/**
 * custom permissions input
 */
export interface GQLPermissionsCustom {
  data?: GQLPermissionsCustomData;
  logic?: GQLPermissionsCustomLogic;
  settings?: GQLPermissionsCustomSettings;
  users?: GQLPermissionsCustomUsers;
}

export interface GQLPermissionsCustomData {
  schemaManagement?: GQLPermissionsCustomDataSchemaManagement;
  viewerAccess?: GQLPermissionsCustomDataViewerAccess;
}

export interface GQLPermissionsCustomDataSchemaManagement {
  allow: boolean;
}

export interface GQLPermissionsCustomDataViewerAccess {
  allow: boolean;
}

export interface GQLPermissionsCustomLogic {
  deploy?: GQLPermissionsCustomLogicDeploy;
  invoke?: GQLPermissionsCustomLogicInvoke;
  logs?: GQLPermissionsCustomLogicLogs;
  view?: GQLPermissionsCustomLogicView;
}

export interface GQLPermissionsCustomLogicDeploy {
  allow: boolean;
}

export interface GQLPermissionsCustomLogicInvoke {
  allow: boolean;
}

export interface GQLPermissionsCustomLogicLogs {
  allow: boolean;
}

export interface GQLPermissionsCustomLogicView {
  allow: boolean;
}

export interface GQLPermissionsCustomSettings {
  workspaceAdministration?: GQLPermissionsCustomSettingsWorkspaceAdministration;
}

export interface GQLPermissionsCustomSettingsWorkspaceAdministration {
  allow: boolean;
}

export interface GQLPermissionsCustomUsers {
  teamAdministration?: GQLPermissionsCustomUsersTeamAdministration;
}

export interface GQLPermissionsCustomUsersTeamAdministration {
  allow: boolean;
}

/**
 * Schema tables permissions input
 */
export interface GQLPermissionsData {
  Blog?: GQLPermissionsDataBlog;
  BlogUser?: GQLPermissionsDataBlogUser;
  Comment?: GQLPermissionsDataComment;
  Course?: GQLPermissionsDataCourse;
  CourseUrl?: GQLPermissionsDataCourseUrl;
  Files?: GQLPermissionsDataFiles;
  Image?: GQLPermissionsDataImage;
  Person?: GQLPermissionsDataPerson;
  Roles?: GQLPermissionsDataRoles;
  School?: GQLPermissionsDataSchool;
  TechnologyLogo?: GQLPermissionsDataTechnologyLogo;
  Users?: GQLPermissionsDataUsers;
}

export interface GQLPermissionsDataBlog {
  create?: GQLPermissionsDataBlogCreate;
  delete?: GQLPermissionsDataBlogDelete;
  destroy?: GQLPermissionsDataBlogDestroy;
  read?: GQLPermissionsDataBlogRead;
  update?: GQLPermissionsDataBlogUpdate;
}

export interface GQLPermissionsDataBlogCreate {
  allow: boolean;
}

export interface GQLPermissionsDataBlogDelete {
  allow: boolean;
  restore?: boolean;
  review?: boolean;
}

export interface GQLPermissionsDataBlogDestroy {
  allow: boolean;
}

export interface GQLPermissionsDataBlogRead {
  allow: boolean;
  fields?: GQLBlogFieldsPermissions;
  filter?: GQLBlog_PermissionFilter;
}

/**
 * BlogFieldsPermissions create input
 */
export interface GQLBlogFieldsPermissions {
  createdAt?: boolean;
  description?: boolean;
  orderDate?: boolean;
  slug?: boolean;
  title?: boolean;
  updatedAt?: boolean;
}

export interface GQLBlog_PermissionFilter {
  AND?: Array<GQLBlog_PermissionFilter>;
  OR?: Array<GQLBlog_PermissionFilter>;
  _fullText?: string;
  authors?: GQLPerson_PermissionRelationFilter;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUser_PermissionFilter;
  deletedAt?: GQLIntPredicate;
  description?: GQLStringPredicate;
  featuredImage?: GQLImage_PermissionFilter;
  id?: GQLIDPredicate;
  orderDate?: GQLDateTimePredicate;
  slug?: GQLStringPredicate;
  title?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
}

export interface GQLPerson_PermissionRelationFilter {
  every?: GQLPerson_PermissionFilter;
  none?: GQLPerson_PermissionFilter;
  some?: GQLPerson_PermissionFilter;
}

export interface GQLPerson_PermissionFilter {
  AND?: Array<GQLPerson_PermissionFilter>;
  OR?: Array<GQLPerson_PermissionFilter>;
  _fullText?: string;
  blogs?: GQLBlog_PermissionRelationFilter;
  courses?: GQLCourse_PermissionRelationFilter;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUser_PermissionFilter;
  deletedAt?: GQLIntPredicate;
  firstName?: GQLStringPredicate;
  githubUrl?: GQLStringPredicate;
  id?: GQLIDPredicate;
  image?: GQLImage_PermissionFilter;
  lastName?: GQLStringPredicate;
  linkedinUrl?: GQLStringPredicate;
  summary?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
  websiteUrl?: GQLStringPredicate;
}

export interface GQLBlog_PermissionRelationFilter {
  every?: GQLBlog_PermissionFilter;
  none?: GQLBlog_PermissionFilter;
  some?: GQLBlog_PermissionFilter;
}

export interface GQLCourse_PermissionRelationFilter {
  every?: GQLCourse_PermissionFilter;
  none?: GQLCourse_PermissionFilter;
  some?: GQLCourse_PermissionFilter;
}

export interface GQLCourse_PermissionFilter {
  AND?: Array<GQLCourse_PermissionFilter>;
  OR?: Array<GQLCourse_PermissionFilter>;
  _fullText?: string;
  courseUrls?: GQLCourseUrl_PermissionRelationFilter;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUser_PermissionFilter;
  deletedAt?: GQLIntPredicate;
  duration?: GQLFloatPredicate;
  id?: GQLIDPredicate;
  instructors?: GQLPerson_PermissionRelationFilter;
  rating?: GQLIntPredicate;
  ratingUrl?: GQLStringPredicate;
  recommendationOrder?: GQLIntPredicate;
  school?: GQLSchool_PermissionFilter;
  title?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
  yearUpdated?: GQLIntPredicate;
}

export interface GQLCourseUrl_PermissionRelationFilter {
  every?: GQLCourseUrl_PermissionFilter;
  none?: GQLCourseUrl_PermissionFilter;
  some?: GQLCourseUrl_PermissionFilter;
}

export interface GQLCourseUrl_PermissionFilter {
  AND?: Array<GQLCourseUrl_PermissionFilter>;
  OR?: Array<GQLCourseUrl_PermissionFilter>;
  _fullText?: string;
  course?: GQLCourse_PermissionFilter;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUser_PermissionFilter;
  deletedAt?: GQLIntPredicate;
  id?: GQLIDPredicate;
  school?: GQLSchool_PermissionFilter;
  updatedAt?: GQLDateTimePredicate;
  url?: GQLStringPredicate;
}

export interface GQLUser_PermissionFilter {
  AND?: Array<GQLUser_PermissionFilter>;
  OR?: Array<GQLUser_PermissionFilter>;
  _fullText?: string;
  avatar?: GQLFile_PermissionFilter;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUser_PermissionFilter;
  deletedAt?: GQLIntPredicate;
  email?: GQLStringPredicate;
  firstName?: GQLStringPredicate;
  id?: GQLIDPredicate;
  is8base?: GQLBoolPredicate;
  is_self?: boolean;
  lastName?: GQLStringPredicate;
  not_self?: boolean;
  origin?: GQLStringPredicate;
  roles?: GQLRole_PermissionRelationFilter;
  status?: GQLStringPredicate;
  timezone?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
}

export interface GQLFile_PermissionFilter {
  AND?: Array<GQLFile_PermissionFilter>;
  OR?: Array<GQLFile_PermissionFilter>;
  _fullText?: string;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUser_PermissionFilter;
  deletedAt?: GQLIntPredicate;
  downloadUrl?: GQLStringPredicate;
  fileId?: GQLStringPredicate;
  filename?: GQLStringPredicate;
  id?: GQLIDPredicate;
  image_image?: GQLImage_PermissionRelationFilter;
  provider?: GQLStringPredicate;
  public?: GQLBoolPredicate;
  settings_landingPageImage?: GQLSetting_PermissionRelationFilter;
  settings_menuBarLogo?: GQLSetting_PermissionRelationFilter;
  shareUrl?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
  uploadUrl?: GQLStringPredicate;
  uploaded?: GQLBoolPredicate;
  users_avatar?: GQLUser_PermissionRelationFilter;
}

export interface GQLImage_PermissionRelationFilter {
  every?: GQLImage_PermissionFilter;
  none?: GQLImage_PermissionFilter;
  some?: GQLImage_PermissionFilter;
}

export interface GQLImage_PermissionFilter {
  AND?: Array<GQLImage_PermissionFilter>;
  OR?: Array<GQLImage_PermissionFilter>;
  _fullText?: string;
  altText?: GQLStringPredicate;
  blogs?: GQLBlog_PermissionRelationFilter;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUser_PermissionFilter;
  deletedAt?: GQLIntPredicate;
  height?: GQLIntPredicate;
  id?: GQLIDPredicate;
  image?: GQLFile_PermissionFilter;
  person?: GQLPerson_PermissionFilter;
  schools?: GQLSchool_PermissionFilter;
  technologyLogos?: GQLTechnologyLogo_PermissionFilter;
  updatedAt?: GQLDateTimePredicate;
  width?: GQLIntPredicate;
}

export interface GQLSchool_PermissionFilter {
  AND?: Array<GQLSchool_PermissionFilter>;
  OR?: Array<GQLSchool_PermissionFilter>;
  _fullText?: string;
  courseUrls?: GQLCourseUrl_PermissionRelationFilter;
  courses?: GQLCourse_PermissionRelationFilter;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUser_PermissionFilter;
  deletedAt?: GQLIntPredicate;
  description?: GQLStringPredicate;
  id?: GQLIDPredicate;
  image?: GQLImage_PermissionFilter;
  name?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
  url?: GQLStringPredicate;
}

export interface GQLTechnologyLogo_PermissionFilter {
  AND?: Array<GQLTechnologyLogo_PermissionFilter>;
  OR?: Array<GQLTechnologyLogo_PermissionFilter>;
  _fullText?: string;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUser_PermissionFilter;
  deletedAt?: GQLIntPredicate;
  id?: GQLIDPredicate;
  image?: GQLImage_PermissionFilter;
  updatedAt?: GQLDateTimePredicate;
}

export interface GQLSetting_PermissionRelationFilter {
  every?: GQLSetting_PermissionFilter;
  none?: GQLSetting_PermissionFilter;
  some?: GQLSetting_PermissionFilter;
}

export interface GQLSetting_PermissionFilter {
  AND?: Array<GQLSetting_PermissionFilter>;
  OR?: Array<GQLSetting_PermissionFilter>;
  _fullText?: string;
  bgColor?: GQLStringPredicate;
  buttonLinkColor?: GQLStringPredicate;
  containerColor?: GQLStringPredicate;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUser_PermissionFilter;
  currency?: GQLStringPredicate;
  dateFormat?: GQLStringPredicate;
  deletedAt?: GQLIntPredicate;
  landingPageImage?: GQLFile_PermissionFilter;
  language?: GQLStringPredicate;
  leftNavColor?: GQLStringPredicate;
  menuBarBGColor?: GQLStringPredicate;
  menuBarIconsColor?: GQLStringPredicate;
  menuBarLogo?: GQLFile_PermissionFilter;
  passwordMinLength?: GQLIntPredicate;
  passwordRequireLowercase?: GQLBoolPredicate;
  passwordRequireNumbers?: GQLBoolPredicate;
  passwordRequireSpecial?: GQLBoolPredicate;
  passwordRequireUppercase?: GQLBoolPredicate;
  passwordUpdateInterval?: GQLIntPredicate;
  rememberDevice?: GQLStringPredicate;
  timezone?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
  userInterfaceStyle?: GQLStringPredicate;
  vanityUrl?: GQLStringPredicate;
}

export interface GQLUser_PermissionRelationFilter {
  every?: GQLUser_PermissionFilter;
  none?: GQLUser_PermissionFilter;
  some?: GQLUser_PermissionFilter;
}

export interface GQLRole_PermissionRelationFilter {
  every?: GQLRole_PermissionFilter;
  none?: GQLRole_PermissionFilter;
  some?: GQLRole_PermissionFilter;
}

export interface GQLRole_PermissionFilter {
  AND?: Array<GQLRole_PermissionFilter>;
  OR?: Array<GQLRole_PermissionFilter>;
  _fullText?: string;
  apiTokens?: GQLApiToken_PermissionRelationFilter;
  authenticationProfiles?: GQLAuthenticationProfile_PermissionRelationFilter;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUser_PermissionFilter;
  deletedAt?: GQLIntPredicate;
  description?: GQLStringPredicate;
  id?: GQLIDPredicate;
  name?: GQLStringPredicate;
  permissions?: GQLPermission_PermissionRelationFilter;
  updatedAt?: GQLDateTimePredicate;
  users?: GQLUser_PermissionRelationFilter;
}

export interface GQLApiToken_PermissionRelationFilter {
  every?: GQLApiToken_PermissionFilter;
  none?: GQLApiToken_PermissionFilter;
  some?: GQLApiToken_PermissionFilter;
}

export interface GQLApiToken_PermissionFilter {
  AND?: Array<GQLApiToken_PermissionFilter>;
  OR?: Array<GQLApiToken_PermissionFilter>;
  _fullText?: string;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUser_PermissionFilter;
  deletedAt?: GQLIntPredicate;
  id?: GQLIDPredicate;
  name?: GQLStringPredicate;
  roles?: GQLRole_PermissionRelationFilter;
  token?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
}

export interface GQLAuthenticationProfile_PermissionRelationFilter {
  every?: GQLAuthenticationProfile_PermissionFilter;
  none?: GQLAuthenticationProfile_PermissionFilter;
  some?: GQLAuthenticationProfile_PermissionFilter;
}

export interface GQLAuthenticationProfile_PermissionFilter {
  AND?: Array<GQLAuthenticationProfile_PermissionFilter>;
  OR?: Array<GQLAuthenticationProfile_PermissionFilter>;
  _fullText?: string;
  clientId?: GQLStringPredicate;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUser_PermissionFilter;
  databaseName?: GQLStringPredicate;
  deletedAt?: GQLIntPredicate;
  domain?: GQLStringPredicate;
  id?: GQLIDPredicate;
  managementDomain?: GQLStringPredicate;
  name?: GQLStringPredicate;
  roles?: GQLRole_PermissionRelationFilter;
  secret?: GQLStringPredicate;
  selfSignUpEnabled?: GQLBoolPredicate;
  type?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
}

export interface GQLPermission_PermissionRelationFilter {
  every?: GQLPermission_PermissionFilter;
  none?: GQLPermission_PermissionFilter;
  some?: GQLPermission_PermissionFilter;
}

export interface GQLPermission_PermissionFilter {
  AND?: Array<GQLPermission_PermissionFilter>;
  OR?: Array<GQLPermission_PermissionFilter>;
  _fullText?: string;
  appId?: GQLStringPredicate;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUser_PermissionFilter;
  deletedAt?: GQLIntPredicate;
  resource?: GQLStringPredicate;
  resourceType?: GQLStringPredicate;
  role?: GQLRole_PermissionFilter;
  updatedAt?: GQLDateTimePredicate;
}

export interface GQLPermissionsDataBlogUpdate {
  allow: boolean;
  fields?: GQLBlogFieldsPermissions;
  filter?: GQLBlog_PermissionFilter;
}

export interface GQLPermissionsDataBlogUser {
  create?: GQLPermissionsDataBlogUserCreate;
  delete?: GQLPermissionsDataBlogUserDelete;
  destroy?: GQLPermissionsDataBlogUserDestroy;
  read?: GQLPermissionsDataBlogUserRead;
  update?: GQLPermissionsDataBlogUserUpdate;
}

export interface GQLPermissionsDataBlogUserCreate {
  allow: boolean;
}

export interface GQLPermissionsDataBlogUserDelete {
  allow: boolean;
  restore?: boolean;
  review?: boolean;
}

export interface GQLPermissionsDataBlogUserDestroy {
  allow: boolean;
}

export interface GQLPermissionsDataBlogUserRead {
  allow: boolean;
  fields?: GQLBlogUserFieldsPermissions;
  filter?: GQLBlogUser_PermissionFilter;
}

/**
 * BlogUserFieldsPermissions create input
 */
export interface GQLBlogUserFieldsPermissions {
  createdAt?: boolean;
  email?: boolean;
  password?: boolean;
  token?: boolean;
  updatedAt?: boolean;
  username?: boolean;
}

export interface GQLBlogUser_PermissionFilter {
  AND?: Array<GQLBlogUser_PermissionFilter>;
  OR?: Array<GQLBlogUser_PermissionFilter>;
  _fullText?: string;
  comments?: GQLComment_PermissionRelationFilter;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUser_PermissionFilter;
  deletedAt?: GQLIntPredicate;
  email?: GQLStringPredicate;
  id?: GQLIDPredicate;
  password?: GQLStringPredicate;
  token?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
  username?: GQLStringPredicate;
}

export interface GQLComment_PermissionRelationFilter {
  every?: GQLComment_PermissionFilter;
  none?: GQLComment_PermissionFilter;
  some?: GQLComment_PermissionFilter;
}

export interface GQLComment_PermissionFilter {
  AND?: Array<GQLComment_PermissionFilter>;
  OR?: Array<GQLComment_PermissionFilter>;
  _fullText?: string;
  blogUser?: GQLBlogUser_PermissionFilter;
  comment?: GQLStringPredicate;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUser_PermissionFilter;
  deletedAt?: GQLIntPredicate;
  id?: GQLIDPredicate;
  slug?: GQLStringPredicate;
  updatedAt?: GQLDateTimePredicate;
}

export interface GQLPermissionsDataBlogUserUpdate {
  allow: boolean;
  fields?: GQLBlogUserFieldsPermissions;
  filter?: GQLBlogUser_PermissionFilter;
}

export interface GQLPermissionsDataComment {
  create?: GQLPermissionsDataCommentCreate;
  delete?: GQLPermissionsDataCommentDelete;
  destroy?: GQLPermissionsDataCommentDestroy;
  read?: GQLPermissionsDataCommentRead;
  update?: GQLPermissionsDataCommentUpdate;
}

export interface GQLPermissionsDataCommentCreate {
  allow: boolean;
}

export interface GQLPermissionsDataCommentDelete {
  allow: boolean;
  restore?: boolean;
  review?: boolean;
}

export interface GQLPermissionsDataCommentDestroy {
  allow: boolean;
}

export interface GQLPermissionsDataCommentRead {
  allow: boolean;
  fields?: GQLCommentFieldsPermissions;
  filter?: GQLComment_PermissionFilter;
}

/**
 * CommentFieldsPermissions create input
 */
export interface GQLCommentFieldsPermissions {
  comment?: boolean;
  createdAt?: boolean;
  slug?: boolean;
  updatedAt?: boolean;
}

export interface GQLPermissionsDataCommentUpdate {
  allow: boolean;
  fields?: GQLCommentFieldsPermissions;
  filter?: GQLComment_PermissionFilter;
}

export interface GQLPermissionsDataCourse {
  create?: GQLPermissionsDataCourseCreate;
  delete?: GQLPermissionsDataCourseDelete;
  destroy?: GQLPermissionsDataCourseDestroy;
  read?: GQLPermissionsDataCourseRead;
  update?: GQLPermissionsDataCourseUpdate;
}

export interface GQLPermissionsDataCourseCreate {
  allow: boolean;
}

export interface GQLPermissionsDataCourseDelete {
  allow: boolean;
  restore?: boolean;
  review?: boolean;
}

export interface GQLPermissionsDataCourseDestroy {
  allow: boolean;
}

export interface GQLPermissionsDataCourseRead {
  allow: boolean;
  fields?: GQLCourseFieldsPermissions;
  filter?: GQLCourse_PermissionFilter;
}

/**
 * CourseFieldsPermissions create input
 */
export interface GQLCourseFieldsPermissions {
  createdAt?: boolean;
  duration?: boolean;
  rating?: boolean;
  ratingUrl?: boolean;
  recommendationOrder?: boolean;
  title?: boolean;
  updatedAt?: boolean;
  yearUpdated?: boolean;
}

export interface GQLPermissionsDataCourseUpdate {
  allow: boolean;
  fields?: GQLCourseFieldsPermissions;
  filter?: GQLCourse_PermissionFilter;
}

export interface GQLPermissionsDataCourseUrl {
  create?: GQLPermissionsDataCourseUrlCreate;
  delete?: GQLPermissionsDataCourseUrlDelete;
  destroy?: GQLPermissionsDataCourseUrlDestroy;
  read?: GQLPermissionsDataCourseUrlRead;
  update?: GQLPermissionsDataCourseUrlUpdate;
}

export interface GQLPermissionsDataCourseUrlCreate {
  allow: boolean;
}

export interface GQLPermissionsDataCourseUrlDelete {
  allow: boolean;
  restore?: boolean;
  review?: boolean;
}

export interface GQLPermissionsDataCourseUrlDestroy {
  allow: boolean;
}

export interface GQLPermissionsDataCourseUrlRead {
  allow: boolean;
  fields?: GQLCourseUrlFieldsPermissions;
  filter?: GQLCourseUrl_PermissionFilter;
}

/**
 * CourseUrlFieldsPermissions create input
 */
export interface GQLCourseUrlFieldsPermissions {
  createdAt?: boolean;
  updatedAt?: boolean;
  url?: boolean;
}

export interface GQLPermissionsDataCourseUrlUpdate {
  allow: boolean;
  fields?: GQLCourseUrlFieldsPermissions;
  filter?: GQLCourseUrl_PermissionFilter;
}

export interface GQLPermissionsDataFiles {
  create?: GQLPermissionsDataFilesCreate;
  delete?: GQLPermissionsDataFilesDelete;
  destroy?: GQLPermissionsDataFilesDestroy;
  read?: GQLPermissionsDataFilesRead;
  update?: GQLPermissionsDataFilesUpdate;
}

export interface GQLPermissionsDataFilesCreate {
  allow: boolean;
}

export interface GQLPermissionsDataFilesDelete {
  allow: boolean;
  restore?: boolean;
  review?: boolean;
}

export interface GQLPermissionsDataFilesDestroy {
  allow: boolean;
}

export interface GQLPermissionsDataFilesRead {
  allow: boolean;
  fields?: GQLFileFieldsPermissions;
  filter?: GQLFile_PermissionFilter;
}

/**
 * FileFieldsPermissions create input
 */
export interface GQLFileFieldsPermissions {
  createdAt?: boolean;
  downloadUrl?: boolean;
  fields?: boolean;
  fileId?: boolean;
  filename?: boolean;
  meta?: boolean;
  mods?: boolean;
  provider?: boolean;
  public?: boolean;
  shareUrl?: boolean;
  updatedAt?: boolean;
  uploadUrl?: boolean;
  uploaded?: boolean;
}

export interface GQLPermissionsDataFilesUpdate {
  allow: boolean;
  fields?: GQLFileFieldsPermissions;
  filter?: GQLFile_PermissionFilter;
}

export interface GQLPermissionsDataImage {
  create?: GQLPermissionsDataImageCreate;
  delete?: GQLPermissionsDataImageDelete;
  destroy?: GQLPermissionsDataImageDestroy;
  read?: GQLPermissionsDataImageRead;
  update?: GQLPermissionsDataImageUpdate;
}

export interface GQLPermissionsDataImageCreate {
  allow: boolean;
}

export interface GQLPermissionsDataImageDelete {
  allow: boolean;
  restore?: boolean;
  review?: boolean;
}

export interface GQLPermissionsDataImageDestroy {
  allow: boolean;
}

export interface GQLPermissionsDataImageRead {
  allow: boolean;
  fields?: GQLImageFieldsPermissions;
  filter?: GQLImage_PermissionFilter;
}

/**
 * ImageFieldsPermissions create input
 */
export interface GQLImageFieldsPermissions {
  altText?: boolean;
  createdAt?: boolean;
  height?: boolean;
  updatedAt?: boolean;
  width?: boolean;
}

export interface GQLPermissionsDataImageUpdate {
  allow: boolean;
  fields?: GQLImageFieldsPermissions;
  filter?: GQLImage_PermissionFilter;
}

export interface GQLPermissionsDataPerson {
  create?: GQLPermissionsDataPersonCreate;
  delete?: GQLPermissionsDataPersonDelete;
  destroy?: GQLPermissionsDataPersonDestroy;
  read?: GQLPermissionsDataPersonRead;
  update?: GQLPermissionsDataPersonUpdate;
}

export interface GQLPermissionsDataPersonCreate {
  allow: boolean;
}

export interface GQLPermissionsDataPersonDelete {
  allow: boolean;
  restore?: boolean;
  review?: boolean;
}

export interface GQLPermissionsDataPersonDestroy {
  allow: boolean;
}

export interface GQLPermissionsDataPersonRead {
  allow: boolean;
  fields?: GQLPersonFieldsPermissions;
  filter?: GQLPerson_PermissionFilter;
}

/**
 * PersonFieldsPermissions create input
 */
export interface GQLPersonFieldsPermissions {
  createdAt?: boolean;
  firstName?: boolean;
  githubUrl?: boolean;
  lastName?: boolean;
  linkedinUrl?: boolean;
  summary?: boolean;
  updatedAt?: boolean;
  websiteUrl?: boolean;
}

export interface GQLPermissionsDataPersonUpdate {
  allow: boolean;
  fields?: GQLPersonFieldsPermissions;
  filter?: GQLPerson_PermissionFilter;
}

export interface GQLPermissionsDataRoles {
  create?: GQLPermissionsDataRolesCreate;
  delete?: GQLPermissionsDataRolesDelete;
  destroy?: GQLPermissionsDataRolesDestroy;
  read?: GQLPermissionsDataRolesRead;
  update?: GQLPermissionsDataRolesUpdate;
}

export interface GQLPermissionsDataRolesCreate {
  allow: boolean;
}

export interface GQLPermissionsDataRolesDelete {
  allow: boolean;
  restore?: boolean;
  review?: boolean;
}

export interface GQLPermissionsDataRolesDestroy {
  allow: boolean;
}

export interface GQLPermissionsDataRolesRead {
  allow: boolean;
  fields?: GQLRoleFieldsPermissions;
  filter?: GQLRole_PermissionFilter;
}

/**
 * RoleFieldsPermissions create input
 */
export interface GQLRoleFieldsPermissions {
  createdAt?: boolean;
  description?: boolean;
  name?: boolean;
  updatedAt?: boolean;
}

export interface GQLPermissionsDataRolesUpdate {
  allow: boolean;
  fields?: GQLRoleFieldsPermissions;
  filter?: GQLRole_PermissionFilter;
}

export interface GQLPermissionsDataSchool {
  create?: GQLPermissionsDataSchoolCreate;
  delete?: GQLPermissionsDataSchoolDelete;
  destroy?: GQLPermissionsDataSchoolDestroy;
  read?: GQLPermissionsDataSchoolRead;
  update?: GQLPermissionsDataSchoolUpdate;
}

export interface GQLPermissionsDataSchoolCreate {
  allow: boolean;
}

export interface GQLPermissionsDataSchoolDelete {
  allow: boolean;
  restore?: boolean;
  review?: boolean;
}

export interface GQLPermissionsDataSchoolDestroy {
  allow: boolean;
}

export interface GQLPermissionsDataSchoolRead {
  allow: boolean;
  fields?: GQLSchoolFieldsPermissions;
  filter?: GQLSchool_PermissionFilter;
}

/**
 * SchoolFieldsPermissions create input
 */
export interface GQLSchoolFieldsPermissions {
  createdAt?: boolean;
  description?: boolean;
  name?: boolean;
  updatedAt?: boolean;
  url?: boolean;
}

export interface GQLPermissionsDataSchoolUpdate {
  allow: boolean;
  fields?: GQLSchoolFieldsPermissions;
  filter?: GQLSchool_PermissionFilter;
}

export interface GQLPermissionsDataTechnologyLogo {
  create?: GQLPermissionsDataTechnologyLogoCreate;
  delete?: GQLPermissionsDataTechnologyLogoDelete;
  destroy?: GQLPermissionsDataTechnologyLogoDestroy;
  read?: GQLPermissionsDataTechnologyLogoRead;
  update?: GQLPermissionsDataTechnologyLogoUpdate;
}

export interface GQLPermissionsDataTechnologyLogoCreate {
  allow: boolean;
}

export interface GQLPermissionsDataTechnologyLogoDelete {
  allow: boolean;
  restore?: boolean;
  review?: boolean;
}

export interface GQLPermissionsDataTechnologyLogoDestroy {
  allow: boolean;
}

export interface GQLPermissionsDataTechnologyLogoRead {
  allow: boolean;
  fields?: GQLTechnologyLogoFieldsPermissions;
  filter?: GQLTechnologyLogo_PermissionFilter;
}

/**
 * TechnologyLogoFieldsPermissions create input
 */
export interface GQLTechnologyLogoFieldsPermissions {
  createdAt?: boolean;
  updatedAt?: boolean;
}

export interface GQLPermissionsDataTechnologyLogoUpdate {
  allow: boolean;
  fields?: GQLTechnologyLogoFieldsPermissions;
  filter?: GQLTechnologyLogo_PermissionFilter;
}

export interface GQLPermissionsDataUsers {
  create?: GQLPermissionsDataUsersCreate;
  delete?: GQLPermissionsDataUsersDelete;
  destroy?: GQLPermissionsDataUsersDestroy;
  read?: GQLPermissionsDataUsersRead;
  update?: GQLPermissionsDataUsersUpdate;
}

export interface GQLPermissionsDataUsersCreate {
  allow: boolean;
}

export interface GQLPermissionsDataUsersDelete {
  allow: boolean;
  restore?: boolean;
  review?: boolean;
}

export interface GQLPermissionsDataUsersDestroy {
  allow: boolean;
}

export interface GQLPermissionsDataUsersRead {
  allow: boolean;
  fields?: GQLUserFieldsPermissions;
  filter?: GQLUser_PermissionFilter;
}

/**
 * UserFieldsPermissions create input
 */
export interface GQLUserFieldsPermissions {
  createdAt?: boolean;
  email?: boolean;
  firstName?: boolean;
  is8base?: boolean;
  lastName?: boolean;
  origin?: boolean;
  status?: boolean;
  timezone?: boolean;
  updatedAt?: boolean;
}

export interface GQLPermissionsDataUsersUpdate {
  allow: boolean;
  fields?: GQLUserFieldsPermissions;
  filter?: GQLUser_PermissionFilter;
}

/**
 * Roles relation input
 */
export interface GQLRolesUsersRelationInput {
  connect?: Array<GQLUserKeyFilter>;
  create?: Array<GQLRoles_UserCreateInput | null>;
}

export interface GQLUserKeyFilter {
  email?: string;
  id?: string;
}

/**
 * Users create input from roles
 */
export interface GQLRoles_UserCreateInput {
  avatar?: GQLUsersAvatarRelationInput;
  email: string;
  firstName?: string;
  lastName?: string;
  roles?: GQLUsersRolesRelationInput;
  status?: string;
  timezone?: string;
}

/**
 * Users relation input
 */
export interface GQLUsersAvatarRelationInput {
  connect?: GQLFileKeyFilter;
  create?: GQLUsers_avatar_FileCreateInput;
}

export interface GQLFileKeyFilter {
  fileId?: string;
  id?: string;
}

/**
 * Files create input from users_avatar
 */
export interface GQLUsers_avatar_FileCreateInput {
  fileId?: string;
  filename?: string;
  image_image?: GQLFilesImage_imageRelationInput;
  meta?: GQLJSON;
  mods?: GQLJSON;
  public?: boolean;
  users_avatar?: GQLFilesUsers_avatarRelationInput;
}

/**
 * Files relation input
 */
export interface GQLFilesImage_imageRelationInput {
  connect?: Array<GQLImageKeyFilter>;
  create?: Array<GQLImage_ImageCreateInput | null>;
}

export interface GQLImageKeyFilter {
  id?: string;
}

/**
 * Image create input from image
 */
export interface GQLImage_ImageCreateInput {
  altText: string;
  blogs?: GQLImageBlogsRelationInput;
  height: number;
  image?: GQLImageImageRelationInput;
  person?: GQLImagePersonRelationInput;
  schools?: GQLImageSchoolsRelationInput;
  technologyLogos?: GQLImageTechnologyLogosRelationInput;
  width: number;
}

/**
 * Image relation input
 */
export interface GQLImageBlogsRelationInput {
  connect?: Array<GQLBlogKeyFilter>;
  create?: Array<GQLFeaturedImage_BlogCreateInput | null>;
}

export interface GQLBlogKeyFilter {
  id?: string;
  slug?: string;
}

/**
 * Blog create input from featuredImage
 */
export interface GQLFeaturedImage_BlogCreateInput {
  authors?: GQLBlogAuthorsRelationInput;
  description: string;
  featuredImage?: GQLBlogFeaturedImageRelationInput;

  /**
   * The date that determines which order blogs will display in. Change this on update if it needs to go to the top of the list. Or use it to schedule posts for the future.
   */
  orderDate: GQLDateTime;
  slug?: string;
  title: string;
}

/**
 * Blog relation input
 */
export interface GQLBlogAuthorsRelationInput {
  connect?: Array<GQLPersonKeyFilter>;
  create?: Array<GQLBlogs_PersonCreateInput | null>;
}

export interface GQLPersonKeyFilter {
  id?: string;
}

/**
 * Person create input from blogs
 */
export interface GQLBlogs_PersonCreateInput {
  blogs?: GQLPersonBlogsRelationInput;
  courses?: GQLPersonCoursesRelationInput;
  firstName: string;
  githubUrl?: string;
  image?: GQLPersonImageRelationInput;
  lastName: string;
  linkedinUrl?: string;
  summary?: string;
  websiteUrl?: string;
}

/**
 * Person relation input
 */
export interface GQLPersonBlogsRelationInput {
  connect?: Array<GQLBlogKeyFilter>;
  create?: Array<GQLAuthors_BlogCreateInput | null>;
}

/**
 * Blog create input from persons
 */
export interface GQLAuthors_BlogCreateInput {
  authors?: GQLBlogAuthorsRelationInput;
  description: string;
  featuredImage?: GQLBlogFeaturedImageRelationInput;

  /**
   * The date that determines which order blogs will display in. Change this on update if it needs to go to the top of the list. Or use it to schedule posts for the future.
   */
  orderDate: GQLDateTime;
  slug?: string;
  title: string;
}

/**
 * Blog relation input
 */
export interface GQLBlogFeaturedImageRelationInput {
  connect?: GQLImageKeyFilter;
  create?: GQLBlogs_ImageCreateInput;
}

/**
 * Image create input from blogs
 */
export interface GQLBlogs_ImageCreateInput {
  altText: string;
  blogs?: GQLImageBlogsRelationInput;
  height: number;
  image?: GQLImageImageRelationInput;
  person?: GQLImagePersonRelationInput;
  schools?: GQLImageSchoolsRelationInput;
  technologyLogos?: GQLImageTechnologyLogosRelationInput;
  width: number;
}

/**
 * Image relation input
 */
export interface GQLImageImageRelationInput {
  connect?: GQLFileKeyFilter;
  create?: GQLImage_image_FileCreateInput;
}

/**
 * Files create input from image_image
 */
export interface GQLImage_image_FileCreateInput {
  fileId?: string;
  filename?: string;
  image_image?: GQLFilesImage_imageRelationInput;
  meta?: GQLJSON;
  mods?: GQLJSON;
  public?: boolean;
  users_avatar?: GQLFilesUsers_avatarRelationInput;
}

/**
 * Files relation input
 */
export interface GQLFilesUsers_avatarRelationInput {
  connect?: Array<GQLUserKeyFilter>;
  create?: Array<GQLAvatar_UserCreateInput | null>;
}

/**
 * Users create input from avatar
 */
export interface GQLAvatar_UserCreateInput {
  avatar?: GQLUsersAvatarRelationInput;
  email: string;
  firstName?: string;
  lastName?: string;
  roles?: GQLUsersRolesRelationInput;
  status?: string;
  timezone?: string;
}

/**
 * Users relation input
 */
export interface GQLUsersRolesRelationInput {
  connect?: Array<GQLRoleKeyFilter>;
  create?: Array<GQLUsers_RoleCreateInput | null>;
}

/**
 * Roles create input from users
 */
export interface GQLUsers_RoleCreateInput {
  apiTokens?: GQLRolesApiTokensRelationInput;
  authenticationProfiles?: GQLRolesAuthenticationProfilesRelationInput;
  description?: string;
  name: string;
  permissions?: GQLPermissionsInput;
  users?: GQLRolesUsersRelationInput;
}

/**
 * Image relation input
 */
export interface GQLImagePersonRelationInput {
  connect?: GQLPersonKeyFilter;
  create?: GQLImage_PersonCreateInput;
}

/**
 * Person create input from image
 */
export interface GQLImage_PersonCreateInput {
  blogs?: GQLPersonBlogsRelationInput;
  courses?: GQLPersonCoursesRelationInput;
  firstName: string;
  githubUrl?: string;
  image?: GQLPersonImageRelationInput;
  lastName: string;
  linkedinUrl?: string;
  summary?: string;
  websiteUrl?: string;
}

/**
 * Person relation input
 */
export interface GQLPersonCoursesRelationInput {
  connect?: Array<GQLCourseKeyFilter>;
  create?: Array<GQLInstructors_CourseCreateInput | null>;
}

export interface GQLCourseKeyFilter {
  id?: string;
  ratingUrl?: string;
  recommendationOrder?: number;
  title?: string;
}

/**
 * Course create input from instructors
 */
export interface GQLInstructors_CourseCreateInput {
  courseUrls?: GQLCourseCourseUrlsRelationInput;
  duration?: number;
  instructors?: GQLCourseInstructorsRelationInput;
  rating: number;
  ratingUrl?: string;
  recommendationOrder?: number;
  school?: GQLCourseSchoolRelationInput;
  title: string;
  yearUpdated?: number;
}

/**
 * Course relation input
 */
export interface GQLCourseCourseUrlsRelationInput {
  connect?: Array<GQLCourseUrlKeyFilter>;
  create?: Array<GQLCourse_CourseUrlCreateInput | null>;
}

export interface GQLCourseUrlKeyFilter {
  id?: string;
  url?: string;
}

/**
 * CourseUrl create input from course
 */
export interface GQLCourse_CourseUrlCreateInput {
  course?: GQLCourseUrlCourseRelationInput;
  school?: GQLCourseUrlSchoolRelationInput;
  url: string;
}

/**
 * CourseUrl relation input
 */
export interface GQLCourseUrlCourseRelationInput {
  connect?: GQLCourseKeyFilter;
  create?: GQLCourseUrls_CourseCreateInput;
}

/**
 * Course create input from courseUrls
 */
export interface GQLCourseUrls_CourseCreateInput {
  courseUrls?: GQLCourseCourseUrlsRelationInput;
  duration?: number;
  instructors?: GQLCourseInstructorsRelationInput;
  rating: number;
  ratingUrl?: string;
  recommendationOrder?: number;
  school?: GQLCourseSchoolRelationInput;
  title: string;
  yearUpdated?: number;
}

/**
 * Course relation input
 */
export interface GQLCourseInstructorsRelationInput {
  connect?: Array<GQLPersonKeyFilter>;
  create?: Array<GQLCourses_PersonCreateInput | null>;
}

/**
 * Person create input from courses
 */
export interface GQLCourses_PersonCreateInput {
  blogs?: GQLPersonBlogsRelationInput;
  courses?: GQLPersonCoursesRelationInput;
  firstName: string;
  githubUrl?: string;
  image?: GQLPersonImageRelationInput;
  lastName: string;
  linkedinUrl?: string;
  summary?: string;
  websiteUrl?: string;
}

/**
 * Person relation input
 */
export interface GQLPersonImageRelationInput {
  connect?: GQLImageKeyFilter;
  create?: GQLPerson_ImageCreateInput;
}

/**
 * Image create input from person
 */
export interface GQLPerson_ImageCreateInput {
  altText: string;
  blogs?: GQLImageBlogsRelationInput;
  height: number;
  image?: GQLImageImageRelationInput;
  person?: GQLImagePersonRelationInput;
  schools?: GQLImageSchoolsRelationInput;
  technologyLogos?: GQLImageTechnologyLogosRelationInput;
  width: number;
}

/**
 * Image relation input
 */
export interface GQLImageSchoolsRelationInput {
  connect?: GQLSchoolKeyFilter;
  create?: GQLImage_SchoolCreateInput;
}

export interface GQLSchoolKeyFilter {
  id?: string;
  name?: string;
  url?: string;
}

/**
 * School create input from image
 */
export interface GQLImage_SchoolCreateInput {
  courseUrls?: GQLSchoolCourseUrlsRelationInput;
  courses?: GQLSchoolCoursesRelationInput;
  description?: string;
  image?: GQLSchoolImageRelationInput;
  name: string;
  url: string;
}

/**
 * School relation input
 */
export interface GQLSchoolCourseUrlsRelationInput {
  connect?: Array<GQLCourseUrlKeyFilter>;
  create?: Array<GQLSchool_CourseUrlCreateInput | null>;
}

/**
 * CourseUrl create input from school
 */
export interface GQLSchool_CourseUrlCreateInput {
  course: GQLCourseUrlCourseRelationInput;
  school?: GQLCourseUrlSchoolRelationInput;
  url: string;
}

/**
 * CourseUrl relation input
 */
export interface GQLCourseUrlSchoolRelationInput {
  connect?: GQLSchoolKeyFilter;
  create?: GQLCourseUrls_SchoolCreateInput;
}

/**
 * School create input from courseUrls
 */
export interface GQLCourseUrls_SchoolCreateInput {
  courseUrls?: GQLSchoolCourseUrlsRelationInput;
  courses?: GQLSchoolCoursesRelationInput;
  description?: string;
  image?: GQLSchoolImageRelationInput;
  name: string;
  url: string;
}

/**
 * School relation input
 */
export interface GQLSchoolCoursesRelationInput {
  connect?: Array<GQLCourseKeyFilter>;
  create?: Array<GQLSchool_CourseCreateInput | null>;
}

/**
 * Course create input from school
 */
export interface GQLSchool_CourseCreateInput {
  courseUrls?: GQLCourseCourseUrlsRelationInput;
  duration?: number;
  instructors?: GQLCourseInstructorsRelationInput;
  rating: number;
  ratingUrl?: string;
  recommendationOrder?: number;
  school?: GQLCourseSchoolRelationInput;
  title: string;
  yearUpdated?: number;
}

/**
 * Course relation input
 */
export interface GQLCourseSchoolRelationInput {
  connect?: GQLSchoolKeyFilter;
  create?: GQLCourses_SchoolCreateInput;
}

/**
 * School create input from courses
 */
export interface GQLCourses_SchoolCreateInput {
  courseUrls?: GQLSchoolCourseUrlsRelationInput;
  courses?: GQLSchoolCoursesRelationInput;
  description?: string;
  image?: GQLSchoolImageRelationInput;
  name: string;
  url: string;
}

/**
 * School relation input
 */
export interface GQLSchoolImageRelationInput {
  connect?: GQLImageKeyFilter;
  create?: GQLSchools_ImageCreateInput;
}

/**
 * Image create input from schools
 */
export interface GQLSchools_ImageCreateInput {
  altText: string;
  blogs?: GQLImageBlogsRelationInput;
  height: number;
  image?: GQLImageImageRelationInput;
  person?: GQLImagePersonRelationInput;
  schools?: GQLImageSchoolsRelationInput;
  technologyLogos?: GQLImageTechnologyLogosRelationInput;
  width: number;
}

/**
 * Image relation input
 */
export interface GQLImageTechnologyLogosRelationInput {
  connect?: GQLTechnologyLogoKeyFilter;
  create?: GQLImage_TechnologyLogoCreateInput;
}

export interface GQLTechnologyLogoKeyFilter {
  id?: string;
}

/**
 * TechnologyLogo create input from image
 */
export interface GQLImage_TechnologyLogoCreateInput {
  image?: GQLTechnologyLogoImageRelationInput;
}

/**
 * TechnologyLogo relation input
 */
export interface GQLTechnologyLogoImageRelationInput {
  connect?: GQLImageKeyFilter;
  create?: GQLTechnologyLogos_ImageCreateInput;
}

/**
 * Image create input from technologyLogos
 */
export interface GQLTechnologyLogos_ImageCreateInput {
  altText: string;
  blogs?: GQLImageBlogsRelationInput;
  height: number;
  image?: GQLImageImageRelationInput;
  person?: GQLImagePersonRelationInput;
  schools?: GQLImageSchoolsRelationInput;
  technologyLogos?: GQLImageTechnologyLogosRelationInput;
  width: number;
}

/**
 * API Token Response
 */
export interface GQLApiTokenResponse {
  createdAt?: GQLDateTime;
  createdBy?: GQLUser;
  deletedAt?: number;
  id?: string;
  name?: string;
  roles?: GQLRoleListResponse;
  token: string;
  updatedAt?: GQLDateTime;
}

/**
 * ApiTokens delete input
 */
export interface GQLApiTokenDeleteInput {
  force?: boolean;
  id?: string;
}

export interface GQLSuccessResponse {
  success?: boolean;
}

/**
 * ApiTokens update input
 */
export interface GQLApiTokenUpdateInput {
  id?: string;
  name?: string;
  roles?: GQLApiTokensRolesUpdateRelationInput;
}

/**
 * ApiTokens relation input
 */
export interface GQLApiTokensRolesUpdateRelationInput {
  connect?: Array<GQLRoleKeyFilter>;
  create?: Array<GQLApiTokens_RoleCreateInput | null>;
  disconnect?: Array<GQLRoleKeyFilter>;
  reconnect?: Array<GQLRoleKeyFilter>;
  update?: Array<GQLApiTokens_RoleUpdateInput | null>;
}

/**
 * Roles update input from apiTokens
 */
export interface GQLApiTokens_RoleUpdateInput {
  data: GQLRoleUpdateInput;
  filter?: GQLRoleKeyFilter;
}

/**
 * Roles update input
 */
export interface GQLRoleUpdateInput {
  apiTokens?: GQLRolesApiTokensUpdateRelationInput;
  authenticationProfiles?: GQLRolesAuthenticationProfilesUpdateRelationInput;
  description?: string;
  id?: string;
  name?: string;
  permissions?: GQLPermissionsInput;
  users?: GQLRolesUsersUpdateRelationInput;
}

/**
 * Roles relation input
 */
export interface GQLRolesApiTokensUpdateRelationInput {
  connect?: Array<GQLApiTokenKeyFilter>;
  disconnect?: Array<GQLApiTokenKeyFilter>;
  reconnect?: Array<GQLApiTokenKeyFilter>;
  update?: Array<GQLRoles_ApiTokenUpdateInput | null>;
}

/**
 * ApiTokens update input from roles
 */
export interface GQLRoles_ApiTokenUpdateInput {
  data: GQLApiTokenUpdateInput;
  filter?: GQLApiTokenKeyFilter;
}

/**
 * Roles relation input
 */
export interface GQLRolesAuthenticationProfilesUpdateRelationInput {
  connect?: Array<GQLAuthenticationProfileKeyFilter>;
  create?: Array<GQLRoles_AuthenticationProfileCreateInput | null>;
  disconnect?: Array<GQLAuthenticationProfileKeyFilter>;
  reconnect?: Array<GQLAuthenticationProfileKeyFilter>;
  update?: Array<GQLRoles_AuthenticationProfileUpdateInput | null>;
}

/**
 * AuthenticationProfiles update input from roles
 */
export interface GQLRoles_AuthenticationProfileUpdateInput {
  data: GQLAuthenticationProfileUpdateInput;
  filter?: GQLAuthenticationProfileKeyFilter;
}

/**
 * AuthenticationProfiles update input
 */
export interface GQLAuthenticationProfileUpdateInput {
  audiences?: Array<string | null>;
  clientId?: string;
  databaseName?: string;
  domain?: string;
  id?: string;
  managementDomain?: string;
  name?: string;
  roles?: GQLAuthenticationProfilesRolesUpdateRelationInput;
  secret?: string;
  selfSignUpEmailDomains?: Array<string | null>;
  selfSignUpEnabled?: boolean;
  type?: string;
}

/**
 * AuthenticationProfiles relation input
 */
export interface GQLAuthenticationProfilesRolesUpdateRelationInput {
  connect?: Array<GQLRoleKeyFilter>;
  create?: Array<GQLAuthenticationProfiles_RoleCreateInput | null>;
  disconnect?: Array<GQLRoleKeyFilter>;
  reconnect?: Array<GQLRoleKeyFilter>;
  update?: Array<GQLAuthenticationProfiles_RoleUpdateInput | null>;
}

/**
 * Roles update input from authenticationProfiles
 */
export interface GQLAuthenticationProfiles_RoleUpdateInput {
  data: GQLRoleUpdateInput;
  filter?: GQLRoleKeyFilter;
}

/**
 * Roles relation input
 */
export interface GQLRolesUsersUpdateRelationInput {
  connect?: Array<GQLUserKeyFilter>;
  create?: Array<GQLRoles_UserCreateInput | null>;
  disconnect?: Array<GQLUserKeyFilter>;
  reconnect?: Array<GQLUserKeyFilter>;
  update?: Array<GQLRoles_UserUpdateInput | null>;
}

/**
 * Users update input from roles
 */
export interface GQLRoles_UserUpdateInput {
  data: GQLUserUpdateInput;
  filter?: GQLUserKeyFilter;
}

/**
 * Users update input
 */
export interface GQLUserUpdateInput {
  avatar?: GQLUsersAvatarUpdateRelationInput;
  email?: string;
  firstName?: string;
  id?: string;
  lastName?: string;
  roles?: GQLUsersRolesUpdateRelationInput;
  status?: string;
  timezone?: string;
}

/**
 * Users relation input
 */
export interface GQLUsersAvatarUpdateRelationInput {
  connect?: GQLFileKeyFilter;
  create?: GQLUsers_avatar_FileCreateInput;
  disconnect?: GQLFileKeyFilter;
  reconnect?: GQLFileKeyFilter;
  update?: GQLUsers_avatar_FileUpdateInput;
}

/**
 * Files update input from users_avatar
 */
export interface GQLUsers_avatar_FileUpdateInput {
  fileId?: string;
  filename?: string;
  image_image?: GQLFilesImage_imageUpdateRelationInput;
  meta?: GQLJSON;
  mods?: GQLJSON;
  public?: boolean;
  users_avatar?: GQLFilesUsers_avatarUpdateRelationInput;
}

/**
 * Files relation input
 */
export interface GQLFilesImage_imageUpdateRelationInput {
  connect?: Array<GQLImageKeyFilter>;
  create?: Array<GQLImage_ImageCreateInput | null>;
  disconnect?: Array<GQLImageKeyFilter>;
  reconnect?: Array<GQLImageKeyFilter>;
  update?: Array<GQLImage_ImageUpdateInput | null>;
}

/**
 * Image update input from image
 */
export interface GQLImage_ImageUpdateInput {
  data: GQLImageUpdateInput;
  filter?: GQLImageKeyFilter;
}

/**
 * Image update input
 */
export interface GQLImageUpdateInput {
  altText?: string;
  blogs?: GQLImageBlogsUpdateRelationInput;
  height?: number;
  id?: string;
  image?: GQLImageImageUpdateRelationInput;
  person?: GQLImagePersonUpdateRelationInput;
  schools?: GQLImageSchoolsUpdateRelationInput;
  technologyLogos?: GQLImageTechnologyLogosUpdateRelationInput;
  width?: number;
}

/**
 * Image relation input
 */
export interface GQLImageBlogsUpdateRelationInput {
  connect?: Array<GQLBlogKeyFilter>;
  create?: Array<GQLFeaturedImage_BlogCreateInput | null>;
  disconnect?: Array<GQLBlogKeyFilter>;
  reconnect?: Array<GQLBlogKeyFilter>;
  update?: Array<GQLFeaturedImage_BlogUpdateInput | null>;
}

/**
 * Blog update input from featuredImage
 */
export interface GQLFeaturedImage_BlogUpdateInput {
  data: GQLBlogUpdateInput;
  filter?: GQLBlogKeyFilter;
}

/**
 * Blog update input
 */
export interface GQLBlogUpdateInput {
  authors?: GQLBlogAuthorsUpdateRelationInput;
  description?: string;
  featuredImage?: GQLBlogFeaturedImageUpdateRelationInput;
  id?: string;

  /**
   * The date that determines which order blogs will display in. Change this on update if it needs to go to the top of the list. Or use it to schedule posts for the future.
   */
  orderDate?: GQLDateTime;
  slug?: string;
  title?: string;
}

/**
 * Blog relation input
 */
export interface GQLBlogAuthorsUpdateRelationInput {
  connect?: Array<GQLPersonKeyFilter>;
  create?: Array<GQLBlogs_PersonCreateInput | null>;
  disconnect?: Array<GQLPersonKeyFilter>;
  reconnect?: Array<GQLPersonKeyFilter>;
  update?: Array<GQLBlogs_PersonUpdateInput | null>;
}

/**
 * Person update input from blogs
 */
export interface GQLBlogs_PersonUpdateInput {
  data: GQLPersonUpdateInput;
  filter?: GQLPersonKeyFilter;
}

/**
 * Person update input
 */
export interface GQLPersonUpdateInput {
  blogs?: GQLPersonBlogsUpdateRelationInput;
  courses?: GQLPersonCoursesUpdateRelationInput;
  firstName?: string;
  githubUrl?: string;
  id?: string;
  image?: GQLPersonImageUpdateRelationInput;
  lastName?: string;
  linkedinUrl?: string;
  summary?: string;
  websiteUrl?: string;
}

/**
 * Person relation input
 */
export interface GQLPersonBlogsUpdateRelationInput {
  connect?: Array<GQLBlogKeyFilter>;
  create?: Array<GQLAuthors_BlogCreateInput | null>;
  disconnect?: Array<GQLBlogKeyFilter>;
  reconnect?: Array<GQLBlogKeyFilter>;
  update?: Array<GQLAuthors_BlogUpdateInput | null>;
}

/**
 * Blog update input from persons
 */
export interface GQLAuthors_BlogUpdateInput {
  data: GQLBlogUpdateInput;
  filter?: GQLBlogKeyFilter;
}

/**
 * Person relation input
 */
export interface GQLPersonCoursesUpdateRelationInput {
  connect?: Array<GQLCourseKeyFilter>;
  create?: Array<GQLInstructors_CourseCreateInput | null>;
  disconnect?: Array<GQLCourseKeyFilter>;
  reconnect?: Array<GQLCourseKeyFilter>;
  update?: Array<GQLInstructors_CourseUpdateInput | null>;
}

/**
 * Course update input from instructors
 */
export interface GQLInstructors_CourseUpdateInput {
  data: GQLCourseUpdateInput;
  filter?: GQLCourseKeyFilter;
}

/**
 * Course update input
 */
export interface GQLCourseUpdateInput {
  courseUrls?: GQLCourseCourseUrlsUpdateRelationInput;
  duration?: number;
  id?: string;
  instructors?: GQLCourseInstructorsUpdateRelationInput;
  rating?: number;
  ratingUrl?: string;
  recommendationOrder?: number;
  school?: GQLCourseSchoolUpdateRelationInput;
  title?: string;
  yearUpdated?: number;
}

/**
 * Course relation input
 */
export interface GQLCourseCourseUrlsUpdateRelationInput {
  connect?: Array<GQLCourseUrlKeyFilter>;
  create?: Array<GQLCourse_CourseUrlCreateInput | null>;
  disconnect?: Array<GQLCourseUrlKeyFilter>;
  reconnect?: Array<GQLCourseUrlKeyFilter>;
  update?: Array<GQLCourse_CourseUrlUpdateInput | null>;
}

/**
 * CourseUrl update input from course
 */
export interface GQLCourse_CourseUrlUpdateInput {
  data: GQLCourseUrlUpdateInput;
  filter?: GQLCourseUrlKeyFilter;
}

/**
 * CourseUrl update input
 */
export interface GQLCourseUrlUpdateInput {
  course?: GQLCourseUrlCourseUpdateRelationInput;
  id?: string;
  school?: GQLCourseUrlSchoolUpdateRelationInput;
  url?: string;
}

/**
 * CourseUrl relation input
 */
export interface GQLCourseUrlCourseUpdateRelationInput {
  connect?: GQLCourseKeyFilter;
  create?: GQLCourseUrls_CourseCreateInput;
  disconnect?: GQLCourseKeyFilter;
  reconnect?: GQLCourseKeyFilter;
  update?: GQLCourseUrls_CourseUpdateInput;
}

/**
 * Course update input from courseUrls
 */
export interface GQLCourseUrls_CourseUpdateInput {
  courseUrls?: GQLCourseCourseUrlsUpdateRelationInput;
  duration?: number;
  instructors?: GQLCourseInstructorsUpdateRelationInput;
  rating?: number;
  ratingUrl?: string;
  recommendationOrder?: number;
  school?: GQLCourseSchoolUpdateRelationInput;
  title?: string;
  yearUpdated?: number;
}

/**
 * Course relation input
 */
export interface GQLCourseInstructorsUpdateRelationInput {
  connect?: Array<GQLPersonKeyFilter>;
  create?: Array<GQLCourses_PersonCreateInput | null>;
  disconnect?: Array<GQLPersonKeyFilter>;
  reconnect?: Array<GQLPersonKeyFilter>;
  update?: Array<GQLCourses_PersonUpdateInput | null>;
}

/**
 * Person update input from courses
 */
export interface GQLCourses_PersonUpdateInput {
  data: GQLPersonUpdateInput;
  filter?: GQLPersonKeyFilter;
}

/**
 * Course relation input
 */
export interface GQLCourseSchoolUpdateRelationInput {
  connect?: GQLSchoolKeyFilter;
  create?: GQLCourses_SchoolCreateInput;
  disconnect?: GQLSchoolKeyFilter;
  reconnect?: GQLSchoolKeyFilter;
  update?: GQLCourses_SchoolUpdateInput;
}

/**
 * School update input from courses
 */
export interface GQLCourses_SchoolUpdateInput {
  courseUrls?: GQLSchoolCourseUrlsUpdateRelationInput;
  courses?: GQLSchoolCoursesUpdateRelationInput;
  description?: string;
  image?: GQLSchoolImageUpdateRelationInput;
  name?: string;
  url?: string;
}

/**
 * School relation input
 */
export interface GQLSchoolCourseUrlsUpdateRelationInput {
  connect?: Array<GQLCourseUrlKeyFilter>;
  create?: Array<GQLSchool_CourseUrlCreateInput | null>;
  disconnect?: Array<GQLCourseUrlKeyFilter>;
  reconnect?: Array<GQLCourseUrlKeyFilter>;
  update?: Array<GQLSchool_CourseUrlUpdateInput | null>;
}

/**
 * CourseUrl update input from school
 */
export interface GQLSchool_CourseUrlUpdateInput {
  data: GQLCourseUrlUpdateInput;
  filter?: GQLCourseUrlKeyFilter;
}

/**
 * School relation input
 */
export interface GQLSchoolCoursesUpdateRelationInput {
  connect?: Array<GQLCourseKeyFilter>;
  create?: Array<GQLSchool_CourseCreateInput | null>;
  disconnect?: Array<GQLCourseKeyFilter>;
  reconnect?: Array<GQLCourseKeyFilter>;
  update?: Array<GQLSchool_CourseUpdateInput | null>;
}

/**
 * Course update input from school
 */
export interface GQLSchool_CourseUpdateInput {
  data: GQLCourseUpdateInput;
  filter?: GQLCourseKeyFilter;
}

/**
 * School relation input
 */
export interface GQLSchoolImageUpdateRelationInput {
  connect?: GQLImageKeyFilter;
  create?: GQLSchools_ImageCreateInput;
  disconnect?: GQLImageKeyFilter;
  reconnect?: GQLImageKeyFilter;
  update?: GQLSchools_ImageUpdateInput;
}

/**
 * Image update input from schools
 */
export interface GQLSchools_ImageUpdateInput {
  altText?: string;
  blogs?: GQLImageBlogsUpdateRelationInput;
  height?: number;
  image?: GQLImageImageUpdateRelationInput;
  person?: GQLImagePersonUpdateRelationInput;
  schools?: GQLImageSchoolsUpdateRelationInput;
  technologyLogos?: GQLImageTechnologyLogosUpdateRelationInput;
  width?: number;
}

/**
 * Image relation input
 */
export interface GQLImageImageUpdateRelationInput {
  connect?: GQLFileKeyFilter;
  create?: GQLImage_image_FileCreateInput;
  disconnect?: GQLFileKeyFilter;
  reconnect?: GQLFileKeyFilter;
  update?: GQLImage_image_FileUpdateInput;
}

/**
 * Files update input from image_image
 */
export interface GQLImage_image_FileUpdateInput {
  fileId?: string;
  filename?: string;
  image_image?: GQLFilesImage_imageUpdateRelationInput;
  meta?: GQLJSON;
  mods?: GQLJSON;
  public?: boolean;
  users_avatar?: GQLFilesUsers_avatarUpdateRelationInput;
}

/**
 * Files relation input
 */
export interface GQLFilesUsers_avatarUpdateRelationInput {
  connect?: Array<GQLUserKeyFilter>;
  create?: Array<GQLAvatar_UserCreateInput | null>;
  disconnect?: Array<GQLUserKeyFilter>;
  reconnect?: Array<GQLUserKeyFilter>;
  update?: Array<GQLAvatar_UserUpdateInput | null>;
}

/**
 * Users update input from avatar
 */
export interface GQLAvatar_UserUpdateInput {
  data: GQLUserUpdateInput;
  filter?: GQLUserKeyFilter;
}

/**
 * Image relation input
 */
export interface GQLImagePersonUpdateRelationInput {
  connect?: GQLPersonKeyFilter;
  create?: GQLImage_PersonCreateInput;
  disconnect?: GQLPersonKeyFilter;
  reconnect?: GQLPersonKeyFilter;
  update?: GQLImage_PersonUpdateInput;
}

/**
 * Person update input from image
 */
export interface GQLImage_PersonUpdateInput {
  blogs?: GQLPersonBlogsUpdateRelationInput;
  courses?: GQLPersonCoursesUpdateRelationInput;
  firstName?: string;
  githubUrl?: string;
  image?: GQLPersonImageUpdateRelationInput;
  lastName?: string;
  linkedinUrl?: string;
  summary?: string;
  websiteUrl?: string;
}

/**
 * Person relation input
 */
export interface GQLPersonImageUpdateRelationInput {
  connect?: GQLImageKeyFilter;
  create?: GQLPerson_ImageCreateInput;
  disconnect?: GQLImageKeyFilter;
  reconnect?: GQLImageKeyFilter;
  update?: GQLPerson_ImageUpdateInput;
}

/**
 * Image update input from person
 */
export interface GQLPerson_ImageUpdateInput {
  altText?: string;
  blogs?: GQLImageBlogsUpdateRelationInput;
  height?: number;
  image?: GQLImageImageUpdateRelationInput;
  person?: GQLImagePersonUpdateRelationInput;
  schools?: GQLImageSchoolsUpdateRelationInput;
  technologyLogos?: GQLImageTechnologyLogosUpdateRelationInput;
  width?: number;
}

/**
 * Image relation input
 */
export interface GQLImageSchoolsUpdateRelationInput {
  connect?: GQLSchoolKeyFilter;
  create?: GQLImage_SchoolCreateInput;
  disconnect?: GQLSchoolKeyFilter;
  reconnect?: GQLSchoolKeyFilter;
  update?: GQLImage_SchoolUpdateInput;
}

/**
 * School update input from image
 */
export interface GQLImage_SchoolUpdateInput {
  courseUrls?: GQLSchoolCourseUrlsUpdateRelationInput;
  courses?: GQLSchoolCoursesUpdateRelationInput;
  description?: string;
  image?: GQLSchoolImageUpdateRelationInput;
  name?: string;
  url?: string;
}

/**
 * Image relation input
 */
export interface GQLImageTechnologyLogosUpdateRelationInput {
  connect?: GQLTechnologyLogoKeyFilter;
  create?: GQLImage_TechnologyLogoCreateInput;
  disconnect?: GQLTechnologyLogoKeyFilter;
  reconnect?: GQLTechnologyLogoKeyFilter;
  update?: GQLImage_TechnologyLogoUpdateInput;
}

/**
 * TechnologyLogo update input from image
 */
export interface GQLImage_TechnologyLogoUpdateInput {
  image?: GQLTechnologyLogoImageUpdateRelationInput;
}

/**
 * TechnologyLogo relation input
 */
export interface GQLTechnologyLogoImageUpdateRelationInput {
  connect?: GQLImageKeyFilter;
  create?: GQLTechnologyLogos_ImageCreateInput;
  disconnect?: GQLImageKeyFilter;
  reconnect?: GQLImageKeyFilter;
  update?: GQLTechnologyLogos_ImageUpdateInput;
}

/**
 * Image update input from technologyLogos
 */
export interface GQLTechnologyLogos_ImageUpdateInput {
  altText?: string;
  blogs?: GQLImageBlogsUpdateRelationInput;
  height?: number;
  image?: GQLImageImageUpdateRelationInput;
  person?: GQLImagePersonUpdateRelationInput;
  schools?: GQLImageSchoolsUpdateRelationInput;
  technologyLogos?: GQLImageTechnologyLogosUpdateRelationInput;
  width?: number;
}

/**
 * CourseUrl relation input
 */
export interface GQLCourseUrlSchoolUpdateRelationInput {
  connect?: GQLSchoolKeyFilter;
  create?: GQLCourseUrls_SchoolCreateInput;
  disconnect?: GQLSchoolKeyFilter;
  reconnect?: GQLSchoolKeyFilter;
  update?: GQLCourseUrls_SchoolUpdateInput;
}

/**
 * School update input from courseUrls
 */
export interface GQLCourseUrls_SchoolUpdateInput {
  courseUrls?: GQLSchoolCourseUrlsUpdateRelationInput;
  courses?: GQLSchoolCoursesUpdateRelationInput;
  description?: string;
  image?: GQLSchoolImageUpdateRelationInput;
  name?: string;
  url?: string;
}

/**
 * Blog relation input
 */
export interface GQLBlogFeaturedImageUpdateRelationInput {
  connect?: GQLImageKeyFilter;
  create?: GQLBlogs_ImageCreateInput;
  disconnect?: GQLImageKeyFilter;
  reconnect?: GQLImageKeyFilter;
  update?: GQLBlogs_ImageUpdateInput;
}

/**
 * Image update input from blogs
 */
export interface GQLBlogs_ImageUpdateInput {
  altText?: string;
  blogs?: GQLImageBlogsUpdateRelationInput;
  height?: number;
  image?: GQLImageImageUpdateRelationInput;
  person?: GQLImagePersonUpdateRelationInput;
  schools?: GQLImageSchoolsUpdateRelationInput;
  technologyLogos?: GQLImageTechnologyLogosUpdateRelationInput;
  width?: number;
}

/**
 * Users relation input
 */
export interface GQLUsersRolesUpdateRelationInput {
  connect?: Array<GQLRoleKeyFilter>;
  create?: Array<GQLUsers_RoleCreateInput | null>;
  disconnect?: Array<GQLRoleKeyFilter>;
  reconnect?: Array<GQLRoleKeyFilter>;
  update?: Array<GQLUsers_RoleUpdateInput | null>;
}

/**
 * Roles update input from users
 */
export interface GQLUsers_RoleUpdateInput {
  data: GQLRoleUpdateInput;
  filter?: GQLRoleKeyFilter;
}

/**
 * ApiTokens update input
 */
export interface GQLApiTokenUpdateByFilterInput {
  name?: Array<GQLUpdateByFilterStringInput | null>;
  token?: Array<GQLUpdateByFilterStringInput | null>;
}

export interface GQLUpdateByFilterStringInput {
  postfix?: string;
  prefix?: string;
  set?: string;
}

/**
 * ApiTokenManyResponse output
 */
export interface GQLApiTokenManyResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLApiToken>;
}

/**
 * ApplicationDeleteMutationInput
 */
export interface GQLApplicationDeleteMutationInput {
  force?: boolean;
  id: string;
}

/**
 * Application install input
 */
export interface GQLApplicationInstallInput {
  appType: string;
  description?: string;
  displayName?: string;
  name: string;
  status?: GQLApplicationStatusEnum;
}

/**
 * Application update input
 */
export interface GQLApplicationUpdateInput {
  description?: string;
  displayName?: string;
  id: string;
  name?: string;
  status?: GQLApplicationStatusEnum;
}

/**
 * AuthenticationProfiles create input
 */
export interface GQLAuthenticationProfileCreateInput {
  audiences?: Array<string | null>;
  clientId?: string;
  databaseName?: string;
  domain?: string;
  managementDomain?: string;
  name: string;
  roles?: GQLAuthenticationProfilesRolesRelationInput;
  secret?: string;
  selfSignUpEmailDomains?: Array<string | null>;
  selfSignUpEnabled?: boolean;
  type?: string;
}

/**
 * AuthenticationProfiles create many input
 */
export interface GQLAuthenticationProfileCreateManyInput {
  audiences?: Array<string | null>;
  clientId?: string;
  databaseName?: string;
  domain?: string;
  managementDomain?: string;
  name: string;
  roles?: GQLAuthenticationProfilesRolesManyRelationInput;
  secret?: string;
  selfSignUpEmailDomains?: Array<string | null>;
  selfSignUpEnabled?: boolean;
  type?: string;
}

/**
 * AuthenticationProfiles relation input
 */
export interface GQLAuthenticationProfilesRolesManyRelationInput {
  connect?: Array<GQLRoleKeyFilter>;
}

/**
 * AuthenticationProfileManyResponse output
 */
export interface GQLAuthenticationProfileManyResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLAuthenticationProfile>;
}

/**
 * AuthenticationProfiles delete input
 */
export interface GQLAuthenticationProfileDeleteInput {
  force?: boolean;
  id?: string;
}

/**
 * AuthenticationProfiles update input
 */
export interface GQLAuthenticationProfileUpdateByFilterInput {
  audiences?: Array<GQLUpdateByFilterListStringInput | null>;
  clientId?: Array<GQLUpdateByFilterStringInput | null>;
  databaseName?: Array<GQLUpdateByFilterStringInput | null>;
  domain?: Array<GQLUpdateByFilterStringInput | null>;
  managementDomain?: Array<GQLUpdateByFilterStringInput | null>;
  name?: Array<GQLUpdateByFilterStringInput | null>;
  secret?: Array<GQLUpdateByFilterStringInput | null>;
  selfSignUpEmailDomains?: Array<GQLUpdateByFilterListStringInput | null>;
  selfSignUpEnabled?: Array<GQLUpdateByFilterBooleanSwitchInput | null>;
  type?: Array<GQLUpdateByFilterStringInput | null>;
}

export interface GQLUpdateByFilterListStringInput {
  insert?: GQLUpdateByFilterListStringInsertOperationInput;
  push?: Array<string | null>;
  remove?: Array<number | null>;
  removeValue?: string;
  set?: Array<string | null>;
  swap?: Array<number | null>;
  unshift?: Array<string | null>;
}

export interface GQLUpdateByFilterListStringInsertOperationInput {
  start: number;
  values: Array<string>;
}

export interface GQLUpdateByFilterBooleanSwitchInput {
  invert?: boolean;
  set?: boolean;
}

/**
 * AuthenticationSettings update input
 */
export interface GQLAuthenticationSettingUpdateInput {
  allowedCallbacks?: Array<string | null>;
  allowedLogouts?: Array<string | null>;
  allowedWebOrigins?: Array<string | null>;
  connections?: GQLAuthenticationProfileConnectionsOptionsInput;
}

/**
 * Authentication profile connection options input
 */
export interface GQLAuthenticationProfileConnectionsOptionsInput {
  facebook?: GQLFacebookOptionsInput;
  github?: GQLGithubOptionsInput;
  google?: GQLGoogleOptionsInput;
}

/**
 * Facebook connection params input
 */
export interface GQLFacebookOptionsInput {
  app_id: string;
  app_secret: string;
  enabled: boolean;
}

/**
 * Github connection params input
 */
export interface GQLGithubOptionsInput {
  client_id: string;
  client_secret: string;
  enabled: boolean;
}

/**
 * Google connection params input
 */
export interface GQLGoogleOptionsInput {
  client_id: string;
  client_secret: string;
  enabled: boolean;
}

/**
 * BillingDetailsUpdateMutationInput
 */
export interface GQLBillingDetailsUpdateMutationInput {
  cardToken: string;
}

/**
 * BillingPlanUpdateMutationInput
 */
export interface GQLBillingPlanUpdateMutationInput {
  planId: string;
}

/**
 * Blog create input
 */
export interface GQLBlogCreateInput {
  authors?: GQLBlogAuthorsRelationInput;
  description: string;
  featuredImage?: GQLBlogFeaturedImageRelationInput;

  /**
   * The date that determines which order blogs will display in. Change this on update if it needs to go to the top of the list. Or use it to schedule posts for the future.
   */
  orderDate: GQLDateTime;
  slug?: string;
  title: string;
}

/**
 * Blog create many input
 */
export interface GQLBlogCreateManyInput {
  authors?: GQLBlogAuthorsManyRelationInput;
  description: string;
  featuredImage: GQLBlogFeaturedImageManyRelationInput;

  /**
   * The date that determines which order blogs will display in. Change this on update if it needs to go to the top of the list. Or use it to schedule posts for the future.
   */
  orderDate: GQLDateTime;
  slug?: string;
  title: string;
}

/**
 * Blog relation input
 */
export interface GQLBlogAuthorsManyRelationInput {
  connect?: Array<GQLPersonKeyFilter>;
}

/**
 * Blog relation input
 */
export interface GQLBlogFeaturedImageManyRelationInput {
  connect?: GQLImageKeyFilter;
}

/**
 * BlogManyResponse output
 */
export interface GQLBlogManyResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLBlog>;
}

/**
 * Blog delete input
 */
export interface GQLBlogDeleteInput {
  force?: boolean;
  id?: string;
}

/**
 * Blog update input
 */
export interface GQLBlogUpdateByFilterInput {
  description?: Array<GQLUpdateByFilterStringInput | null>;
  orderDate?: Array<GQLUpdateByFilterDateTimeInput | null>;
  slug?: Array<GQLUpdateByFilterStringInput | null>;
  title?: Array<GQLUpdateByFilterStringInput | null>;
}

export interface GQLUpdateByFilterDateTimeInput {
  add?: GQLUpdateByFilterDateTimePartsInput;
  set?: string;
  sub?: GQLUpdateByFilterDateTimePartsInput;
}

export interface GQLUpdateByFilterDateTimePartsInput {
  days?: number;
  hours?: number;
  microseconds?: number;
  minutes?: number;
  months?: number;
  seconds?: number;
  years?: number;
}

/**
 * BlogUser create input
 */
export interface GQLBlogUserCreateInput {
  comments?: GQLBlogUserCommentsRelationInput;
  email: string;
  password: string;
  token?: string;
  username: string;
}

/**
 * BlogUser relation input
 */
export interface GQLBlogUserCommentsRelationInput {
  connect?: Array<GQLCommentKeyFilter>;
  create?: Array<GQLBlogUser_CommentCreateInput | null>;
}

export interface GQLCommentKeyFilter {
  id?: string;
  slug?: string;
}

/**
 * Comment create input from blogUser
 */
export interface GQLBlogUser_CommentCreateInput {
  blogUser?: GQLCommentBlogUserRelationInput;
  comment: string;
  slug: string;
}

/**
 * Comment relation input
 */
export interface GQLCommentBlogUserRelationInput {
  connect?: GQLBlogUserKeyFilter;
  create?: GQLComments_BlogUserCreateInput;
}

export interface GQLBlogUserKeyFilter {
  email?: string;
  id?: string;
  username?: string;
}

/**
 * BlogUser create input from comments
 */
export interface GQLComments_BlogUserCreateInput {
  comments?: GQLBlogUserCommentsRelationInput;
  email: string;
  password: string;
  token?: string;
  username: string;
}

/**
 * BlogUser create many input
 */
export interface GQLBlogUserCreateManyInput {
  comments?: GQLBlogUserCommentsManyRelationInput;
  email: string;
  password: string;
  token?: string;
  username: string;
}

/**
 * BlogUser relation input
 */
export interface GQLBlogUserCommentsManyRelationInput {
  connect?: Array<GQLCommentKeyFilter>;
}

/**
 * BlogUserManyResponse output
 */
export interface GQLBlogUserManyResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLBlogUser>;
}

/**
 * BlogUser delete input
 */
export interface GQLBlogUserDeleteInput {
  force?: boolean;
  id?: string;
}

/**
 * BlogUser update input
 */
export interface GQLBlogUserUpdateInput {
  comments?: GQLBlogUserCommentsUpdateRelationInput;
  email?: string;
  id?: string;
  password?: string;
  token?: string;
  username?: string;
}

/**
 * BlogUser relation input
 */
export interface GQLBlogUserCommentsUpdateRelationInput {
  connect?: Array<GQLCommentKeyFilter>;
  create?: Array<GQLBlogUser_CommentCreateInput | null>;
  disconnect?: Array<GQLCommentKeyFilter>;
  reconnect?: Array<GQLCommentKeyFilter>;
  update?: Array<GQLBlogUser_CommentUpdateInput | null>;
}

/**
 * Comment update input from blogUser
 */
export interface GQLBlogUser_CommentUpdateInput {
  data: GQLCommentUpdateInput;
  filter?: GQLCommentKeyFilter;
}

/**
 * Comment update input
 */
export interface GQLCommentUpdateInput {
  blogUser?: GQLCommentBlogUserUpdateRelationInput;
  comment?: string;
  id?: string;
  slug?: string;
}

/**
 * Comment relation input
 */
export interface GQLCommentBlogUserUpdateRelationInput {
  connect?: GQLBlogUserKeyFilter;
  create?: GQLComments_BlogUserCreateInput;
  disconnect?: GQLBlogUserKeyFilter;
  reconnect?: GQLBlogUserKeyFilter;
  update?: GQLComments_BlogUserUpdateInput;
}

/**
 * BlogUser update input from comments
 */
export interface GQLComments_BlogUserUpdateInput {
  comments?: GQLBlogUserCommentsUpdateRelationInput;
  email?: string;
  password?: string;
  token?: string;
  username?: string;
}

/**
 * BlogUser update input
 */
export interface GQLBlogUserUpdateByFilterInput {
  email?: Array<GQLUpdateByFilterStringInput | null>;
  password?: Array<GQLUpdateByFilterStringInput | null>;
  token?: Array<GQLUpdateByFilterStringInput | null>;
  username?: Array<GQLUpdateByFilterStringInput | null>;
}

/**
 * Comment create input
 */
export interface GQLCommentCreateInput {
  blogUser?: GQLCommentBlogUserRelationInput;
  comment: string;
  slug: string;
}

/**
 * Comment create many input
 */
export interface GQLCommentCreateManyInput {
  blogUser: GQLCommentBlogUserManyRelationInput;
  comment: string;
  slug: string;
}

/**
 * Comment relation input
 */
export interface GQLCommentBlogUserManyRelationInput {
  connect?: GQLBlogUserKeyFilter;
}

/**
 * CommentManyResponse output
 */
export interface GQLCommentManyResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLComment>;
}

/**
 * Comment delete input
 */
export interface GQLCommentDeleteInput {
  force?: boolean;
  id?: string;
}

/**
 * Comment update input
 */
export interface GQLCommentUpdateByFilterInput {
  comment?: Array<GQLUpdateByFilterStringInput | null>;
  slug?: Array<GQLUpdateByFilterStringInput | null>;
}

/**
 * Course create input
 */
export interface GQLCourseCreateInput {
  courseUrls?: GQLCourseCourseUrlsRelationInput;
  duration?: number;
  instructors?: GQLCourseInstructorsRelationInput;
  rating: number;
  ratingUrl?: string;
  recommendationOrder?: number;
  school?: GQLCourseSchoolRelationInput;
  title: string;
  yearUpdated?: number;
}

/**
 * Course create many input
 */
export interface GQLCourseCreateManyInput {
  courseUrls?: GQLCourseCourseUrlsManyRelationInput;
  duration?: number;
  instructors?: GQLCourseInstructorsManyRelationInput;
  rating: number;
  ratingUrl?: string;
  recommendationOrder?: number;
  school: GQLCourseSchoolManyRelationInput;
  title: string;
  yearUpdated?: number;
}

/**
 * Course relation input
 */
export interface GQLCourseCourseUrlsManyRelationInput {
  connect?: Array<GQLCourseUrlKeyFilter>;
}

/**
 * Course relation input
 */
export interface GQLCourseInstructorsManyRelationInput {
  connect?: Array<GQLPersonKeyFilter>;
}

/**
 * Course relation input
 */
export interface GQLCourseSchoolManyRelationInput {
  connect?: GQLSchoolKeyFilter;
}

/**
 * CourseManyResponse output
 */
export interface GQLCourseManyResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLCourse>;
}

/**
 * Course delete input
 */
export interface GQLCourseDeleteInput {
  force?: boolean;
  id?: string;
}

/**
 * Course update input
 */
export interface GQLCourseUpdateByFilterInput {
  duration?: Array<GQLUpdateByFilterFloatInput | null>;
  rating?: Array<GQLUpdateByFilterIntInput | null>;
  ratingUrl?: Array<GQLUpdateByFilterStringInput | null>;
  recommendationOrder?: Array<GQLUpdateByFilterIntInput | null>;
  title?: Array<GQLUpdateByFilterStringInput | null>;
  yearUpdated?: Array<GQLUpdateByFilterIntInput | null>;
}

export interface GQLUpdateByFilterFloatInput {
  add?: number;
  div?: number;
  mod?: number;
  mult?: number;
  pow?: number;
  prec?: number;
  set?: number;
  sqrt?: boolean;
  sub?: number;
}

export interface GQLUpdateByFilterIntInput {
  add?: number;
  div?: number;
  mod?: number;
  mult?: number;
  pow?: number;
  prec?: number;
  set?: number;
  sqrt?: boolean;
  sub?: number;
}

/**
 * CourseUrl create input
 */
export interface GQLCourseUrlCreateInput {
  course?: GQLCourseUrlCourseRelationInput;
  school?: GQLCourseUrlSchoolRelationInput;
  url: string;
}

/**
 * CourseUrl create many input
 */
export interface GQLCourseUrlCreateManyInput {
  course: GQLCourseUrlCourseManyRelationInput;
  school: GQLCourseUrlSchoolManyRelationInput;
  url: string;
}

/**
 * CourseUrl relation input
 */
export interface GQLCourseUrlCourseManyRelationInput {
  connect?: GQLCourseKeyFilter;
}

/**
 * CourseUrl relation input
 */
export interface GQLCourseUrlSchoolManyRelationInput {
  connect?: GQLSchoolKeyFilter;
}

/**
 * CourseUrlManyResponse output
 */
export interface GQLCourseUrlManyResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLCourseUrl>;
}

/**
 * CourseUrl delete input
 */
export interface GQLCourseUrlDeleteInput {
  force?: boolean;
  id?: string;
}

/**
 * CourseUrl update input
 */
export interface GQLCourseUrlUpdateByFilterInput {
  url?: Array<GQLUpdateByFilterStringInput | null>;
}

/**
 * DeployingBuildInput
 */
export interface GQLDeployingBuildInput {
  buildName: string;
  options?: GQLDeployOptions;
}

/**
 * DeployOptions
 */
export interface GQLDeployOptions {
  extensionNames?: Array<string | null>;
  mode?: GQLDeployModeEnum;
  pluginNames?: Array<string | null>;
}

export const enum GQLDeployModeEnum {
  FULL = 'FULL',
  FUNCTIONS = 'FUNCTIONS',
  MIGRATIONS = 'MIGRATIONS',
  ONLY_PLUGINS = 'ONLY_PLUGINS',
  ONLY_PROJECT = 'ONLY_PROJECT'
}

/**
 * EnvironmentVariables create input
 */
export interface GQLEnvironmentVariableCreateInput {
  name: string;
  value: string;
}

/**
 * EnvironmentVariables create many input
 */
export interface GQLEnvironmentVariableCreateManyInput {
  name: string;
  value: string;
}

/**
 * EnvironmentVariableManyResponse output
 */
export interface GQLEnvironmentVariableManyResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLEnvironmentVariable>;
}

/**
 * EnvironmentVariables delete input
 */
export interface GQLEnvironmentVariableDeleteInput {
  force?: boolean;
  id?: string;
}

export interface GQLEnvironmentVariableKeyFilter {
  id?: string;
  name?: string;
}

/**
 * EnvironmentVariables update input
 */
export interface GQLEnvironmentVariableUpdateInput {
  id?: string;
  name?: string;
  value?: string;
}

/**
 * EnvironmentVariables update input
 */
export interface GQLEnvironmentVariableUpdateByFilterInput {
  name?: Array<GQLUpdateByFilterStringInput | null>;
  value?: Array<GQLUpdateByFilterStringInput | null>;
}

/**
 * Table Field Create Input
 */
export interface GQLTableFieldCreateInput {
  computedMode?: GQLComputedFieldMode;
  defaultValue?: string;
  description?: string;
  displayName?: string;
  expression?: string;
  fieldType: GQLFieldType;
  fieldTypeAttributes?: GQLFieldTypeAttributesInput;
  force?: boolean;
  initialValue?: string;
  isList: boolean;
  isRequired: boolean;
  isUnique?: boolean;
  name: string;
  position?: number;
  relation?: GQLRelationCreateInput;
  tableId: string;
}

/**
 * Field Type Attributes Input
 */
export interface GQLFieldTypeAttributesInput {
  autoIncrement?: boolean;
  currency?: string;
  expiration?: number;
  fieldSize?: number;
  format?: string;
  isBigInt?: boolean;
  listOptions?: Array<string>;
  maxSize?: number;
  maxValue?: number;
  minValue?: number;
  precision?: number;
  srid?: number;
  typeRestrictions?: Array<string>;
}

/**
 * Relation Create Input
 */
export interface GQLRelationCreateInput {
  refFieldDisplayName?: string;
  refFieldIsList: boolean;
  refFieldIsRequired: boolean;
  refFieldName?: string;
  refTableId: string;
}

/**
 * Table Field Delete Input
 */
export interface GQLTableFieldDeleteInput {
  id: string;
}

/**
 * Table Field Update Input
 */
export interface GQLTableFieldUpdateInput {
  computedMode?: GQLComputedFieldMode;
  defaultValue?: string;
  description?: string;
  displayName?: string;
  expression?: string;
  fieldType?: GQLFieldType;
  fieldTypeAttributes?: GQLFieldTypeAttributesInput;
  force?: boolean;
  id: string;
  initialValue?: string;
  isList?: boolean;
  isRequired?: boolean;
  isUnique?: boolean;
  name?: string;
  position?: number;
  relation?: GQLRelationUpdateInput;
}

/**
 * Relation Update Input
 */
export interface GQLRelationUpdateInput {
  refFieldDisplayName?: string;
  refFieldIsList?: boolean;
  refFieldIsRequired?: boolean;
  refFieldName?: string;
  refTableId?: string;
}

/**
 * Table Field Position Update Input
 */
export interface GQLTableFieldPositionUpdateInput {
  id: string;
  newPosition: number;
}

/**
 * Files create input
 */
export interface GQLFileCreateInput {
  fileId?: string;
  filename?: string;
  image_image?: GQLFilesImage_imageRelationInput;
  meta?: GQLJSON;
  mods?: GQLJSON;
  public?: boolean;
  users_avatar?: GQLFilesUsers_avatarRelationInput;
}

/**
 * Files create many input
 */
export interface GQLFileCreateManyInput {
  fileId?: string;
  filename?: string;
  image_image?: GQLFilesImage_imageManyRelationInput;
  meta?: GQLJSON;
  mods?: GQLJSON;
  public?: boolean;
  users_avatar?: GQLFilesUsers_avatarManyRelationInput;
}

/**
 * Files relation input
 */
export interface GQLFilesImage_imageManyRelationInput {
  connect?: Array<GQLImageKeyFilter>;
}

/**
 * Files relation input
 */
export interface GQLFilesUsers_avatarManyRelationInput {
  connect?: Array<GQLUserKeyFilter>;
}

/**
 * FileManyResponse output
 */
export interface GQLFileManyResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLFile>;
}

/**
 * Files delete input
 */
export interface GQLFileDeleteInput {
  force?: boolean;
  id?: string;
}

/**
 * Files update input
 */
export interface GQLFileUpdateInput {
  fileId?: string;
  filename?: string;
  id?: string;
  image_image?: GQLFilesImage_imageUpdateRelationInput;
  meta?: GQLJSON;
  mods?: GQLJSON;
  public?: boolean;
  users_avatar?: GQLFilesUsers_avatarUpdateRelationInput;
}

/**
 * Files update input
 */
export interface GQLFileUpdateByFilterInput {
  downloadUrl?: Array<GQLUpdateByFilterStringInput | null>;
  fields?: Array<GQLUpdateByFilterJsonInput | null>;
  filename?: Array<GQLUpdateByFilterStringInput | null>;
  meta?: Array<GQLUpdateByFilterJsonInput | null>;
  mods?: Array<GQLUpdateByFilterJsonInput | null>;
  provider?: Array<GQLUpdateByFilterStringInput | null>;
  public?: Array<GQLUpdateByFilterBooleanSwitchInput | null>;
  shareUrl?: Array<GQLUpdateByFilterStringInput | null>;
  uploadUrl?: Array<GQLUpdateByFilterStringInput | null>;
  uploaded?: Array<GQLUpdateByFilterBooleanSwitchInput | null>;
}

export interface GQLUpdateByFilterJsonInput {
  set?: GQLJSON;
}

/**
 * Image create input
 */
export interface GQLImageCreateInput {
  altText: string;
  blogs?: GQLImageBlogsRelationInput;
  height: number;
  image?: GQLImageImageRelationInput;
  person?: GQLImagePersonRelationInput;
  schools?: GQLImageSchoolsRelationInput;
  technologyLogos?: GQLImageTechnologyLogosRelationInput;
  width: number;
}

/**
 * Image create many input
 */
export interface GQLImageCreateManyInput {
  altText: string;
  blogs?: GQLImageBlogsManyRelationInput;
  height: number;
  image: GQLImageImageManyRelationInput;
  person?: GQLImagePersonManyRelationInput;
  schools?: GQLImageSchoolsManyRelationInput;
  technologyLogos?: GQLImageTechnologyLogosManyRelationInput;
  width: number;
}

/**
 * Image relation input
 */
export interface GQLImageBlogsManyRelationInput {
  connect?: Array<GQLBlogKeyFilter>;
}

/**
 * Image relation input
 */
export interface GQLImageImageManyRelationInput {
  connect?: GQLFileKeyFilter;
}

/**
 * Image relation input
 */
export interface GQLImagePersonManyRelationInput {
  connect?: GQLPersonKeyFilter;
}

/**
 * Image relation input
 */
export interface GQLImageSchoolsManyRelationInput {
  connect?: GQLSchoolKeyFilter;
}

/**
 * Image relation input
 */
export interface GQLImageTechnologyLogosManyRelationInput {
  connect?: GQLTechnologyLogoKeyFilter;
}

/**
 * ImageManyResponse output
 */
export interface GQLImageManyResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLImage>;
}

/**
 * Image delete input
 */
export interface GQLImageDeleteInput {
  force?: boolean;
  id?: string;
}

/**
 * Image update input
 */
export interface GQLImageUpdateByFilterInput {
  altText?: Array<GQLUpdateByFilterStringInput | null>;
  height?: Array<GQLUpdateByFilterIntInput | null>;
  width?: Array<GQLUpdateByFilterIntInput | null>;
}

/**
 * Table Create Index Input
 */
export interface GQLIndexCreateInput {
  columns: Array<GQLTableIndexColumnInput>;
  force?: boolean;
  name?: string;
  tableId: string;
  type: GQLTableIndexType;
}

/**
 * Table Index Column Input
 */
export interface GQLTableIndexColumnInput {
  name: string;
}

export const enum GQLTableIndexType {
  INDEX = 'INDEX',
  UNIQUE = 'UNIQUE'
}

/**
 * Table Delete Index Input
 */
export interface GQLIndexDeleteInput {
  id: string;
}

/**
 * Table Update Index Input
 */
export interface GQLIndexUpdateInput {
  columns?: Array<GQLTableIndexColumnInput>;
  force?: boolean;
  id: string;
  name?: string;
  type?: GQLTableIndexType;
}

/**
 * InvokeData
 */
export interface GQLInvokeData {
  functionName: string;
  inputArgs?: string;
}

/**
 * InvokeFunctionResponse
 */
export interface GQLInvokeFunctionResponse {
  responseData: string;
}

/**
 * Person create input
 */
export interface GQLPersonCreateInput {
  blogs?: GQLPersonBlogsRelationInput;
  courses?: GQLPersonCoursesRelationInput;
  firstName: string;
  githubUrl?: string;
  image?: GQLPersonImageRelationInput;
  lastName: string;
  linkedinUrl?: string;
  summary?: string;
  websiteUrl?: string;
}

/**
 * Person create many input
 */
export interface GQLPersonCreateManyInput {
  blogs?: GQLPersonBlogsManyRelationInput;
  courses?: GQLPersonCoursesManyRelationInput;
  firstName: string;
  githubUrl?: string;
  image?: GQLPersonImageManyRelationInput;
  lastName: string;
  linkedinUrl?: string;
  summary?: string;
  websiteUrl?: string;
}

/**
 * Person relation input
 */
export interface GQLPersonBlogsManyRelationInput {
  connect?: Array<GQLBlogKeyFilter>;
}

/**
 * Person relation input
 */
export interface GQLPersonCoursesManyRelationInput {
  connect?: Array<GQLCourseKeyFilter>;
}

/**
 * Person relation input
 */
export interface GQLPersonImageManyRelationInput {
  connect?: GQLImageKeyFilter;
}

/**
 * PersonManyResponse output
 */
export interface GQLPersonManyResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLPerson>;
}

/**
 * Person delete input
 */
export interface GQLPersonDeleteInput {
  force?: boolean;
  id?: string;
}

/**
 * Person update input
 */
export interface GQLPersonUpdateByFilterInput {
  firstName?: Array<GQLUpdateByFilterStringInput | null>;
  githubUrl?: Array<GQLUpdateByFilterStringInput | null>;
  lastName?: Array<GQLUpdateByFilterStringInput | null>;
  linkedinUrl?: Array<GQLUpdateByFilterStringInput | null>;
  summary?: Array<GQLUpdateByFilterStringInput | null>;
  websiteUrl?: Array<GQLUpdateByFilterStringInput | null>;
}

/**
 * DeployDataResponse
 */
export interface GQLDeployDataResponse {
  buildName: string;
  uploadBuildUrl: string;
  uploadMetaDataUrl: string;
}

/**
 * Roles create input
 */
export interface GQLRoleCreateInput {
  apiTokens?: GQLRolesApiTokensRelationInput;
  authenticationProfiles?: GQLRolesAuthenticationProfilesRelationInput;
  description?: string;
  name: string;
  permissions?: GQLPermissionsInput;
  users?: GQLRolesUsersRelationInput;
}

/**
 * Roles create many input
 */
export interface GQLRoleCreateManyInput {
  apiTokens?: GQLRolesApiTokensManyRelationInput;
  authenticationProfiles?: GQLRolesAuthenticationProfilesManyRelationInput;
  description?: string;
  name: string;
  users?: GQLRolesUsersManyRelationInput;
}

/**
 * Roles relation input
 */
export interface GQLRolesApiTokensManyRelationInput {
  connect?: Array<GQLApiTokenKeyFilter>;
}

/**
 * Roles relation input
 */
export interface GQLRolesAuthenticationProfilesManyRelationInput {
  connect?: Array<GQLAuthenticationProfileKeyFilter>;
}

/**
 * Roles relation input
 */
export interface GQLRolesUsersManyRelationInput {
  connect?: Array<GQLUserKeyFilter>;
}

/**
 * RoleManyResponse output
 */
export interface GQLRoleManyResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLRole>;
}

/**
 * Roles delete input
 */
export interface GQLRoleDeleteInput {
  force?: boolean;
  id?: string;
}

/**
 * Roles update input
 */
export interface GQLRoleUpdateByFilterInput {
  description?: Array<GQLUpdateByFilterStringInput | null>;
  name?: Array<GQLUpdateByFilterStringInput | null>;
  systemType?: Array<GQLUpdateByFilterStringInput | null>;
}

/**
 * School create input
 */
export interface GQLSchoolCreateInput {
  courseUrls?: GQLSchoolCourseUrlsRelationInput;
  courses?: GQLSchoolCoursesRelationInput;
  description?: string;
  image?: GQLSchoolImageRelationInput;
  name: string;
  url: string;
}

/**
 * School create many input
 */
export interface GQLSchoolCreateManyInput {
  courseUrls?: GQLSchoolCourseUrlsManyRelationInput;
  courses?: GQLSchoolCoursesManyRelationInput;
  description?: string;
  image: GQLSchoolImageManyRelationInput;
  name: string;
  url: string;
}

/**
 * School relation input
 */
export interface GQLSchoolCourseUrlsManyRelationInput {
  connect?: Array<GQLCourseUrlKeyFilter>;
}

/**
 * School relation input
 */
export interface GQLSchoolCoursesManyRelationInput {
  connect?: Array<GQLCourseKeyFilter>;
}

/**
 * School relation input
 */
export interface GQLSchoolImageManyRelationInput {
  connect?: GQLImageKeyFilter;
}

/**
 * SchoolManyResponse output
 */
export interface GQLSchoolManyResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLSchool>;
}

/**
 * School delete input
 */
export interface GQLSchoolDeleteInput {
  force?: boolean;
  id?: string;
}

/**
 * School update input
 */
export interface GQLSchoolUpdateInput {
  courseUrls?: GQLSchoolCourseUrlsUpdateRelationInput;
  courses?: GQLSchoolCoursesUpdateRelationInput;
  description?: string;
  id?: string;
  image?: GQLSchoolImageUpdateRelationInput;
  name?: string;
  url?: string;
}

/**
 * School update input
 */
export interface GQLSchoolUpdateByFilterInput {
  description?: Array<GQLUpdateByFilterStringInput | null>;
  name?: Array<GQLUpdateByFilterStringInput | null>;
  url?: Array<GQLUpdateByFilterStringInput | null>;
}

/**
 * Settings update input
 */
export interface GQLSettingUpdateInput {
  bgColor?: string;
  buttonLinkColor?: string;
  containerColor?: string;
  currency?: string;
  dateFormat?: string;
  language?: string;
  leftNavColor?: string;
  menuBarBGColor?: string;
  menuBarIconsColor?: string;
  passwordMinLength?: number;
  passwordRequireLowercase?: boolean;
  passwordRequireNumbers?: boolean;
  passwordRequireSpecial?: boolean;
  passwordRequireUppercase?: boolean;
  passwordUpdateInterval?: number;
  rememberDevice?: string;
  timezone?: string;
  userInterfaceStyle?: string;
  vanityUrl?: string;
}

export interface GQLSystemMutation {
  applicationDelete?: GQLSuccessResponse;
  applicationInstall?: GQLSystemApplication;
  applicationUpdate?: GQLSystemApplication;

  /**
   *
   * @deprecated No longer supported. Use `system.memberPaymentDetailsUpdate, system.organizationPaymentDetailsUpdate or system.workspacePaymentDetailsUpdate` instead.
   */
  billingDetailsUpdate?: GQLSystemBillingDetailsResponse;
  billingPlanUpdate?: GQLSystemBillingCurrentPlanResponse;
  ciCommit?: GQLAsyncSession;
  ciInstall?: GQLSuccessResponse;
  deploy?: boolean;
  environmentBackup?: GQLAsyncSession;
  environmentBranch?: GQLAsyncSession;
  environmentDelete?: GQLSuccessResponse;
  environmentDeleteAsync?: GQLAsyncSession;
  environmentMemberDelete: GQLSuccessResponse;
  environmentMemberUpdate?: GQLSystemEnvironmentMember;
  environmentRestore?: GQLAsyncSession;
  environmentSetup?: GQLSuccessResponse;
  fieldCreate: GQLSystemTableField;
  fieldDelete: GQLSuccessResponse;
  fieldUpdate: GQLSystemTableField;
  fieldUpdatePosition: GQLSuccessResponse;
  indexCreate: GQLSystemTableIndex;
  indexDelete?: GQLSuccessResponse;
  indexUpdate: GQLSystemTableIndex;
  inviteMembers: Array<GQLSystemTeamInvitationDetails | null>;
  invoke?: GQLSystemInvokeFunctionResponse;
  memberAccountUpsert?: GQLSystemMemberAccountInfo;
  memberInvitationAccept: GQLSystemMemberInvitationAcceptResponse;
  memberInvitationCancel?: GQLSuccessResponse;
  memberInvitationResend?: GQLSuccessResponse;
  memberPaymentDetailsUpdate?: GQLSystemPaymentDetailsResponse;
  notificationUpdate?: GQLSuccessResponse;
  organizationInviteUser?: GQLOrganizationUserInvitationResponse;
  organizationInviteUserAccept?: GQLSuccessResponse;
  organizationInviteUserCancel?: GQLSuccessResponse;
  organizationPaymentDetailsUpdate?: GQLSystemPaymentDetailsResponse;
  organizationUpdate?: GQLSystemOrganizationItem;
  organizationUserRemove?: GQLSuccessResponse;
  organizationWorkspaceAdd?: GQLSuccessResponse;
  organizationWorkspaceAddAccept?: GQLSuccessResponse;
  organizationWorkspaceAddCancel?: GQLSuccessResponse;
  organizationWorkspaceRemove?: GQLSuccessResponse;
  organizationWorkspaceUserRemove?: GQLSuccessResponse;
  organizationWorkspaceUserShare?: GQLSuccessResponse;
  prepareDeploy: GQLSystemDeployDataResponse;
  tableCreate: GQLSystemTable;
  tableDelete: GQLSuccessResponse;
  tableUpdate: GQLSystemTable;
  viewCreate: GQLSystemTable;
  viewUpdate: GQLSystemTable;
  workspaceCreate?: GQLSystemWorkspaceCreateResponse;
  workspaceCreateAsync?: GQLSystemWorkspaceCreateResponse;
  workspaceDelete?: GQLSuccessResponse;
  workspaceLeave?: GQLSuccessResponse;
  workspacePaymentDetailsUpdate?: GQLSystemPaymentDetailsResponse;
  workspaceTransferAccept?: GQLSuccessResponse;
  workspaceTransferCancel?: GQLSuccessResponse;
  workspaceTransferRegister?: GQLSuccessResponse;
  workspaceUpdate?: GQLSystemWorkspaceUpdateResponse;
}

/**
 * ApplicationDeleteMutationInput
 */
export interface GQLSystemApplicationDeleteMutationInput {
  force?: boolean;
  id: string;
}

/**
 * Application install input
 */
export interface GQLSystemApplicationInstallInput {
  appType: string;
  description?: string;
  displayName?: string;
  name: string;
  status?: GQLSystemApplicationStatusEnum;
}

/**
 * Application update input
 */
export interface GQLSystemApplicationUpdateInput {
  description?: string;
  displayName?: string;
  id: string;
  name?: string;
  status?: GQLSystemApplicationStatusEnum;
}

/**
 * BillingDetailsUpdateMutationInput
 */
export interface GQLSystemBillingDetailsUpdateMutationInput {
  cardToken: string;
}

/**
 * BillingPlanUpdateMutationInput
 */
export interface GQLSystemBillingPlanUpdateMutationInput {
  planId: string;
}

/**
 * Ci Commit Mode
 */
export const enum GQLSystemCiCommitMode {
  FULL = 'FULL',
  ONLY_MIGRATIONS = 'ONLY_MIGRATIONS',
  ONLY_PROJECT = 'ONLY_PROJECT'
}

/**
 * Async Session
 */
export interface GQLAsyncSession {
  sessionId: string;
}

/**
 * DeployingBuildInput
 */
export interface GQLSystemDeployingBuildInput {
  buildName: string;
  options?: GQLSystemDeployOptions;
}

/**
 * DeployOptions
 */
export interface GQLSystemDeployOptions {
  extensionNames?: Array<string | null>;
  mode?: GQLSystemDeployModeEnum;
  pluginNames?: Array<string | null>;
}

export const enum GQLSystemDeployModeEnum {
  FULL = 'FULL',
  FUNCTIONS = 'FUNCTIONS',
  MIGRATIONS = 'MIGRATIONS',
  ONLY_PLUGINS = 'ONLY_PLUGINS',
  ONLY_PROJECT = 'ONLY_PROJECT'
}

export const enum GQLSystemBranchEnvironmentMode {
  FULL = 'FULL',
  SYSTEM = 'SYSTEM'
}

export interface GQLSystemEnvironmentMembersFilter {
  email: string;
}

export interface GQLSystemEnvironmentMemberUpdateData {
  roles?: Array<string | null>;
}

/**
 * EnvironmentSetupInput
 */
export interface GQLEnvironmentSetupInput {
  deleteLock?: boolean;
}

/**
 * Table Field Create Input
 */
export interface GQLSystemTableFieldCreateInput {
  computedMode?: GQLSystemComputedFieldMode;
  defaultValue?: string;
  description?: string;
  displayName?: string;
  expression?: string;
  fieldType: GQLSystemFieldType;
  fieldTypeAttributes?: GQLSystemFieldTypeAttributesInput;
  force?: boolean;
  initialValue?: string;
  isList: boolean;
  isRequired: boolean;
  isUnique?: boolean;
  name: string;
  position?: number;
  relation?: GQLSystemRelationCreateInput;
  tableId: string;
}

/**
 * Field Type Attributes Input
 */
export interface GQLSystemFieldTypeAttributesInput {
  autoIncrement?: boolean;
  currency?: string;
  expiration?: number;
  fieldSize?: number;
  format?: string;
  isBigInt?: boolean;
  listOptions?: Array<string>;
  maxSize?: number;
  maxValue?: number;
  minValue?: number;
  precision?: number;
  srid?: number;
  typeRestrictions?: Array<string>;
}

/**
 * Relation Create Input
 */
export interface GQLSystemRelationCreateInput {
  refFieldDisplayName?: string;
  refFieldIsList: boolean;
  refFieldIsRequired: boolean;
  refFieldName?: string;
  refTableId: string;
}

/**
 * Table Field Delete Input
 */
export interface GQLSystemTableFieldDeleteInput {
  id: string;
}

/**
 * Table Field Update Input
 */
export interface GQLSystemTableFieldUpdateInput {
  computedMode?: GQLSystemComputedFieldMode;
  defaultValue?: string;
  description?: string;
  displayName?: string;
  expression?: string;
  fieldType?: GQLSystemFieldType;
  fieldTypeAttributes?: GQLSystemFieldTypeAttributesInput;
  force?: boolean;
  id: string;
  initialValue?: string;
  isList?: boolean;
  isRequired?: boolean;
  isUnique?: boolean;
  name?: string;
  position?: number;
  relation?: GQLSystemRelationUpdateInput;
}

/**
 * Relation Update Input
 */
export interface GQLSystemRelationUpdateInput {
  refFieldDisplayName?: string;
  refFieldIsList?: boolean;
  refFieldIsRequired?: boolean;
  refFieldName?: string;
  refTableId?: string;
}

/**
 * Table Field Position Update Input
 */
export interface GQLSystemTableFieldPositionUpdateInput {
  id: string;
  newPosition: number;
}

/**
 * Table Create Index Input
 */
export interface GQLSystemIndexCreateInput {
  columns: Array<GQLSystemTableIndexColumnInput>;
  force?: boolean;
  name?: string;
  tableId: string;
  type: GQLTableIndexType;
}

/**
 * Table Index Column Input
 */
export interface GQLSystemTableIndexColumnInput {
  name: string;
}

/**
 * Table Delete Index Input
 */
export interface GQLSystemIndexDeleteInput {
  id: string;
}

/**
 * Table Update Index Input
 */
export interface GQLSystemIndexUpdateInput {
  columns?: Array<GQLSystemTableIndexColumnInput>;
  force?: boolean;
  id: string;
  name?: string;
  type?: GQLTableIndexType;
}

/**
 * Invite members input
 */
export interface GQLSystemInviteMembersInput {
  recipients: Array<GQLSystemInviteRecipientInput>;
}

/**
 * Invite recipient input
 */
export interface GQLSystemInviteRecipientInput {
  email: string;
  firstName?: string;
  lastName?: string;
  roles?: Array<string>;
}

/**
 * Team Invitation Details
 */
export interface GQLSystemTeamInvitationDetails {
  accepted?: boolean;
  acceptedOn?: GQLDateTime;
  apiHost?: string;
  email?: string;
  firstName?: string;
  id?: string;
  invitedBy?: GQLSystemInvitedByName;
  isRegistered?: boolean;
  lastName?: string;
  resentOn?: GQLDateTime;
}

/**
 * InvokeData
 */
export interface GQLSystemInvokeData {
  functionName: string;
  inputArgs?: string;
}

/**
 * InvokeFunctionResponse
 */
export interface GQLSystemInvokeFunctionResponse {
  responseData: string;
}

export interface GQLSystemMemberAccountUpsertDataInput {
  aboutMe?: string;
  addressLine1?: string;
  addressLine2?: string;
  avatar?: GQLGraphQLCreateFileItemInput;
  city?: string;
  companyName?: string;
  country?: string;
  firstName?: string;
  githubUsername?: string;
  isDeveloper?: boolean;
  lastName?: string;
  learningMode?: boolean;
  linkedInUsername?: string;
  projectDescription?: string;
  role?: string;
  state?: string;
  timezone?: string;
  twitterUsername?: string;
  type?: GQLSystemUserType;
  website?: string;
  zipCode?: string;
}

/**
 * GraphQLCreateFileItemInput
 */
export interface GQLGraphQLCreateFileItemInput {
  create?: GQLGraphQLCreateFileCustomInput;
}

/**
 * GraphQLCreateFileCustomInput
 */
export interface GQLGraphQLCreateFileCustomInput {
  fileId?: string;
  filename?: string;
  public?: boolean;
}

/**
 * Member invitation accept input
 */
export interface GQLSystemMemberInvitationAcceptInput {
  accepted: boolean;
  id: string;
}

/**
 * Member Invitation Accept Response
 */
export interface GQLSystemMemberInvitationAcceptResponse {
  success: boolean;
}

/**
 * Cancel members invitations input
 */
export interface GQLSystemMemberInvitationCancelInput {
  email: string;
}

/**
 * Resend member invitation input
 */
export interface GQLSystemMemberInvitationResendInput {
  email: string;
}

/**
 * MemberPaymentDetailsUpdateMutationInput
 */
export interface GQLSystemMemberPaymentDetailsUpdateMutationInput {
  cardToken: string;
}

export const enum GQLNotificationStatusType {
  done = 'done'
}

export interface GQLOrganizationUserInvitationResponse {
  invitationId: string;
}

/**
 * OrganizationPaymentDetailsUpdateMutationInput
 */
export interface GQLSystemOrganizationPaymentDetailsUpdateMutationInput {
  cardToken: string;
  organizationId: string;
}

export interface GQLSystemOrganizationWorkspaceUserShareInfo {
  environmentId: string;
  roles?: Array<string | null>;
}

/**
 * DeployDataResponse
 */
export interface GQLSystemDeployDataResponse {
  buildName: string;
  uploadBuildUrl: string;
  uploadMetaDataUrl: string;
}

/**
 * Table Create Input
 */
export interface GQLSystemTableCreateInput {
  applicationId?: string;
  description?: string;
  displayName?: string;
  name: string;
}

/**
 * Table Delete Input
 */
export interface GQLSystemTableDeleteInput {
  id: string;
}

/**
 * Table Update Input
 */
export interface GQLSystemTableUpdateInput {
  description?: string;
  displayName?: string;
  id: string;
  name?: string;
}

/**
 * View Create Input
 */
export interface GQLSystemViewCreateInput {
  description?: string;
  displayName?: string;
  name: string;
  query: string;
}

/**
 * View Update Input
 */
export interface GQLSystemViewUpdateInput {
  description?: string;
  displayName?: string;
  id: string;
  name?: string;
  query?: string;
}

/**
 * WorkspaceCreateMutationInput
 */
export interface GQLSystemWorkspaceCreateMutationInput {
  billingPlanId?: string;
  description?: string;
  image?: GQLGraphQLCreateFileItemInput;
  kind?: GQLSystemWorkspaceKind;
  name: string;
  organizationId?: string;
}

/**
 * Workspace Kind
 */
export const enum GQLSystemWorkspaceKind {
  frontend = 'frontend',
  general = 'general'
}

export interface GQLSystemWorkspaceCreateResponse {
  description?: string;
  id?: string;
  kind?: string;
  name?: string;
}

/**
 * WorkspaceDeleteMutationInput
 */
export interface GQLSystemWorkspaceDeleteMutationInput {
  id: string;
}

/**
 * WorkspacePaymentDetailsUpdateMutationInput
 */
export interface GQLSystemWorkspacePaymentDetailsUpdateMutationInput {
  cardToken: string;
}

/**
 * WorkspaceUpdateMutationInput
 */
export interface GQLSystemWorkspaceUpdateMutationInput {
  description?: string;
  id: string;
  image?: GQLGraphQLCreateFileItemInput;
  name?: string;
}

export interface GQLSystemWorkspaceUpdateResponse {
  description?: string;
  id?: string;
  image?: GQLGraphQLFileItemResponse;
  name?: string;
}

/**
 * Table Create Input
 */
export interface GQLTableCreateInput {
  applicationId?: string;
  description?: string;
  displayName?: string;
  name: string;
}

/**
 * Table Delete Input
 */
export interface GQLTableDeleteInput {
  id: string;
}

/**
 * Table Update Input
 */
export interface GQLTableUpdateInput {
  description?: string;
  displayName?: string;
  id: string;
  name?: string;
}

/**
 * TechnologyLogo create input
 */
export interface GQLTechnologyLogoCreateInput {
  image?: GQLTechnologyLogoImageRelationInput;
}

/**
 * TechnologyLogo create many input
 */
export interface GQLTechnologyLogoCreateManyInput {
  image?: GQLTechnologyLogoImageManyRelationInput;
}

/**
 * TechnologyLogo relation input
 */
export interface GQLTechnologyLogoImageManyRelationInput {
  connect?: GQLImageKeyFilter;
}

/**
 * TechnologyLogoManyResponse output
 */
export interface GQLTechnologyLogoManyResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLTechnologyLogo>;
}

/**
 * TechnologyLogo delete input
 */
export interface GQLTechnologyLogoDeleteInput {
  force?: boolean;
  id?: string;
}

/**
 * TechnologyLogo update input
 */
export interface GQLTechnologyLogoUpdateInput {
  id?: string;
  image?: GQLTechnologyLogoImageUpdateRelationInput;
}

/**
 * ChangePasswordInput
 */
export interface GQLChangePasswordInput {
  authProfileId: string;
  email: string;
  newPassword: string;
  oldPassword: string;
  refreshToken: string;
}

/**
 * Users create input
 */
export interface GQLUserCreateInput {
  avatar?: GQLUsersAvatarRelationInput;
  email: string;
  firstName?: string;
  lastName?: string;
  roles?: GQLUsersRolesRelationInput;
  status?: string;
  timezone?: string;
}

/**
 * Users create many input
 */
export interface GQLUserCreateManyInput {
  avatar?: GQLUsersAvatarManyRelationInput;
  email: string;
  firstName?: string;
  lastName?: string;
  roles?: GQLUsersRolesManyRelationInput;
  status?: string;
  timezone?: string;
}

/**
 * Users relation input
 */
export interface GQLUsersAvatarManyRelationInput {
  connect?: GQLFileKeyFilter;
}

/**
 * Users relation input
 */
export interface GQLUsersRolesManyRelationInput {
  connect?: Array<GQLRoleKeyFilter>;
}

/**
 * UserManyResponse output
 */
export interface GQLUserManyResponse {

  /**
   * List items count
   */
  count: number;

  /**
   * List items
   */
  items: Array<GQLUser>;
}

/**
 * Users delete input
 */
export interface GQLUserDeleteInput {
  force?: boolean;
  id?: string;
}

/**
 * UserLoginInput
 */
export interface GQLUserLoginInput {
  authProfileId?: string;
  email: string;
  fromInvitation?: string;
  password: string;
}

/**
 * LoginResponse
 */
export interface GQLLoginResponse {
  auth?: GQLAuth;
  success?: boolean;
  workspaces?: Array<GQLWorkspaceInfo>;
}

/**
 * Auth response
 */
export interface GQLAuth {
  idToken?: string;
  refreshToken?: string;
}

/**
 * LoginResponseWorkspace name and id
 */
export interface GQLWorkspaceInfo {
  name?: string;
  workspace?: string;
}

/**
 * PasswordForgotInput
 */
export interface GQLPasswordForgotInput {
  authProfileId: string;
  email: string;
}

/**
 * PasswordForgotConfirmInput
 */
export interface GQLPasswordForgotConfirmInput {
  authProfileId: string;
  code: string;
  email: string;
  newPassword: string;
}

/**
 * RefreshTokenInput
 */
export interface GQLRefreshTokenInput {
  authProfileId?: string;
  email?: string;
  refreshToken: string;
}

/**
 * SignUpResendInput
 */
export interface GQLSignUpResendInput {
  email: string;
}

/**
 * Users update input
 */
export interface GQLUserUpdateByFilterInput {
  email?: Array<GQLUpdateByFilterStringInput | null>;
  firstName?: Array<GQLUpdateByFilterStringInput | null>;
  is8base?: Array<GQLUpdateByFilterBooleanSwitchInput | null>;
  isOwner?: Array<GQLUpdateByFilterBooleanSwitchInput | null>;
  lastName?: Array<GQLUpdateByFilterStringInput | null>;
  origin?: Array<GQLUpdateByFilterStringSwitchInput | null>;
  status?: Array<GQLUpdateByFilterStringSwitchInput | null>;
  timezone?: Array<GQLUpdateByFilterStringInput | null>;
}

export interface GQLUpdateByFilterStringSwitchInput {
  set?: string;
}

/**
 * VerificationEmailResendInput
 */
export interface GQLVerificationEmailResendInput {
  email: string;
}

/**
 * View Create Input
 */
export interface GQLViewCreateInput {
  description?: string;
  displayName?: string;
  name: string;
  query: string;
}

/**
 * View Update Input
 */
export interface GQLViewUpdateInput {
  description?: string;
  displayName?: string;
  id: string;
  name?: string;
  query?: string;
}

/**
 * WorkspaceCreateMutationInput
 */
export interface GQLWorkspaceCreateMutationInput {
  billingPlanId?: string;
  description?: string;
  image?: GQLGraphQLCreateFileItemInput;
  kind?: GQLWorkspaceKind;
  name: string;
  organizationId?: string;
}

/**
 * Workspace Kind
 */
export const enum GQLWorkspaceKind {
  frontend = 'frontend',
  general = 'general'
}

export interface GQLWorkspaceCreateResponse {
  description?: string;
  id?: string;
  kind?: string;
  name?: string;
}

/**
 * WorkspaceDeleteMutationInput
 */
export interface GQLWorkspaceDeleteMutationInput {
  id: string;
}

/**
 * WorkspaceUpdateMutationInput
 */
export interface GQLWorkspaceUpdateMutationInput {
  description?: string;
  id: string;
  image?: GQLGraphQLCreateFileItemInput;
  name?: string;
}

export interface GQLWorkspaceUpdateResponse {
  description?: string;
  id?: string;
  image?: GQLGraphQLFileItemResponse;
  name?: string;
}

export interface GQLSubscription {
  ApiTokens?: GQLApiTokenPayload;
  AuthenticationProfiles?: GQLAuthenticationProfilePayload;
  AuthenticationSettings?: GQLAuthenticationSettingPayload;
  Blog?: GQLBlogPayload;
  BlogUser?: GQLBlogUserPayload;
  Comment?: GQLCommentPayload;
  Course?: GQLCoursePayload;
  CourseUrl?: GQLCourseUrlPayload;
  EnvironmentVariables?: GQLEnvironmentVariablePayload;
  Files?: GQLFilePayload;
  Image?: GQLImagePayload;
  Permissions?: GQLPermissionPayload;
  Person?: GQLPersonPayload;
  Roles?: GQLRolePayload;
  School?: GQLSchoolPayload;
  Settings?: GQLSettingPayload;
  TechnologyLogo?: GQLTechnologyLogoPayload;
  Users?: GQLUserPayload;
}

/**
 * ApiTokens subscription filter
 */
export interface GQLApiTokenSubscriptionFilter {
  mutation_in?: Array<GQLMutationType | null>;
  node?: GQLApiTokenFilter;
  updatedFields?: GQLUpdatedFieldsFilter;
}

export const enum GQLMutationType {
  create = 'create',
  delete = 'delete',
  destroy = 'destroy',
  update = 'update'
}

/**
 * UpdatedFieldsFilter
 */
export interface GQLUpdatedFieldsFilter {
  contains?: Array<string | null>;
  every?: Array<string | null>;
}

/**
 * ApiTokens subscription payload
 */
export interface GQLApiTokenPayload {
  mutation: GQLMutationType;
  node?: GQLApiToken;
  previousValues?: GQLApiToken;
  updatedFields?: Array<string | null>;
}

/**
 * AuthenticationProfiles subscription filter
 */
export interface GQLAuthenticationProfileSubscriptionFilter {
  mutation_in?: Array<GQLMutationType | null>;
  node?: GQLAuthenticationProfileFilter;
  updatedFields?: GQLUpdatedFieldsFilter;
}

/**
 * AuthenticationProfiles subscription payload
 */
export interface GQLAuthenticationProfilePayload {
  mutation: GQLMutationType;
  node?: GQLAuthenticationProfile;
  previousValues?: GQLAuthenticationProfile;
  updatedFields?: Array<string | null>;
}

/**
 * AuthenticationSettings subscription filter
 */
export interface GQLAuthenticationSettingSubscriptionFilter {
  mutation_in?: Array<GQLMutationType | null>;
  node?: GQLAuthenticationSettingFilter;
  updatedFields?: GQLUpdatedFieldsFilter;
}

export interface GQLAuthenticationSettingFilter {
  AND?: Array<GQLAuthenticationSettingFilter>;
  OR?: Array<GQLAuthenticationSettingFilter>;
  _fullText?: string;
  createdAt?: GQLDateTimePredicate;
  createdBy?: GQLUserFilter;
  deletedAt?: GQLIntPredicate;
  updatedAt?: GQLDateTimePredicate;
}

/**
 * AuthenticationSettings subscription payload
 */
export interface GQLAuthenticationSettingPayload {
  mutation: GQLMutationType;
  node?: GQLAuthenticationSetting;
  previousValues?: GQLAuthenticationSetting;
  updatedFields?: Array<string | null>;
}

/**
 * Blog subscription filter
 */
export interface GQLBlogSubscriptionFilter {
  mutation_in?: Array<GQLMutationType | null>;
  node?: GQLBlogFilter;
  updatedFields?: GQLUpdatedFieldsFilter;
}

/**
 * Blog subscription payload
 */
export interface GQLBlogPayload {
  mutation: GQLMutationType;
  node?: GQLBlog;
  previousValues?: GQLBlog;
  updatedFields?: Array<string | null>;
}

/**
 * BlogUser subscription filter
 */
export interface GQLBlogUserSubscriptionFilter {
  mutation_in?: Array<GQLMutationType | null>;
  node?: GQLBlogUserFilter;
  updatedFields?: GQLUpdatedFieldsFilter;
}

/**
 * BlogUser subscription payload
 */
export interface GQLBlogUserPayload {
  mutation: GQLMutationType;
  node?: GQLBlogUser;
  previousValues?: GQLBlogUser;
  updatedFields?: Array<string | null>;
}

/**
 * Comment subscription filter
 */
export interface GQLCommentSubscriptionFilter {
  mutation_in?: Array<GQLMutationType | null>;
  node?: GQLCommentFilter;
  updatedFields?: GQLUpdatedFieldsFilter;
}

/**
 * Comment subscription payload
 */
export interface GQLCommentPayload {
  mutation: GQLMutationType;
  node?: GQLComment;
  previousValues?: GQLComment;
  updatedFields?: Array<string | null>;
}

/**
 * Course subscription filter
 */
export interface GQLCourseSubscriptionFilter {
  mutation_in?: Array<GQLMutationType | null>;
  node?: GQLCourseFilter;
  updatedFields?: GQLUpdatedFieldsFilter;
}

/**
 * Course subscription payload
 */
export interface GQLCoursePayload {
  mutation: GQLMutationType;
  node?: GQLCourse;
  previousValues?: GQLCourse;
  updatedFields?: Array<string | null>;
}

/**
 * CourseUrl subscription filter
 */
export interface GQLCourseUrlSubscriptionFilter {
  mutation_in?: Array<GQLMutationType | null>;
  node?: GQLCourseUrlFilter;
  updatedFields?: GQLUpdatedFieldsFilter;
}

/**
 * CourseUrl subscription payload
 */
export interface GQLCourseUrlPayload {
  mutation: GQLMutationType;
  node?: GQLCourseUrl;
  previousValues?: GQLCourseUrl;
  updatedFields?: Array<string | null>;
}

/**
 * EnvironmentVariables subscription filter
 */
export interface GQLEnvironmentVariableSubscriptionFilter {
  mutation_in?: Array<GQLMutationType | null>;
  node?: GQLEnvironmentVariableFilter;
  updatedFields?: GQLUpdatedFieldsFilter;
}

/**
 * EnvironmentVariables subscription payload
 */
export interface GQLEnvironmentVariablePayload {
  mutation: GQLMutationType;
  node?: GQLEnvironmentVariable;
  previousValues?: GQLEnvironmentVariable;
  updatedFields?: Array<string | null>;
}

/**
 * Files subscription filter
 */
export interface GQLFileSubscriptionFilter {
  mutation_in?: Array<GQLMutationType | null>;
  node?: GQLFileFilter;
  updatedFields?: GQLUpdatedFieldsFilter;
}

/**
 * Files subscription payload
 */
export interface GQLFilePayload {
  mutation: GQLMutationType;
  node?: GQLFile;
  previousValues?: GQLFile;
  updatedFields?: Array<string | null>;
}

/**
 * Image subscription filter
 */
export interface GQLImageSubscriptionFilter {
  mutation_in?: Array<GQLMutationType | null>;
  node?: GQLImageFilter;
  updatedFields?: GQLUpdatedFieldsFilter;
}

/**
 * Image subscription payload
 */
export interface GQLImagePayload {
  mutation: GQLMutationType;
  node?: GQLImage;
  previousValues?: GQLImage;
  updatedFields?: Array<string | null>;
}

/**
 * Permissions subscription filter
 */
export interface GQLPermissionSubscriptionFilter {
  mutation_in?: Array<GQLMutationType | null>;
  node?: GQLPermissionFilter;
  updatedFields?: GQLUpdatedFieldsFilter;
}

/**
 * Permissions subscription payload
 */
export interface GQLPermissionPayload {
  mutation: GQLMutationType;
  node?: GQLPermission;
  previousValues?: GQLPermission;
  updatedFields?: Array<string | null>;
}

/**
 * Person subscription filter
 */
export interface GQLPersonSubscriptionFilter {
  mutation_in?: Array<GQLMutationType | null>;
  node?: GQLPersonFilter;
  updatedFields?: GQLUpdatedFieldsFilter;
}

/**
 * Person subscription payload
 */
export interface GQLPersonPayload {
  mutation: GQLMutationType;
  node?: GQLPerson;
  previousValues?: GQLPerson;
  updatedFields?: Array<string | null>;
}

/**
 * Roles subscription filter
 */
export interface GQLRoleSubscriptionFilter {
  mutation_in?: Array<GQLMutationType | null>;
  node?: GQLRoleFilter;
  updatedFields?: GQLUpdatedFieldsFilter;
}

/**
 * Roles subscription payload
 */
export interface GQLRolePayload {
  mutation: GQLMutationType;
  node?: GQLRole;
  previousValues?: GQLRole;
  updatedFields?: Array<string | null>;
}

/**
 * School subscription filter
 */
export interface GQLSchoolSubscriptionFilter {
  mutation_in?: Array<GQLMutationType | null>;
  node?: GQLSchoolFilter;
  updatedFields?: GQLUpdatedFieldsFilter;
}

/**
 * School subscription payload
 */
export interface GQLSchoolPayload {
  mutation: GQLMutationType;
  node?: GQLSchool;
  previousValues?: GQLSchool;
  updatedFields?: Array<string | null>;
}

/**
 * Settings subscription filter
 */
export interface GQLSettingSubscriptionFilter {
  mutation_in?: Array<GQLMutationType | null>;
  node?: GQLSettingFilter;
  updatedFields?: GQLUpdatedFieldsFilter;
}

/**
 * Settings subscription payload
 */
export interface GQLSettingPayload {
  mutation: GQLMutationType;
  node?: GQLSetting;
  previousValues?: GQLSetting;
  updatedFields?: Array<string | null>;
}

/**
 * TechnologyLogo subscription filter
 */
export interface GQLTechnologyLogoSubscriptionFilter {
  mutation_in?: Array<GQLMutationType | null>;
  node?: GQLTechnologyLogoFilter;
  updatedFields?: GQLUpdatedFieldsFilter;
}

/**
 * TechnologyLogo subscription payload
 */
export interface GQLTechnologyLogoPayload {
  mutation: GQLMutationType;
  node?: GQLTechnologyLogo;
  previousValues?: GQLTechnologyLogo;
  updatedFields?: Array<string | null>;
}

/**
 * Users subscription filter
 */
export interface GQLUserSubscriptionFilter {
  mutation_in?: Array<GQLMutationType | null>;
  node?: GQLUserFilter;
  updatedFields?: GQLUpdatedFieldsFilter;
}

/**
 * Users subscription payload
 */
export interface GQLUserPayload {
  mutation: GQLMutationType;
  node?: GQLUser;
  previousValues?: GQLUser;
  updatedFields?: Array<string | null>;
}

/**
 * FunctionResolverInfo
 */
export interface GQLFunctionResolverInfo extends GQLFunctionInfo {
  application?: GQLApplication;
  description?: string;
  functionType: GQLFunctionType;
  gqlType: string;
  name: string;
}

/**
 * FunctionTaskInfo
 */
export interface GQLFunctionTaskInfo extends GQLFunctionInfo {
  application?: GQLApplication;
  description?: string;
  functionType: GQLFunctionType;
  name: string;
  scheduleExpression?: string;
}

/**
 * FunctionTriggerInfo
 */
export interface GQLFunctionTriggerInfo extends GQLFunctionInfo {
  application?: GQLApplication;
  description?: string;
  functionType: GQLFunctionType;
  name: string;
  operation: string;
  tableName: string;
  type: string;
}

/**
 * FunctionWebhookInfo
 */
export interface GQLFunctionWebhookInfo extends GQLFunctionInfo {
  application?: GQLApplication;
  description?: string;
  functionType: GQLFunctionType;
  httpMethod: string;
  name: string;
  workspaceFullPath: string;
  workspaceRelativePath: string;
}

/**
 * ImportedTable
 */
export interface GQLImportedTable {
  id: string;
  name: string;
}

/**
 * MissingRelation
 */
export interface GQLMissingRelation {
  table: string;
}

/**
 * FunctionResolverInfo
 */
export interface GQLSystemFunctionResolverInfo extends GQLSystemFunctionInfo {
  application?: GQLSystemApplication;
  description?: string;
  functionType: GQLSystemFunctionType;
  gqlType: string;
  name: string;
}

/**
 * FunctionTaskInfo
 */
export interface GQLSystemFunctionTaskInfo extends GQLSystemFunctionInfo {
  application?: GQLSystemApplication;
  description?: string;
  functionType: GQLSystemFunctionType;
  name: string;
  scheduleExpression?: string;
}

/**
 * FunctionTriggerInfo
 */
export interface GQLSystemFunctionTriggerInfo extends GQLSystemFunctionInfo {
  application?: GQLSystemApplication;
  description?: string;
  functionType: GQLSystemFunctionType;
  name: string;
  operation: string;
  tableName: string;
  type: string;
}

/**
 * FunctionWebhookInfo
 */
export interface GQLSystemFunctionWebhookInfo extends GQLSystemFunctionInfo {
  application?: GQLSystemApplication;
  description?: string;
  functionType: GQLSystemFunctionType;
  httpMethod: string;
  name: string;
  workspaceFullPath: string;
  workspaceRelativePath: string;
}

/**
 * Date Type Format Enum
 */
export const enum GQLDateTypeFormatEnum {
  DATE = 'DATE',
  DATETIME = 'DATETIME'
}

/**
 * File Type Format Enum
 */
export const enum GQLFileTypeFormatEnum {
  FILE = 'FILE',
  IMAGE = 'IMAGE'
}

/**
 * Number Type Format Enum
 */
export const enum GQLNumberTypeFormatEnum {
  CURRENCY = 'CURRENCY',
  FRACTION = 'FRACTION',
  NUMBER = 'NUMBER',
  PERCENTAGE = 'PERCENTAGE',
  SCIENTIFIC = 'SCIENTIFIC'
}

/**
 * Smart Type Format Enum
 */
export const enum GQLSmartTypeFormatEnum {
  ADDRESS = 'ADDRESS',
  PHONE = 'PHONE'
}

/**
 * Switch Type Format Enum
 */
export const enum GQLSwitchTypeFormatEnum {
  ACTIVE_INACTIVE = 'ACTIVE_INACTIVE',
  CUSTOM = 'CUSTOM',
  HIGH_LOW = 'HIGH_LOW',
  ON_OFF = 'ON_OFF',
  TRUE_FALSE = 'TRUE_FALSE',
  YES_NO = 'YES_NO'
}

/**
 * Date Type Format Enum
 */
export const enum GQLSystemDateTypeFormatEnum {
  DATE = 'DATE',
  DATETIME = 'DATETIME'
}

/**
 * File Type Format Enum
 */
export const enum GQLSystemFileTypeFormatEnum {
  FILE = 'FILE',
  IMAGE = 'IMAGE'
}

/**
 * Number Type Format Enum
 */
export const enum GQLSystemNumberTypeFormatEnum {
  CURRENCY = 'CURRENCY',
  FRACTION = 'FRACTION',
  NUMBER = 'NUMBER',
  PERCENTAGE = 'PERCENTAGE',
  SCIENTIFIC = 'SCIENTIFIC'
}

/**
 * Smart Type Format Enum
 */
export const enum GQLSystemSmartTypeFormatEnum {
  ADDRESS = 'ADDRESS',
  PHONE = 'PHONE'
}

/**
 * Switch Type Format Enum
 */
export const enum GQLSystemSwitchTypeFormatEnum {
  ACTIVE_INACTIVE = 'ACTIVE_INACTIVE',
  CUSTOM = 'CUSTOM',
  HIGH_LOW = 'HIGH_LOW',
  ON_OFF = 'ON_OFF',
  TRUE_FALSE = 'TRUE_FALSE',
  YES_NO = 'YES_NO'
}

/**
 * Text Type Format Enum
 */
export const enum GQLSystemTextTypeFormatEnum {
  EIN = 'EIN',
  EMAIL = 'EMAIL',
  HTML = 'HTML',
  MARKDOWN = 'MARKDOWN',
  NAME = 'NAME',
  UNFORMATTED = 'UNFORMATTED'
}

/**
 * Text Type Format Enum
 */
export const enum GQLTextTypeFormatEnum {
  EIN = 'EIN',
  EMAIL = 'EMAIL',
  HTML = 'HTML',
  MARKDOWN = 'MARKDOWN',
  NAME = 'NAME',
  UNFORMATTED = 'UNFORMATTED'
}

/**
 * A time string at UTC, such as `16:15:30Z`, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
 */
export type GQLTime = any;

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  ApiToken?: GQLApiTokenTypeResolver;
  DateTime?: GraphQLScalarType;
  User?: GQLUserTypeResolver;
  File?: GQLFileTypeResolver;
  JSON?: GraphQLScalarType;
  BigInt?: GraphQLScalarType;
  Date?: GraphQLScalarType;
  ImageListResponse?: GQLImageListResponseTypeResolver;
  GroupByResponse?: GQLGroupByResponseTypeResolver;
  ApiTokenListResponse?: GQLApiTokenListResponseTypeResolver;
  AuthenticationProfileListResponse?: GQLAuthenticationProfileListResponseTypeResolver;
  AuthenticationProfile?: GQLAuthenticationProfileTypeResolver;
  AuthenticationProfileAttributes?: {
    __resolveType: GQLAuthenticationProfileAttributesTypeResolver
  };

  CognitoAuthProfileAttributes?: GQLCognitoAuthProfileAttributesTypeResolver;
  RoleListResponse?: GQLRoleListResponseTypeResolver;
  Role?: GQLRoleTypeResolver;
  PermissionListResponse?: GQLPermissionListResponseTypeResolver;
  Permission?: GQLPermissionTypeResolver;
  UserListResponse?: GQLUserListResponseTypeResolver;
  BlogListResponse?: GQLBlogListResponseTypeResolver;
  Blog?: GQLBlogTypeResolver;
  PersonListResponse?: GQLPersonListResponseTypeResolver;
  Person?: GQLPersonTypeResolver;
  CourseListResponse?: GQLCourseListResponseTypeResolver;
  Course?: GQLCourseTypeResolver;
  CourseUrlListResponse?: GQLCourseUrlListResponseTypeResolver;
  CourseUrl?: GQLCourseUrlTypeResolver;
  School?: GQLSchoolTypeResolver;
  Image?: GQLImageTypeResolver;
  TechnologyLogo?: GQLTechnologyLogoTypeResolver;
  BlogUserListResponse?: GQLBlogUserListResponseTypeResolver;
  BlogUser?: GQLBlogUserTypeResolver;
  CommentListResponse?: GQLCommentListResponseTypeResolver;
  Comment?: GQLCommentTypeResolver;
  EnvironmentVariableListResponse?: GQLEnvironmentVariableListResponseTypeResolver;
  EnvironmentVariable?: GQLEnvironmentVariableTypeResolver;
  FileListResponse?: GQLFileListResponseTypeResolver;
  SchoolListResponse?: GQLSchoolListResponseTypeResolver;
  TechnologyLogoListResponse?: GQLTechnologyLogoListResponseTypeResolver;
  SettingListResponse?: GQLSettingListResponseTypeResolver;
  Setting?: GQLSettingTypeResolver;
  UserPermissionList?: GQLUserPermissionListTypeResolver;
  UserPermission?: GQLUserPermissionTypeResolver;
  Application?: GQLApplicationTypeResolver;
  ApplicationListResponse?: GQLApplicationListResponseTypeResolver;
  AsyncSessionStatusResponse?: GQLAsyncSessionStatusResponseTypeResolver;
  AuthenticationSetting?: GQLAuthenticationSettingTypeResolver;
  AuthenticationProfileConnectionOptions?: GQLAuthenticationProfileConnectionOptionsTypeResolver;
  FacebookOptions?: GQLFacebookOptionsTypeResolver;
  GithubOptions?: GQLGithubOptionsTypeResolver;
  GoogleOptions?: GQLGoogleOptionsTypeResolver;
  BillingCurrentPlanResponse?: GQLBillingCurrentPlanResponseTypeResolver;
  BillingNextPlanResponse?: GQLBillingNextPlanResponseTypeResolver;
  BillingDetailsResponse?: GQLBillingDetailsResponseTypeResolver;
  BillingInvoicesListResponse?: GQLBillingInvoicesListResponseTypeResolver;
  BillingInvoiceItem?: GQLBillingInvoiceItemTypeResolver;
  BillingInvoiceItemOrganizationInfo?: GQLBillingInvoiceItemOrganizationInfoTypeResolver;
  BillingInvoiceItemPlanInfo?: GQLBillingInvoiceItemPlanInfoTypeResolver;
  BillingInvoiceItemWorkspaceInfo?: GQLBillingInvoiceItemWorkspaceInfoTypeResolver;
  BillingMetricUsageQuotasListResponse?: GQLBillingMetricUsageQuotasListResponseTypeResolver;
  BillingMetricUsageQuotaItem?: GQLBillingMetricUsageQuotaItemTypeResolver;
  BillingLimitMetricItem?: GQLBillingLimitMetricItemTypeResolver;
  BillingMetricUsagesListResponse?: GQLBillingMetricUsagesListResponseTypeResolver;
  BillingMetricUsageItem?: GQLBillingMetricUsageItemTypeResolver;
  DeployStatusResult?: GQLDeployStatusResultTypeResolver;
  FileUploadInfoResponse?: GQLFileUploadInfoResponseTypeResolver;
  FunctionListResponse?: GQLFunctionListResponseTypeResolver;
  FunctionInfo?: {
    __resolveType: GQLFunctionInfoTypeResolver
  };

  WorkspaceTransferItem?: GQLWorkspaceTransferItemTypeResolver;
  SystemQuery?: GQLSystemQueryTypeResolver;
  SystemApplication?: GQLSystemApplicationTypeResolver;
  SystemApplicationListResponse?: GQLSystemApplicationListResponseTypeResolver;
  SystemBillingCurrentPlanResponse?: GQLSystemBillingCurrentPlanResponseTypeResolver;
  SystemBillingNextPlanResponse?: GQLSystemBillingNextPlanResponseTypeResolver;
  SystemBillingDetailsResponse?: GQLSystemBillingDetailsResponseTypeResolver;
  SystemBillingInvoicesListResponse?: GQLSystemBillingInvoicesListResponseTypeResolver;
  SystemBillingInvoiceItem?: GQLSystemBillingInvoiceItemTypeResolver;
  SystemBillingInvoiceItemOrganizationInfo?: GQLSystemBillingInvoiceItemOrganizationInfoTypeResolver;
  SystemBillingInvoiceItemPlanInfo?: GQLSystemBillingInvoiceItemPlanInfoTypeResolver;
  SystemBillingInvoiceItemWorkspaceInfo?: GQLSystemBillingInvoiceItemWorkspaceInfoTypeResolver;
  SystemBillingMetricUsageQuotasListResponse?: GQLSystemBillingMetricUsageQuotasListResponseTypeResolver;
  SystemBillingMetricUsageQuotaItem?: GQLSystemBillingMetricUsageQuotaItemTypeResolver;
  SystemBillingLimitMetricItem?: GQLSystemBillingLimitMetricItemTypeResolver;
  SystemBillingMetricUsagesListResponse?: GQLSystemBillingMetricUsagesListResponseTypeResolver;
  SystemBillingMetricUsageItem?: GQLSystemBillingMetricUsageItemTypeResolver;
  SystemGenerateEnvironmentOutput?: GQLSystemGenerateEnvironmentOutputTypeResolver;
  SystemPlanEnvironmentOutput?: GQLSystemPlanEnvironmentOutputTypeResolver;
  SystemCiStatusOutput?: GQLSystemCiStatusOutputTypeResolver;
  SystemDeployStatusResult?: GQLSystemDeployStatusResultTypeResolver;
  SystemEnvironmentBackupListResponse?: GQLSystemEnvironmentBackupListResponseTypeResolver;
  EnvironmentBackupItem?: GQLEnvironmentBackupItemTypeResolver;
  SystemEnvironmentMember?: GQLSystemEnvironmentMemberTypeResolver;
  SystemEnvironmentMemberAvatar?: GQLSystemEnvironmentMemberAvatarTypeResolver;
  SystemEnvironmentMemberPermissionsList?: GQLSystemEnvironmentMemberPermissionsListTypeResolver;
  SystemEnvironmentMemberPermission?: GQLSystemEnvironmentMemberPermissionTypeResolver;
  SystemEnvironmentMemberRolesList?: GQLSystemEnvironmentMemberRolesListTypeResolver;
  SystemEnvironmentMemberRole?: GQLSystemEnvironmentMemberRoleTypeResolver;
  SystemEnvironmentMembersListResponse?: GQLSystemEnvironmentMembersListResponseTypeResolver;
  SystemEnvironmentSettings?: GQLSystemEnvironmentSettingsTypeResolver;
  SystemEnvironmentsListResponse?: GQLSystemEnvironmentsListResponseTypeResolver;
  EnvironmentItem?: GQLEnvironmentItemTypeResolver;
  SystemFunctionListResponse?: GQLSystemFunctionListResponseTypeResolver;
  SystemFunctionInfo?: {
    __resolveType: GQLSystemFunctionInfoTypeResolver
  };

  SystemEnvironmentRoleList?: GQLSystemEnvironmentRoleListTypeResolver;
  SystemEnvironmentRoleBaseInfo?: GQLSystemEnvironmentRoleBaseInfoTypeResolver;
  SystemFrontendPlanIdItem?: GQLSystemFrontendPlanIdItemTypeResolver;
  SystemInboxEventsListResponse?: GQLSystemInboxEventsListResponseTypeResolver;
  SystemInboxEventItem?: GQLSystemInboxEventItemTypeResolver;
  SystemInboxEventDetailsUnion?: {
    __resolveType: GQLSystemInboxEventDetailsUnionTypeResolver
  };

  SystemInboxEventEnvironmentInvitationDetails?: GQLSystemInboxEventEnvironmentInvitationDetailsTypeResolver;
  SystemInboxEventInvitedBy?: GQLSystemInboxEventInvitedByTypeResolver;
  GraphQLFileItemResponse?: GQLGraphQLFileItemResponseTypeResolver;
  SystemInboxEventWorkspace?: GQLSystemInboxEventWorkspaceTypeResolver;
  SystemInboxEventNotificationDetailsType?: GQLSystemInboxEventNotificationDetailsTypeTypeResolver;
  SystemInboxEventOrganizationInvitationDetails?: GQLSystemInboxEventOrganizationInvitationDetailsTypeResolver;
  SystemInboxEventOrganization?: GQLSystemInboxEventOrganizationTypeResolver;
  IntrospectionQueryResponse?: GQLIntrospectionQueryResponseTypeResolver;
  SystemFunctionLogEntry?: GQLSystemFunctionLogEntryTypeResolver;
  SystemMemberAccountInfo?: GQLSystemMemberAccountInfoTypeResolver;
  SystemMemberInvitation?: GQLSystemMemberInvitationTypeResolver;
  SystemInvitedByName?: GQLSystemInvitedByNameTypeResolver;
  SystemMemberInvitationsList?: GQLSystemMemberInvitationsListTypeResolver;
  SystemPaymentDetailsResponse?: GQLSystemPaymentDetailsResponseTypeResolver;
  SystemOrganizationItem?: GQLSystemOrganizationItemTypeResolver;
  SystemOrganizationItemImage?: GQLSystemOrganizationItemImageTypeResolver;
  SystemBillingPlanBaseScalarInfo?: GQLSystemBillingPlanBaseScalarInfoTypeResolver;
  SystemOrganizationUserInfo?: GQLSystemOrganizationUserInfoTypeResolver;
  SystemOrganizationWorkspaceItem?: GQLSystemOrganizationWorkspaceItemTypeResolver;
  SystemOrganizationBaseItem?: GQLSystemOrganizationBaseItemTypeResolver;
  SystemOrganizationInvitation?: GQLSystemOrganizationInvitationTypeResolver;
  SystemOrganizationWorkspaceAddSession?: GQLSystemOrganizationWorkspaceAddSessionTypeResolver;
  SystemOrganizationUserBaseInfo?: GQLSystemOrganizationUserBaseInfoTypeResolver;
  SystemOrganizationsListAllResponse?: GQLSystemOrganizationsListAllResponseTypeResolver;
  SystemOrganizationsListResponse?: GQLSystemOrganizationsListResponseTypeResolver;
  SystemTable?: GQLSystemTableTypeResolver;
  SystemTableAttributes?: {
    __resolveType: GQLSystemTableAttributesTypeResolver
  };

  SystemViewAttributes?: GQLSystemViewAttributesTypeResolver;
  SystemTableDataFeatures?: GQLSystemTableDataFeaturesTypeResolver;
  SystemTableField?: GQLSystemTableFieldTypeResolver;
  SystemFieldDataFeatures?: GQLSystemFieldDataFeaturesTypeResolver;
  SystemFieldTypeAttributes?: {
    __resolveType: GQLSystemFieldTypeAttributesTypeResolver
  };

  SystemDateFieldTypeAttributes?: GQLSystemDateFieldTypeAttributesTypeResolver;
  SystemFileFieldTypeAttributes?: GQLSystemFileFieldTypeAttributesTypeResolver;
  SystemGeoFieldTypeAttributes?: GQLSystemGeoFieldTypeAttributesTypeResolver;
  SystemMissingRelationFieldTypeAttributes?: GQLSystemMissingRelationFieldTypeAttributesTypeResolver;
  SystemNumberFieldTypeAttributes?: GQLSystemNumberFieldTypeAttributesTypeResolver;
  SystemSmartFieldTypeAttributes?: GQLSystemSmartFieldTypeAttributesTypeResolver;
  SystemCustomTableField?: GQLSystemCustomTableFieldTypeResolver;
  SystemSwitchFieldTypeAttributes?: GQLSystemSwitchFieldTypeAttributesTypeResolver;
  SystemTextFieldTypeAttributes?: GQLSystemTextFieldTypeAttributesTypeResolver;
  SystemUUIDFieldTypeAttributes?: GQLSystemUUIDFieldTypeAttributesTypeResolver;
  SystemSchemaOrigin?: GQLSystemSchemaOriginTypeResolver;
  SystemRelation?: GQLSystemRelationTypeResolver;
  SystemFieldSchemaFeatures?: GQLSystemFieldSchemaFeaturesTypeResolver;
  SystemTableIndex?: GQLSystemTableIndexTypeResolver;
  SystemTableIndexColumn?: GQLSystemTableIndexColumnTypeResolver;
  SystemTableSchemaFeatures?: GQLSystemTableSchemaFeaturesTypeResolver;
  SystemTableSchemaCreateFeatures?: GQLSystemTableSchemaCreateFeaturesTypeResolver;
  SystemTableSchemaMetaFieldFeatures?: GQLSystemTableSchemaMetaFieldFeaturesTypeResolver;
  SystemTableListResponse?: GQLSystemTableListResponseTypeResolver;
  SystemUserBillingConfigurationResponse?: GQLSystemUserBillingConfigurationResponseTypeResolver;
  SystemBillingPlanBaseInfo?: GQLSystemBillingPlanBaseInfoTypeResolver;
  SystemBillingPlanLimitMetricItem?: GQLSystemBillingPlanLimitMetricItemTypeResolver;
  SystemUserInvitationList?: GQLSystemUserInvitationListTypeResolver;
  SystemUserInvitationDetails?: GQLSystemUserInvitationDetailsTypeResolver;
  SystemWorkspaceListResponse?: GQLSystemWorkspaceListResponseTypeResolver;
  SystemWorkspaceItem?: GQLSystemWorkspaceItemTypeResolver;
  SystemWorkspaceImage?: GQLSystemWorkspaceImageTypeResolver;
  Table?: GQLTableTypeResolver;
  TableAttributes?: {
    __resolveType: GQLTableAttributesTypeResolver
  };

  ViewAttributes?: GQLViewAttributesTypeResolver;
  TableDataFeatures?: GQLTableDataFeaturesTypeResolver;
  TableField?: GQLTableFieldTypeResolver;
  FieldDataFeatures?: GQLFieldDataFeaturesTypeResolver;
  FieldTypeAttributes?: {
    __resolveType: GQLFieldTypeAttributesTypeResolver
  };

  DateFieldTypeAttributes?: GQLDateFieldTypeAttributesTypeResolver;
  FileFieldTypeAttributes?: GQLFileFieldTypeAttributesTypeResolver;
  GeoFieldTypeAttributes?: GQLGeoFieldTypeAttributesTypeResolver;
  MissingRelationFieldTypeAttributes?: GQLMissingRelationFieldTypeAttributesTypeResolver;
  NumberFieldTypeAttributes?: GQLNumberFieldTypeAttributesTypeResolver;
  SmartFieldTypeAttributes?: GQLSmartFieldTypeAttributesTypeResolver;
  CustomTableField?: GQLCustomTableFieldTypeResolver;
  SwitchFieldTypeAttributes?: GQLSwitchFieldTypeAttributesTypeResolver;
  TextFieldTypeAttributes?: GQLTextFieldTypeAttributesTypeResolver;
  UUIDFieldTypeAttributes?: GQLUUIDFieldTypeAttributesTypeResolver;
  SchemaOrigin?: GQLSchemaOriginTypeResolver;
  Relation?: GQLRelationTypeResolver;
  FieldSchemaFeatures?: GQLFieldSchemaFeaturesTypeResolver;
  TableIndex?: GQLTableIndexTypeResolver;
  TableIndexColumn?: GQLTableIndexColumnTypeResolver;
  TableSchemaFeatures?: GQLTableSchemaFeaturesTypeResolver;
  TableSchemaCreateFeatures?: GQLTableSchemaCreateFeaturesTypeResolver;
  TableSchemaMetaFieldFeatures?: GQLTableSchemaMetaFieldFeaturesTypeResolver;
  TableListResponse?: GQLTableListResponseTypeResolver;
  UserBillingConfigurationResponse?: GQLUserBillingConfigurationResponseTypeResolver;
  BillingPlanBaseInfo?: GQLBillingPlanBaseInfoTypeResolver;
  BillingPlanLimitMetricItem?: GQLBillingPlanLimitMetricItemTypeResolver;
  UserInvitationList?: GQLUserInvitationListTypeResolver;
  UserInvitationDetails?: GQLUserInvitationDetailsTypeResolver;
  InvitedByName?: GQLInvitedByNameTypeResolver;
  WorkspaceListResponse?: GQLWorkspaceListResponseTypeResolver;
  WorkspaceItem?: GQLWorkspaceItemTypeResolver;
  WorkspaceImage?: GQLWorkspaceImageTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  ApiTokenResponse?: GQLApiTokenResponseTypeResolver;
  SuccessResponse?: GQLSuccessResponseTypeResolver;
  ApiTokenManyResponse?: GQLApiTokenManyResponseTypeResolver;
  AuthenticationProfileManyResponse?: GQLAuthenticationProfileManyResponseTypeResolver;
  BlogManyResponse?: GQLBlogManyResponseTypeResolver;
  BlogUserManyResponse?: GQLBlogUserManyResponseTypeResolver;
  CommentManyResponse?: GQLCommentManyResponseTypeResolver;
  CourseManyResponse?: GQLCourseManyResponseTypeResolver;
  CourseUrlManyResponse?: GQLCourseUrlManyResponseTypeResolver;
  EnvironmentVariableManyResponse?: GQLEnvironmentVariableManyResponseTypeResolver;
  FileManyResponse?: GQLFileManyResponseTypeResolver;
  ImageManyResponse?: GQLImageManyResponseTypeResolver;
  InvokeFunctionResponse?: GQLInvokeFunctionResponseTypeResolver;
  PersonManyResponse?: GQLPersonManyResponseTypeResolver;
  DeployDataResponse?: GQLDeployDataResponseTypeResolver;
  RoleManyResponse?: GQLRoleManyResponseTypeResolver;
  SchoolManyResponse?: GQLSchoolManyResponseTypeResolver;
  SystemMutation?: GQLSystemMutationTypeResolver;
  AsyncSession?: GQLAsyncSessionTypeResolver;
  SystemTeamInvitationDetails?: GQLSystemTeamInvitationDetailsTypeResolver;
  SystemInvokeFunctionResponse?: GQLSystemInvokeFunctionResponseTypeResolver;
  SystemMemberInvitationAcceptResponse?: GQLSystemMemberInvitationAcceptResponseTypeResolver;
  OrganizationUserInvitationResponse?: GQLOrganizationUserInvitationResponseTypeResolver;
  SystemDeployDataResponse?: GQLSystemDeployDataResponseTypeResolver;
  SystemWorkspaceCreateResponse?: GQLSystemWorkspaceCreateResponseTypeResolver;
  SystemWorkspaceUpdateResponse?: GQLSystemWorkspaceUpdateResponseTypeResolver;
  TechnologyLogoManyResponse?: GQLTechnologyLogoManyResponseTypeResolver;
  UserManyResponse?: GQLUserManyResponseTypeResolver;
  LoginResponse?: GQLLoginResponseTypeResolver;
  Auth?: GQLAuthTypeResolver;
  WorkspaceInfo?: GQLWorkspaceInfoTypeResolver;
  WorkspaceCreateResponse?: GQLWorkspaceCreateResponseTypeResolver;
  WorkspaceUpdateResponse?: GQLWorkspaceUpdateResponseTypeResolver;
  Subscription?: GQLSubscriptionTypeResolver;
  ApiTokenPayload?: GQLApiTokenPayloadTypeResolver;
  AuthenticationProfilePayload?: GQLAuthenticationProfilePayloadTypeResolver;
  AuthenticationSettingPayload?: GQLAuthenticationSettingPayloadTypeResolver;
  BlogPayload?: GQLBlogPayloadTypeResolver;
  BlogUserPayload?: GQLBlogUserPayloadTypeResolver;
  CommentPayload?: GQLCommentPayloadTypeResolver;
  CoursePayload?: GQLCoursePayloadTypeResolver;
  CourseUrlPayload?: GQLCourseUrlPayloadTypeResolver;
  EnvironmentVariablePayload?: GQLEnvironmentVariablePayloadTypeResolver;
  FilePayload?: GQLFilePayloadTypeResolver;
  ImagePayload?: GQLImagePayloadTypeResolver;
  PermissionPayload?: GQLPermissionPayloadTypeResolver;
  PersonPayload?: GQLPersonPayloadTypeResolver;
  RolePayload?: GQLRolePayloadTypeResolver;
  SchoolPayload?: GQLSchoolPayloadTypeResolver;
  SettingPayload?: GQLSettingPayloadTypeResolver;
  TechnologyLogoPayload?: GQLTechnologyLogoPayloadTypeResolver;
  UserPayload?: GQLUserPayloadTypeResolver;
  FunctionResolverInfo?: GQLFunctionResolverInfoTypeResolver;
  FunctionTaskInfo?: GQLFunctionTaskInfoTypeResolver;
  FunctionTriggerInfo?: GQLFunctionTriggerInfoTypeResolver;
  FunctionWebhookInfo?: GQLFunctionWebhookInfoTypeResolver;
  ImportedTable?: GQLImportedTableTypeResolver;
  MissingRelation?: GQLMissingRelationTypeResolver;
  SystemFunctionResolverInfo?: GQLSystemFunctionResolverInfoTypeResolver;
  SystemFunctionTaskInfo?: GQLSystemFunctionTaskInfoTypeResolver;
  SystemFunctionTriggerInfo?: GQLSystemFunctionTriggerInfoTypeResolver;
  SystemFunctionWebhookInfo?: GQLSystemFunctionWebhookInfoTypeResolver;
  Time?: GraphQLScalarType;
}
export interface GQLQueryTypeResolver<TParent = any> {
  apiToken?: QueryToApiTokenResolver<TParent>;
  apiTokensList?: QueryToApiTokensListResolver<TParent>;
  application?: QueryToApplicationResolver<TParent>;
  applicationsList?: QueryToApplicationsListResolver<TParent>;
  asyncSessionStatus?: QueryToAsyncSessionStatusResolver<TParent>;
  authenticationProfile?: QueryToAuthenticationProfileResolver<TParent>;
  authenticationProfilesList?: QueryToAuthenticationProfilesListResolver<TParent>;
  authenticationSettings?: QueryToAuthenticationSettingsResolver<TParent>;
  billingCurrentPlan?: QueryToBillingCurrentPlanResolver<TParent>;
  billingDetails?: QueryToBillingDetailsResolver<TParent>;
  billingInvoicesList?: QueryToBillingInvoicesListResolver<TParent>;
  billingMetricUsageQuotasList?: QueryToBillingMetricUsageQuotasListResolver<TParent>;
  billingMetricUsagesList?: QueryToBillingMetricUsagesListResolver<TParent>;
  blog?: QueryToBlogResolver<TParent>;
  blogUser?: QueryToBlogUserResolver<TParent>;
  blogUsersList?: QueryToBlogUsersListResolver<TParent>;
  blogsList?: QueryToBlogsListResolver<TParent>;
  comment?: QueryToCommentResolver<TParent>;
  commentsList?: QueryToCommentsListResolver<TParent>;
  companyName?: QueryToCompanyNameResolver<TParent>;
  course?: QueryToCourseResolver<TParent>;
  courseUrl?: QueryToCourseUrlResolver<TParent>;
  courseUrlsList?: QueryToCourseUrlsListResolver<TParent>;
  coursesList?: QueryToCoursesListResolver<TParent>;
  deployStatus?: QueryToDeployStatusResolver<TParent>;
  environmentVariable?: QueryToEnvironmentVariableResolver<TParent>;
  environmentVariablesList?: QueryToEnvironmentVariablesListResolver<TParent>;
  file?: QueryToFileResolver<TParent>;
  fileUploadInfo?: QueryToFileUploadInfoResolver<TParent>;
  filesList?: QueryToFilesListResolver<TParent>;
  functionsList?: QueryToFunctionsListResolver<TParent>;
  getWorkspaceTransferInfo?: QueryToGetWorkspaceTransferInfoResolver<TParent>;
  image?: QueryToImageResolver<TParent>;
  imagesList?: QueryToImagesListResolver<TParent>;
  logs?: QueryToLogsResolver<TParent>;
  peopleList?: QueryToPeopleListResolver<TParent>;
  person?: QueryToPersonResolver<TParent>;
  role?: QueryToRoleResolver<TParent>;
  rolesList?: QueryToRolesListResolver<TParent>;
  school?: QueryToSchoolResolver<TParent>;
  schoolsList?: QueryToSchoolsListResolver<TParent>;
  settings?: QueryToSettingsResolver<TParent>;
  system?: QueryToSystemResolver<TParent>;
  table?: QueryToTableResolver<TParent>;
  tableField?: QueryToTableFieldResolver<TParent>;
  tablesList?: QueryToTablesListResolver<TParent>;
  technologyLogo?: QueryToTechnologyLogoResolver<TParent>;
  technologyLogosList?: QueryToTechnologyLogosListResolver<TParent>;
  user?: QueryToUserResolver<TParent>;
  userBillingConfiguration?: QueryToUserBillingConfigurationResolver<TParent>;
  userInvitationsList?: QueryToUserInvitationsListResolver<TParent>;
  usersList?: QueryToUsersListResolver<TParent>;
  workspacesList?: QueryToWorkspacesListResolver<TParent>;
}

export interface QueryToApiTokenArgs {
  id?: string;
  name?: string;
  withDeleted?: boolean;
}
export interface QueryToApiTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToApiTokenArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToApiTokensListArgs {
  after?: string;
  before?: string;
  filter?: GQLApiTokenFilter;
  first?: number;
  groupBy?: GQLApiTokenGroupBy;
  last?: number;
  orderBy?: Array<GQLApiTokenOrderBy | null>;
  skip?: number;
  sort?: Array<GQLApiTokenSort>;
  withDeleted?: boolean;
}
export interface QueryToApiTokensListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToApiTokensListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToApplicationArgs {
  id: string;
}
export interface QueryToApplicationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToApplicationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToApplicationsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAsyncSessionStatusArgs {
  sessionId: string;
}
export interface QueryToAsyncSessionStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToAsyncSessionStatusArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAuthenticationProfileArgs {
  id?: string;
  name?: string;
  withDeleted?: boolean;
}
export interface QueryToAuthenticationProfileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToAuthenticationProfileArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAuthenticationProfilesListArgs {
  after?: string;
  before?: string;
  filter?: GQLAuthenticationProfileFilter;
  first?: number;
  groupBy?: GQLAuthenticationProfileGroupBy;
  last?: number;
  orderBy?: Array<GQLAuthenticationProfileOrderBy | null>;
  skip?: number;
  sort?: Array<GQLAuthenticationProfileSort>;
  withDeleted?: boolean;
}
export interface QueryToAuthenticationProfilesListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToAuthenticationProfilesListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToAuthenticationSettingsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToBillingCurrentPlanResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToBillingDetailsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToBillingInvoicesListArgs {
  after?: string;
  before?: string;
  by?: GQLBillingInvoicesListFilterType;
  limit?: number;
}
export interface QueryToBillingInvoicesListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToBillingInvoicesListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToBillingMetricUsageQuotasListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToBillingMetricUsagesListArgs {
  filter?: GQLBillingMetricUsagesListFilter;
}
export interface QueryToBillingMetricUsagesListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToBillingMetricUsagesListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToBlogArgs {
  id?: string;
  slug?: string;
  withDeleted?: boolean;
}
export interface QueryToBlogResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToBlogArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToBlogUserArgs {
  email?: string;
  id?: string;
  username?: string;
  withDeleted?: boolean;
}
export interface QueryToBlogUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToBlogUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToBlogUsersListArgs {
  after?: string;
  before?: string;
  filter?: GQLBlogUserFilter;
  first?: number;
  groupBy?: GQLBlogUserGroupBy;
  last?: number;
  orderBy?: Array<GQLBlogUserOrderBy | null>;
  skip?: number;
  sort?: Array<GQLBlogUserSort>;
  withDeleted?: boolean;
}
export interface QueryToBlogUsersListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToBlogUsersListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToBlogsListArgs {
  after?: string;
  before?: string;
  filter?: GQLBlogFilter;
  first?: number;
  groupBy?: GQLBlogGroupBy;
  last?: number;
  orderBy?: Array<GQLBlogOrderBy | null>;
  skip?: number;
  sort?: Array<GQLBlogSort>;
  withDeleted?: boolean;
}
export interface QueryToBlogsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToBlogsListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCommentArgs {
  id?: string;
  slug?: string;
  withDeleted?: boolean;
}
export interface QueryToCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCommentArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCommentsListArgs {
  after?: string;
  before?: string;
  filter?: GQLCommentFilter;
  first?: number;
  groupBy?: GQLCommentGroupBy;
  last?: number;
  orderBy?: Array<GQLCommentOrderBy | null>;
  skip?: number;
  sort?: Array<GQLCommentSort>;
  withDeleted?: boolean;
}
export interface QueryToCommentsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCommentsListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCompanyNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCourseArgs {
  id?: string;
  ratingUrl?: string;
  recommendationOrder?: number;
  title?: string;
  withDeleted?: boolean;
}
export interface QueryToCourseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCourseArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCourseUrlArgs {
  id?: string;
  url?: string;
  withDeleted?: boolean;
}
export interface QueryToCourseUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCourseUrlArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCourseUrlsListArgs {
  after?: string;
  before?: string;
  filter?: GQLCourseUrlFilter;
  first?: number;
  groupBy?: GQLCourseUrlGroupBy;
  last?: number;
  orderBy?: Array<GQLCourseUrlOrderBy | null>;
  skip?: number;
  sort?: Array<GQLCourseUrlSort>;
  withDeleted?: boolean;
}
export interface QueryToCourseUrlsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCourseUrlsListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToCoursesListArgs {
  after?: string;
  before?: string;
  filter?: GQLCourseFilter;
  first?: number;
  groupBy?: GQLCourseGroupBy;
  last?: number;
  orderBy?: Array<GQLCourseOrderBy | null>;
  skip?: number;
  sort?: Array<GQLCourseSort>;
  withDeleted?: boolean;
}
export interface QueryToCoursesListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCoursesListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToDeployStatusArgs {
  buildName: string;
}
export interface QueryToDeployStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToDeployStatusArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToEnvironmentVariableArgs {
  id?: string;
  name?: string;
  withDeleted?: boolean;
}
export interface QueryToEnvironmentVariableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToEnvironmentVariableArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToEnvironmentVariablesListArgs {
  after?: string;
  before?: string;
  filter?: GQLEnvironmentVariableFilter;
  first?: number;
  groupBy?: GQLEnvironmentVariableGroupBy;
  last?: number;
  orderBy?: Array<GQLEnvironmentVariableOrderBy | null>;
  skip?: number;
  sort?: Array<GQLEnvironmentVariableSort>;
  withDeleted?: boolean;
}
export interface QueryToEnvironmentVariablesListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToEnvironmentVariablesListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToFileArgs {
  fileId?: string;
  id?: string;
  withDeleted?: boolean;
}
export interface QueryToFileResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToFileArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToFileUploadInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToFilesListArgs {
  after?: string;
  before?: string;
  filter?: GQLFileFilter;
  first?: number;
  groupBy?: GQLFileGroupBy;
  last?: number;
  orderBy?: Array<GQLFileOrderBy | null>;
  skip?: number;
  sort?: Array<GQLFileSort>;
  withDeleted?: boolean;
}
export interface QueryToFilesListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToFilesListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToFunctionsListArgs {
  applicationId?: string;
  filter?: GQLFunctionInfoFilter;
  orderBy?: Array<GQLFunctionInfoOrderBy | null>;
}
export interface QueryToFunctionsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToFunctionsListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetWorkspaceTransferInfoArgs {
  workspaceId: string;
}
export interface QueryToGetWorkspaceTransferInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetWorkspaceTransferInfoArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToImageArgs {
  id?: string;
  withDeleted?: boolean;
}
export interface QueryToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToImageArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToImagesListArgs {
  after?: string;
  before?: string;
  filter?: GQLImageFilter;
  first?: number;
  groupBy?: GQLImageGroupBy;
  last?: number;
  orderBy?: Array<GQLImageOrderBy | null>;
  skip?: number;
  sort?: Array<GQLImageSort>;
  withDeleted?: boolean;
}
export interface QueryToImagesListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToImagesListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToLogsArgs {
  applicationId?: string;
  endTime?: GQLDateTime;
  functionName: string;
  limit?: number;
  startTime?: GQLDateTime;
}
export interface QueryToLogsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToLogsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToPeopleListArgs {
  after?: string;
  before?: string;
  filter?: GQLPersonFilter;
  first?: number;
  groupBy?: GQLPersonGroupBy;
  last?: number;
  orderBy?: Array<GQLPersonOrderBy | null>;
  skip?: number;
  sort?: Array<GQLPersonSort>;
  withDeleted?: boolean;
}
export interface QueryToPeopleListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToPeopleListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToPersonArgs {
  id?: string;
  withDeleted?: boolean;
}
export interface QueryToPersonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToPersonArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRoleArgs {
  id?: string;
  name?: string;
  withDeleted?: boolean;
}
export interface QueryToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRoleArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRolesListArgs {
  after?: string;
  before?: string;
  filter?: GQLRoleFilter;
  first?: number;
  groupBy?: GQLRoleGroupBy;
  last?: number;
  orderBy?: Array<GQLRoleOrderBy | null>;
  skip?: number;
  sort?: Array<GQLRoleSort>;
  withDeleted?: boolean;
}
export interface QueryToRolesListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRolesListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSchoolArgs {
  id?: string;
  name?: string;
  url?: string;
  withDeleted?: boolean;
}
export interface QueryToSchoolResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSchoolArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSchoolsListArgs {
  after?: string;
  before?: string;
  filter?: GQLSchoolFilter;
  first?: number;
  groupBy?: GQLSchoolGroupBy;
  last?: number;
  orderBy?: Array<GQLSchoolOrderBy | null>;
  skip?: number;
  sort?: Array<GQLSchoolSort>;
  withDeleted?: boolean;
}
export interface QueryToSchoolsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSchoolsListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSettingsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSystemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTableArgs {
  id?: string;
  name?: string;
}
export interface QueryToTableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTableArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTableFieldArgs {
  id: string;
}
export interface QueryToTableFieldResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTableFieldArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTablesListArgs {
  filter?: GQLTableListFilter;
}
export interface QueryToTablesListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTablesListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTechnologyLogoArgs {
  id?: string;
  withDeleted?: boolean;
}
export interface QueryToTechnologyLogoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTechnologyLogoArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToTechnologyLogosListArgs {
  after?: string;
  before?: string;
  filter?: GQLTechnologyLogoFilter;
  first?: number;
  groupBy?: GQLTechnologyLogoGroupBy;
  last?: number;
  orderBy?: Array<GQLTechnologyLogoOrderBy | null>;
  skip?: number;
  sort?: Array<GQLTechnologyLogoSort>;
  withDeleted?: boolean;
}
export interface QueryToTechnologyLogosListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToTechnologyLogosListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserArgs {
  email?: string;
  id?: string;
  withDeleted?: boolean;
}
export interface QueryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserBillingConfigurationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserInvitationsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUsersListArgs {
  after?: string;
  before?: string;
  filter?: GQLUserFilter;
  first?: number;
  groupBy?: GQLUserGroupBy;
  last?: number;
  orderBy?: Array<GQLUserOrderBy | null>;
  skip?: number;
  sort?: Array<GQLUserSort>;
  withDeleted?: boolean;
}
export interface QueryToUsersListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUsersListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToWorkspacesListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLApiTokenTypeResolver<TParent = any> {
  _description?: ApiTokenTo_descriptionResolver<TParent>;
  createdAt?: ApiTokenToCreatedAtResolver<TParent>;
  createdBy?: ApiTokenToCreatedByResolver<TParent>;
  deletedAt?: ApiTokenToDeletedAtResolver<TParent>;
  id?: ApiTokenToIdResolver<TParent>;
  name?: ApiTokenToNameResolver<TParent>;
  roles?: ApiTokenToRolesResolver<TParent>;
  updatedAt?: ApiTokenToUpdatedAtResolver<TParent>;
}

export interface ApiTokenTo_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenToRolesArgs {
  after?: string;
  before?: string;
  filter?: GQLRoleFilter;
  first?: number;
  groupBy?: GQLRoleGroupBy;
  last?: number;
  orderBy?: Array<GQLRoleOrderBy | null>;
  skip?: number;
  sort?: Array<GQLRoleSort>;
}
export interface ApiTokenToRolesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ApiTokenToRolesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver<TParent = any> {
  _description?: UserTo_descriptionResolver<TParent>;
  avatar?: UserToAvatarResolver<TParent>;
  createdAt?: UserToCreatedAtResolver<TParent>;
  createdBy?: UserToCreatedByResolver<TParent>;
  deletedAt?: UserToDeletedAtResolver<TParent>;
  email?: UserToEmailResolver<TParent>;
  firstName?: UserToFirstNameResolver<TParent>;
  id?: UserToIdResolver<TParent>;
  is8base?: UserToIs8baseResolver<TParent>;
  lastName?: UserToLastNameResolver<TParent>;
  origin?: UserToOriginResolver<TParent>;
  permissions?: UserToPermissionsResolver<TParent>;
  roles?: UserToRolesResolver<TParent>;
  status?: UserToStatusResolver<TParent>;
  timezone?: UserToTimezoneResolver<TParent>;
  updatedAt?: UserToUpdatedAtResolver<TParent>;
}

export interface UserTo_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToAvatarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIs8baseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToOriginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPermissionsArgs {
  filter?: GQLPermissionInputFilter;
}
export interface UserToPermissionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToPermissionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToRolesArgs {
  after?: string;
  before?: string;
  filter?: GQLRoleFilter;
  first?: number;
  groupBy?: GQLRoleGroupBy;
  last?: number;
  orderBy?: Array<GQLRoleOrderBy | null>;
  skip?: number;
  sort?: Array<GQLRoleSort>;
}
export interface UserToRolesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: UserToRolesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToTimezoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFileTypeResolver<TParent = any> {
  _description?: FileTo_descriptionResolver<TParent>;
  createdAt?: FileToCreatedAtResolver<TParent>;
  createdBy?: FileToCreatedByResolver<TParent>;
  deletedAt?: FileToDeletedAtResolver<TParent>;
  downloadStorageUrl?: FileToDownloadStorageUrlResolver<TParent>;
  downloadUrl?: FileToDownloadUrlResolver<TParent>;
  fields?: FileToFieldsResolver<TParent>;
  fileId?: FileToFileIdResolver<TParent>;
  filename?: FileToFilenameResolver<TParent>;
  id?: FileToIdResolver<TParent>;
  image_image?: FileToImage_imageResolver<TParent>;
  meta?: FileToMetaResolver<TParent>;
  mods?: FileToModsResolver<TParent>;
  previewUrl?: FileToPreviewUrlResolver<TParent>;
  provider?: FileToProviderResolver<TParent>;
  public?: FileToPublicResolver<TParent>;
  settings_landingPageImage?: FileToSettings_landingPageImageResolver<TParent>;
  settings_menuBarLogo?: FileToSettings_menuBarLogoResolver<TParent>;
  shareUrl?: FileToShareUrlResolver<TParent>;
  updatedAt?: FileToUpdatedAtResolver<TParent>;
  uploadUrl?: FileToUploadUrlResolver<TParent>;
  uploaded?: FileToUploadedResolver<TParent>;
  users_avatar?: FileToUsers_avatarResolver<TParent>;
}

export interface FileTo_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToDownloadStorageUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToDownloadUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToFileIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToFilenameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToImage_imageArgs {
  after?: string;
  before?: string;
  filter?: GQLImageFilter;
  first?: number;
  groupBy?: GQLImageGroupBy;
  last?: number;
  orderBy?: Array<GQLImageOrderBy | null>;
  skip?: number;
  sort?: Array<GQLImageSort>;
}
export interface FileToImage_imageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: FileToImage_imageArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToModsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToPreviewUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToProviderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToPublicResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToSettings_landingPageImageArgs {
  after?: string;
  before?: string;
  filter?: GQLSettingFilter;
  first?: number;
  groupBy?: GQLSettingGroupBy;
  last?: number;
  orderBy?: Array<GQLSettingOrderBy | null>;
  skip?: number;
  sort?: Array<GQLSettingSort>;
}
export interface FileToSettings_landingPageImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: FileToSettings_landingPageImageArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToSettings_menuBarLogoArgs {
  after?: string;
  before?: string;
  filter?: GQLSettingFilter;
  first?: number;
  groupBy?: GQLSettingGroupBy;
  last?: number;
  orderBy?: Array<GQLSettingOrderBy | null>;
  skip?: number;
  sort?: Array<GQLSettingSort>;
}
export interface FileToSettings_menuBarLogoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: FileToSettings_menuBarLogoArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToShareUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToUploadUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToUploadedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileToUsers_avatarArgs {
  after?: string;
  before?: string;
  filter?: GQLUserFilter;
  first?: number;
  groupBy?: GQLUserGroupBy;
  last?: number;
  orderBy?: Array<GQLUserOrderBy | null>;
  skip?: number;
  sort?: Array<GQLUserSort>;
}
export interface FileToUsers_avatarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: FileToUsers_avatarArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLImageListResponseTypeResolver<TParent = any> {
  count?: ImageListResponseToCountResolver<TParent>;
  groups?: ImageListResponseToGroupsResolver<TParent>;
  items?: ImageListResponseToItemsResolver<TParent>;
}

export interface ImageListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageListResponseToGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGroupByResponseTypeResolver<TParent = any> {
  ApiTokenGroup?: GroupByResponseToApiTokenGroupResolver<TParent>;
  AuthenticationProfileGroup?: GroupByResponseToAuthenticationProfileGroupResolver<TParent>;
  BigInt?: GroupByResponseToBigIntResolver<TParent>;
  BlogGroup?: GroupByResponseToBlogGroupResolver<TParent>;
  BlogUserGroup?: GroupByResponseToBlogUserGroupResolver<TParent>;
  Boolean?: GroupByResponseToBooleanResolver<TParent>;
  CommentGroup?: GroupByResponseToCommentGroupResolver<TParent>;
  CourseGroup?: GroupByResponseToCourseGroupResolver<TParent>;
  CourseUrlGroup?: GroupByResponseToCourseUrlGroupResolver<TParent>;
  Date?: GroupByResponseToDateResolver<TParent>;
  DateTime?: GroupByResponseToDateTimeResolver<TParent>;
  EnvironmentVariableGroup?: GroupByResponseToEnvironmentVariableGroupResolver<TParent>;
  FileGroup?: GroupByResponseToFileGroupResolver<TParent>;
  Float?: GroupByResponseToFloatResolver<TParent>;
  GroupIds?: GroupByResponseToGroupIdsResolver<TParent>;
  ID?: GroupByResponseToIDResolver<TParent>;
  ImageGroup?: GroupByResponseToImageGroupResolver<TParent>;
  Int?: GroupByResponseToIntResolver<TParent>;
  JSON?: GroupByResponseToJSONResolver<TParent>;
  PersonGroup?: GroupByResponseToPersonGroupResolver<TParent>;
  RoleGroup?: GroupByResponseToRoleGroupResolver<TParent>;
  SchoolGroup?: GroupByResponseToSchoolGroupResolver<TParent>;
  String?: GroupByResponseToStringResolver<TParent>;
  TechnologyLogoGroup?: GroupByResponseToTechnologyLogoGroupResolver<TParent>;
  UserGroup?: GroupByResponseToUserGroupResolver<TParent>;
}

export interface GroupByResponseToApiTokenGroupArgs {
  after?: string;
  before?: string;
  filter?: GQLApiTokenFilter;
  first?: number;
  groupBy?: GQLApiTokenGroupBy;
  last?: number;
  orderBy?: Array<GQLApiTokenOrderBy | null>;
  skip?: number;
  sort?: Array<GQLApiTokenSort>;
}
export interface GroupByResponseToApiTokenGroupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GroupByResponseToApiTokenGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToAuthenticationProfileGroupArgs {
  after?: string;
  before?: string;
  filter?: GQLAuthenticationProfileFilter;
  first?: number;
  groupBy?: GQLAuthenticationProfileGroupBy;
  last?: number;
  orderBy?: Array<GQLAuthenticationProfileOrderBy | null>;
  skip?: number;
  sort?: Array<GQLAuthenticationProfileSort>;
}
export interface GroupByResponseToAuthenticationProfileGroupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GroupByResponseToAuthenticationProfileGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToBigIntResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToBlogGroupArgs {
  after?: string;
  before?: string;
  filter?: GQLBlogFilter;
  first?: number;
  groupBy?: GQLBlogGroupBy;
  last?: number;
  orderBy?: Array<GQLBlogOrderBy | null>;
  skip?: number;
  sort?: Array<GQLBlogSort>;
}
export interface GroupByResponseToBlogGroupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GroupByResponseToBlogGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToBlogUserGroupArgs {
  after?: string;
  before?: string;
  filter?: GQLBlogUserFilter;
  first?: number;
  groupBy?: GQLBlogUserGroupBy;
  last?: number;
  orderBy?: Array<GQLBlogUserOrderBy | null>;
  skip?: number;
  sort?: Array<GQLBlogUserSort>;
}
export interface GroupByResponseToBlogUserGroupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GroupByResponseToBlogUserGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToBooleanResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToCommentGroupArgs {
  after?: string;
  before?: string;
  filter?: GQLCommentFilter;
  first?: number;
  groupBy?: GQLCommentGroupBy;
  last?: number;
  orderBy?: Array<GQLCommentOrderBy | null>;
  skip?: number;
  sort?: Array<GQLCommentSort>;
}
export interface GroupByResponseToCommentGroupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GroupByResponseToCommentGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToCourseGroupArgs {
  after?: string;
  before?: string;
  filter?: GQLCourseFilter;
  first?: number;
  groupBy?: GQLCourseGroupBy;
  last?: number;
  orderBy?: Array<GQLCourseOrderBy | null>;
  skip?: number;
  sort?: Array<GQLCourseSort>;
}
export interface GroupByResponseToCourseGroupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GroupByResponseToCourseGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToCourseUrlGroupArgs {
  after?: string;
  before?: string;
  filter?: GQLCourseUrlFilter;
  first?: number;
  groupBy?: GQLCourseUrlGroupBy;
  last?: number;
  orderBy?: Array<GQLCourseUrlOrderBy | null>;
  skip?: number;
  sort?: Array<GQLCourseUrlSort>;
}
export interface GroupByResponseToCourseUrlGroupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GroupByResponseToCourseUrlGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToDateTimeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToEnvironmentVariableGroupArgs {
  after?: string;
  before?: string;
  filter?: GQLEnvironmentVariableFilter;
  first?: number;
  groupBy?: GQLEnvironmentVariableGroupBy;
  last?: number;
  orderBy?: Array<GQLEnvironmentVariableOrderBy | null>;
  skip?: number;
  sort?: Array<GQLEnvironmentVariableSort>;
}
export interface GroupByResponseToEnvironmentVariableGroupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GroupByResponseToEnvironmentVariableGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToFileGroupArgs {
  after?: string;
  before?: string;
  filter?: GQLFileFilter;
  first?: number;
  groupBy?: GQLFileGroupBy;
  last?: number;
  orderBy?: Array<GQLFileOrderBy | null>;
  skip?: number;
  sort?: Array<GQLFileSort>;
}
export interface GroupByResponseToFileGroupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GroupByResponseToFileGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToFloatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToGroupIdsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToImageGroupArgs {
  after?: string;
  before?: string;
  filter?: GQLImageFilter;
  first?: number;
  groupBy?: GQLImageGroupBy;
  last?: number;
  orderBy?: Array<GQLImageOrderBy | null>;
  skip?: number;
  sort?: Array<GQLImageSort>;
}
export interface GroupByResponseToImageGroupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GroupByResponseToImageGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToIntResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToJSONResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToPersonGroupArgs {
  after?: string;
  before?: string;
  filter?: GQLPersonFilter;
  first?: number;
  groupBy?: GQLPersonGroupBy;
  last?: number;
  orderBy?: Array<GQLPersonOrderBy | null>;
  skip?: number;
  sort?: Array<GQLPersonSort>;
}
export interface GroupByResponseToPersonGroupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GroupByResponseToPersonGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToRoleGroupArgs {
  after?: string;
  before?: string;
  filter?: GQLRoleFilter;
  first?: number;
  groupBy?: GQLRoleGroupBy;
  last?: number;
  orderBy?: Array<GQLRoleOrderBy | null>;
  skip?: number;
  sort?: Array<GQLRoleSort>;
}
export interface GroupByResponseToRoleGroupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GroupByResponseToRoleGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToSchoolGroupArgs {
  after?: string;
  before?: string;
  filter?: GQLSchoolFilter;
  first?: number;
  groupBy?: GQLSchoolGroupBy;
  last?: number;
  orderBy?: Array<GQLSchoolOrderBy | null>;
  skip?: number;
  sort?: Array<GQLSchoolSort>;
}
export interface GroupByResponseToSchoolGroupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GroupByResponseToSchoolGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToStringResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToTechnologyLogoGroupArgs {
  after?: string;
  before?: string;
  filter?: GQLTechnologyLogoFilter;
  first?: number;
  groupBy?: GQLTechnologyLogoGroupBy;
  last?: number;
  orderBy?: Array<GQLTechnologyLogoOrderBy | null>;
  skip?: number;
  sort?: Array<GQLTechnologyLogoSort>;
}
export interface GroupByResponseToTechnologyLogoGroupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GroupByResponseToTechnologyLogoGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GroupByResponseToUserGroupArgs {
  after?: string;
  before?: string;
  filter?: GQLUserFilter;
  first?: number;
  groupBy?: GQLUserGroupBy;
  last?: number;
  orderBy?: Array<GQLUserOrderBy | null>;
  skip?: number;
  sort?: Array<GQLUserSort>;
}
export interface GroupByResponseToUserGroupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: GroupByResponseToUserGroupArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLApiTokenListResponseTypeResolver<TParent = any> {
  count?: ApiTokenListResponseToCountResolver<TParent>;
  groups?: ApiTokenListResponseToGroupsResolver<TParent>;
  items?: ApiTokenListResponseToItemsResolver<TParent>;
}

export interface ApiTokenListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenListResponseToGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAuthenticationProfileListResponseTypeResolver<TParent = any> {
  count?: AuthenticationProfileListResponseToCountResolver<TParent>;
  groups?: AuthenticationProfileListResponseToGroupsResolver<TParent>;
  items?: AuthenticationProfileListResponseToItemsResolver<TParent>;
}

export interface AuthenticationProfileListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileListResponseToGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAuthenticationProfileTypeResolver<TParent = any> {
  _description?: AuthenticationProfileTo_descriptionResolver<TParent>;
  attributes?: AuthenticationProfileToAttributesResolver<TParent>;
  audiences?: AuthenticationProfileToAudiencesResolver<TParent>;
  clientId?: AuthenticationProfileToClientIdResolver<TParent>;
  createdAt?: AuthenticationProfileToCreatedAtResolver<TParent>;
  createdBy?: AuthenticationProfileToCreatedByResolver<TParent>;
  databaseName?: AuthenticationProfileToDatabaseNameResolver<TParent>;
  deletedAt?: AuthenticationProfileToDeletedAtResolver<TParent>;
  domain?: AuthenticationProfileToDomainResolver<TParent>;
  id?: AuthenticationProfileToIdResolver<TParent>;
  managementDomain?: AuthenticationProfileToManagementDomainResolver<TParent>;
  name?: AuthenticationProfileToNameResolver<TParent>;
  roles?: AuthenticationProfileToRolesResolver<TParent>;
  secret?: AuthenticationProfileToSecretResolver<TParent>;
  selfSignUpEmailDomains?: AuthenticationProfileToSelfSignUpEmailDomainsResolver<TParent>;
  selfSignUpEnabled?: AuthenticationProfileToSelfSignUpEnabledResolver<TParent>;
  type?: AuthenticationProfileToTypeResolver<TParent>;
  updatedAt?: AuthenticationProfileToUpdatedAtResolver<TParent>;
}

export interface AuthenticationProfileTo_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileToAttributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileToAudiencesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileToClientIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileToDatabaseNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileToDomainResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileToManagementDomainResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileToRolesArgs {
  after?: string;
  before?: string;
  filter?: GQLRoleFilter;
  first?: number;
  groupBy?: GQLRoleGroupBy;
  last?: number;
  orderBy?: Array<GQLRoleOrderBy | null>;
  skip?: number;
  sort?: Array<GQLRoleSort>;
}
export interface AuthenticationProfileToRolesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: AuthenticationProfileToRolesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileToSecretResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileToSelfSignUpEmailDomainsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileToSelfSignUpEnabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAuthenticationProfileAttributesTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'CognitoAuthProfileAttributes' | Promise<'CognitoAuthProfileAttributes'>;
}
export interface GQLCognitoAuthProfileAttributesTypeResolver<TParent = any> {
  clientAuthDomain?: CognitoAuthProfileAttributesToClientAuthDomainResolver<TParent>;
}

export interface CognitoAuthProfileAttributesToClientAuthDomainResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRoleListResponseTypeResolver<TParent = any> {
  count?: RoleListResponseToCountResolver<TParent>;
  groups?: RoleListResponseToGroupsResolver<TParent>;
  items?: RoleListResponseToItemsResolver<TParent>;
}

export interface RoleListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleListResponseToGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRoleTypeResolver<TParent = any> {
  _description?: RoleTo_descriptionResolver<TParent>;
  apiTokens?: RoleToApiTokensResolver<TParent>;
  authenticationProfiles?: RoleToAuthenticationProfilesResolver<TParent>;
  createdAt?: RoleToCreatedAtResolver<TParent>;
  createdBy?: RoleToCreatedByResolver<TParent>;
  deletedAt?: RoleToDeletedAtResolver<TParent>;
  description?: RoleToDescriptionResolver<TParent>;
  id?: RoleToIdResolver<TParent>;
  membersCount?: RoleToMembersCountResolver<TParent>;
  name?: RoleToNameResolver<TParent>;
  permissions?: RoleToPermissionsResolver<TParent>;
  updatedAt?: RoleToUpdatedAtResolver<TParent>;
  users?: RoleToUsersResolver<TParent>;
}

export interface RoleTo_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleToApiTokensArgs {
  after?: string;
  before?: string;
  filter?: GQLApiTokenFilter;
  first?: number;
  groupBy?: GQLApiTokenGroupBy;
  last?: number;
  orderBy?: Array<GQLApiTokenOrderBy | null>;
  skip?: number;
  sort?: Array<GQLApiTokenSort>;
}
export interface RoleToApiTokensResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RoleToApiTokensArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleToAuthenticationProfilesArgs {
  after?: string;
  before?: string;
  filter?: GQLAuthenticationProfileFilter;
  first?: number;
  groupBy?: GQLAuthenticationProfileGroupBy;
  last?: number;
  orderBy?: Array<GQLAuthenticationProfileOrderBy | null>;
  skip?: number;
  sort?: Array<GQLAuthenticationProfileSort>;
}
export interface RoleToAuthenticationProfilesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RoleToAuthenticationProfilesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleToMembersCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleToPermissionsArgs {
  filter?: GQLPermissionInputFilter;
}
export interface RoleToPermissionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RoleToPermissionsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleToUsersArgs {
  after?: string;
  before?: string;
  filter?: GQLUserFilter;
  first?: number;
  groupBy?: GQLUserGroupBy;
  last?: number;
  orderBy?: Array<GQLUserOrderBy | null>;
  skip?: number;
  sort?: Array<GQLUserSort>;
}
export interface RoleToUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: RoleToUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPermissionListResponseTypeResolver<TParent = any> {
  count?: PermissionListResponseToCountResolver<TParent>;
  groups?: PermissionListResponseToGroupsResolver<TParent>;
  items?: PermissionListResponseToItemsResolver<TParent>;
}

export interface PermissionListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionListResponseToGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPermissionTypeResolver<TParent = any> {
  _description?: PermissionTo_descriptionResolver<TParent>;
  appId?: PermissionToAppIdResolver<TParent>;
  createdAt?: PermissionToCreatedAtResolver<TParent>;
  createdBy?: PermissionToCreatedByResolver<TParent>;
  permission?: PermissionToPermissionResolver<TParent>;
  resource?: PermissionToResourceResolver<TParent>;
  resourceType?: PermissionToResourceTypeResolver<TParent>;
  role?: PermissionToRoleResolver<TParent>;
  updatedAt?: PermissionToUpdatedAtResolver<TParent>;
}

export interface PermissionTo_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionToAppIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionToPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionToResourceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionToResourceTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserListResponseTypeResolver<TParent = any> {
  count?: UserListResponseToCountResolver<TParent>;
  groups?: UserListResponseToGroupsResolver<TParent>;
  items?: UserListResponseToItemsResolver<TParent>;
}

export interface UserListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserListResponseToGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBlogListResponseTypeResolver<TParent = any> {
  count?: BlogListResponseToCountResolver<TParent>;
  groups?: BlogListResponseToGroupsResolver<TParent>;
  items?: BlogListResponseToItemsResolver<TParent>;
}

export interface BlogListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogListResponseToGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBlogTypeResolver<TParent = any> {
  _description?: BlogTo_descriptionResolver<TParent>;
  authors?: BlogToAuthorsResolver<TParent>;
  createdAt?: BlogToCreatedAtResolver<TParent>;
  createdBy?: BlogToCreatedByResolver<TParent>;
  deletedAt?: BlogToDeletedAtResolver<TParent>;
  description?: BlogToDescriptionResolver<TParent>;
  featuredImage?: BlogToFeaturedImageResolver<TParent>;
  id?: BlogToIdResolver<TParent>;
  orderDate?: BlogToOrderDateResolver<TParent>;
  slug?: BlogToSlugResolver<TParent>;
  title?: BlogToTitleResolver<TParent>;
  updatedAt?: BlogToUpdatedAtResolver<TParent>;
}

export interface BlogTo_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogToAuthorsArgs {
  after?: string;
  before?: string;
  filter?: GQLPersonFilter;
  first?: number;
  groupBy?: GQLPersonGroupBy;
  last?: number;
  orderBy?: Array<GQLPersonOrderBy | null>;
  skip?: number;
  sort?: Array<GQLPersonSort>;
}
export interface BlogToAuthorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: BlogToAuthorsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogToFeaturedImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogToOrderDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPersonListResponseTypeResolver<TParent = any> {
  count?: PersonListResponseToCountResolver<TParent>;
  groups?: PersonListResponseToGroupsResolver<TParent>;
  items?: PersonListResponseToItemsResolver<TParent>;
}

export interface PersonListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonListResponseToGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPersonTypeResolver<TParent = any> {
  _description?: PersonTo_descriptionResolver<TParent>;
  blogs?: PersonToBlogsResolver<TParent>;
  courses?: PersonToCoursesResolver<TParent>;
  createdAt?: PersonToCreatedAtResolver<TParent>;
  createdBy?: PersonToCreatedByResolver<TParent>;
  deletedAt?: PersonToDeletedAtResolver<TParent>;
  firstName?: PersonToFirstNameResolver<TParent>;
  githubUrl?: PersonToGithubUrlResolver<TParent>;
  id?: PersonToIdResolver<TParent>;
  image?: PersonToImageResolver<TParent>;
  lastName?: PersonToLastNameResolver<TParent>;
  linkedinUrl?: PersonToLinkedinUrlResolver<TParent>;
  summary?: PersonToSummaryResolver<TParent>;
  updatedAt?: PersonToUpdatedAtResolver<TParent>;
  websiteUrl?: PersonToWebsiteUrlResolver<TParent>;
}

export interface PersonTo_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToBlogsArgs {
  after?: string;
  before?: string;
  filter?: GQLBlogFilter;
  first?: number;
  groupBy?: GQLBlogGroupBy;
  last?: number;
  orderBy?: Array<GQLBlogOrderBy | null>;
  skip?: number;
  sort?: Array<GQLBlogSort>;
}
export interface PersonToBlogsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PersonToBlogsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToCoursesArgs {
  after?: string;
  before?: string;
  filter?: GQLCourseFilter;
  first?: number;
  groupBy?: GQLCourseGroupBy;
  last?: number;
  orderBy?: Array<GQLCourseOrderBy | null>;
  skip?: number;
  sort?: Array<GQLCourseSort>;
}
export interface PersonToCoursesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: PersonToCoursesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToGithubUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToLinkedinUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToSummaryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonToWebsiteUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCourseListResponseTypeResolver<TParent = any> {
  count?: CourseListResponseToCountResolver<TParent>;
  groups?: CourseListResponseToGroupsResolver<TParent>;
  items?: CourseListResponseToItemsResolver<TParent>;
}

export interface CourseListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseListResponseToGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCourseTypeResolver<TParent = any> {
  _description?: CourseTo_descriptionResolver<TParent>;
  courseUrls?: CourseToCourseUrlsResolver<TParent>;
  createdAt?: CourseToCreatedAtResolver<TParent>;
  createdBy?: CourseToCreatedByResolver<TParent>;
  deletedAt?: CourseToDeletedAtResolver<TParent>;
  duration?: CourseToDurationResolver<TParent>;
  id?: CourseToIdResolver<TParent>;
  instructors?: CourseToInstructorsResolver<TParent>;
  rating?: CourseToRatingResolver<TParent>;
  ratingUrl?: CourseToRatingUrlResolver<TParent>;
  recommendationOrder?: CourseToRecommendationOrderResolver<TParent>;
  school?: CourseToSchoolResolver<TParent>;
  title?: CourseToTitleResolver<TParent>;
  updatedAt?: CourseToUpdatedAtResolver<TParent>;
  yearUpdated?: CourseToYearUpdatedResolver<TParent>;
}

export interface CourseTo_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseToCourseUrlsArgs {
  after?: string;
  before?: string;
  filter?: GQLCourseUrlFilter;
  first?: number;
  groupBy?: GQLCourseUrlGroupBy;
  last?: number;
  orderBy?: Array<GQLCourseUrlOrderBy | null>;
  skip?: number;
  sort?: Array<GQLCourseUrlSort>;
}
export interface CourseToCourseUrlsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CourseToCourseUrlsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseToDurationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseToInstructorsArgs {
  after?: string;
  before?: string;
  filter?: GQLPersonFilter;
  first?: number;
  groupBy?: GQLPersonGroupBy;
  last?: number;
  orderBy?: Array<GQLPersonOrderBy | null>;
  skip?: number;
  sort?: Array<GQLPersonSort>;
}
export interface CourseToInstructorsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: CourseToInstructorsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseToRatingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseToRatingUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseToRecommendationOrderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseToSchoolResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseToYearUpdatedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCourseUrlListResponseTypeResolver<TParent = any> {
  count?: CourseUrlListResponseToCountResolver<TParent>;
  groups?: CourseUrlListResponseToGroupsResolver<TParent>;
  items?: CourseUrlListResponseToItemsResolver<TParent>;
}

export interface CourseUrlListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseUrlListResponseToGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseUrlListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCourseUrlTypeResolver<TParent = any> {
  _description?: CourseUrlTo_descriptionResolver<TParent>;
  course?: CourseUrlToCourseResolver<TParent>;
  createdAt?: CourseUrlToCreatedAtResolver<TParent>;
  createdBy?: CourseUrlToCreatedByResolver<TParent>;
  deletedAt?: CourseUrlToDeletedAtResolver<TParent>;
  id?: CourseUrlToIdResolver<TParent>;
  school?: CourseUrlToSchoolResolver<TParent>;
  updatedAt?: CourseUrlToUpdatedAtResolver<TParent>;
  url?: CourseUrlToUrlResolver<TParent>;
}

export interface CourseUrlTo_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseUrlToCourseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseUrlToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseUrlToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseUrlToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseUrlToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseUrlToSchoolResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseUrlToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseUrlToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSchoolTypeResolver<TParent = any> {
  _description?: SchoolTo_descriptionResolver<TParent>;
  courseUrls?: SchoolToCourseUrlsResolver<TParent>;
  courses?: SchoolToCoursesResolver<TParent>;
  createdAt?: SchoolToCreatedAtResolver<TParent>;
  createdBy?: SchoolToCreatedByResolver<TParent>;
  deletedAt?: SchoolToDeletedAtResolver<TParent>;
  description?: SchoolToDescriptionResolver<TParent>;
  id?: SchoolToIdResolver<TParent>;
  image?: SchoolToImageResolver<TParent>;
  name?: SchoolToNameResolver<TParent>;
  updatedAt?: SchoolToUpdatedAtResolver<TParent>;
  url?: SchoolToUrlResolver<TParent>;
}

export interface SchoolTo_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SchoolToCourseUrlsArgs {
  after?: string;
  before?: string;
  filter?: GQLCourseUrlFilter;
  first?: number;
  groupBy?: GQLCourseUrlGroupBy;
  last?: number;
  orderBy?: Array<GQLCourseUrlOrderBy | null>;
  skip?: number;
  sort?: Array<GQLCourseUrlSort>;
}
export interface SchoolToCourseUrlsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SchoolToCourseUrlsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SchoolToCoursesArgs {
  after?: string;
  before?: string;
  filter?: GQLCourseFilter;
  first?: number;
  groupBy?: GQLCourseGroupBy;
  last?: number;
  orderBy?: Array<GQLCourseOrderBy | null>;
  skip?: number;
  sort?: Array<GQLCourseSort>;
}
export interface SchoolToCoursesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SchoolToCoursesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SchoolToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SchoolToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SchoolToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SchoolToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SchoolToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SchoolToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SchoolToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SchoolToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SchoolToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLImageTypeResolver<TParent = any> {
  _description?: ImageTo_descriptionResolver<TParent>;
  altText?: ImageToAltTextResolver<TParent>;
  blogs?: ImageToBlogsResolver<TParent>;
  createdAt?: ImageToCreatedAtResolver<TParent>;
  createdBy?: ImageToCreatedByResolver<TParent>;
  deletedAt?: ImageToDeletedAtResolver<TParent>;
  height?: ImageToHeightResolver<TParent>;
  id?: ImageToIdResolver<TParent>;
  image?: ImageToImageResolver<TParent>;
  person?: ImageToPersonResolver<TParent>;
  schools?: ImageToSchoolsResolver<TParent>;
  technologyLogos?: ImageToTechnologyLogosResolver<TParent>;
  updatedAt?: ImageToUpdatedAtResolver<TParent>;
  width?: ImageToWidthResolver<TParent>;
}

export interface ImageTo_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToAltTextResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToBlogsArgs {
  after?: string;
  before?: string;
  filter?: GQLBlogFilter;
  first?: number;
  groupBy?: GQLBlogGroupBy;
  last?: number;
  orderBy?: Array<GQLBlogOrderBy | null>;
  skip?: number;
  sort?: Array<GQLBlogSort>;
}
export interface ImageToBlogsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ImageToBlogsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToHeightResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToPersonResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToSchoolsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToTechnologyLogosResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageToWidthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTechnologyLogoTypeResolver<TParent = any> {
  _description?: TechnologyLogoTo_descriptionResolver<TParent>;
  createdAt?: TechnologyLogoToCreatedAtResolver<TParent>;
  createdBy?: TechnologyLogoToCreatedByResolver<TParent>;
  deletedAt?: TechnologyLogoToDeletedAtResolver<TParent>;
  id?: TechnologyLogoToIdResolver<TParent>;
  image?: TechnologyLogoToImageResolver<TParent>;
  updatedAt?: TechnologyLogoToUpdatedAtResolver<TParent>;
}

export interface TechnologyLogoTo_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TechnologyLogoToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TechnologyLogoToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TechnologyLogoToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TechnologyLogoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TechnologyLogoToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TechnologyLogoToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBlogUserListResponseTypeResolver<TParent = any> {
  count?: BlogUserListResponseToCountResolver<TParent>;
  groups?: BlogUserListResponseToGroupsResolver<TParent>;
  items?: BlogUserListResponseToItemsResolver<TParent>;
}

export interface BlogUserListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogUserListResponseToGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogUserListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBlogUserTypeResolver<TParent = any> {
  _description?: BlogUserTo_descriptionResolver<TParent>;
  comments?: BlogUserToCommentsResolver<TParent>;
  createdAt?: BlogUserToCreatedAtResolver<TParent>;
  createdBy?: BlogUserToCreatedByResolver<TParent>;
  deletedAt?: BlogUserToDeletedAtResolver<TParent>;
  email?: BlogUserToEmailResolver<TParent>;
  id?: BlogUserToIdResolver<TParent>;
  password?: BlogUserToPasswordResolver<TParent>;
  token?: BlogUserToTokenResolver<TParent>;
  updatedAt?: BlogUserToUpdatedAtResolver<TParent>;
  username?: BlogUserToUsernameResolver<TParent>;
}

export interface BlogUserTo_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogUserToCommentsArgs {
  after?: string;
  before?: string;
  filter?: GQLCommentFilter;
  first?: number;
  groupBy?: GQLCommentGroupBy;
  last?: number;
  orderBy?: Array<GQLCommentOrderBy | null>;
  skip?: number;
  sort?: Array<GQLCommentSort>;
}
export interface BlogUserToCommentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: BlogUserToCommentsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogUserToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogUserToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogUserToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogUserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogUserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogUserToPasswordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogUserToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogUserToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogUserToUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommentListResponseTypeResolver<TParent = any> {
  count?: CommentListResponseToCountResolver<TParent>;
  groups?: CommentListResponseToGroupsResolver<TParent>;
  items?: CommentListResponseToItemsResolver<TParent>;
}

export interface CommentListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentListResponseToGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommentTypeResolver<TParent = any> {
  _description?: CommentTo_descriptionResolver<TParent>;
  blogUser?: CommentToBlogUserResolver<TParent>;
  comment?: CommentToCommentResolver<TParent>;
  createdAt?: CommentToCreatedAtResolver<TParent>;
  createdBy?: CommentToCreatedByResolver<TParent>;
  deletedAt?: CommentToDeletedAtResolver<TParent>;
  id?: CommentToIdResolver<TParent>;
  slug?: CommentToSlugResolver<TParent>;
  updatedAt?: CommentToUpdatedAtResolver<TParent>;
}

export interface CommentTo_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToBlogUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToCommentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToSlugResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnvironmentVariableListResponseTypeResolver<TParent = any> {
  count?: EnvironmentVariableListResponseToCountResolver<TParent>;
  groups?: EnvironmentVariableListResponseToGroupsResolver<TParent>;
  items?: EnvironmentVariableListResponseToItemsResolver<TParent>;
}

export interface EnvironmentVariableListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnvironmentVariableListResponseToGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnvironmentVariableListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnvironmentVariableTypeResolver<TParent = any> {
  _description?: EnvironmentVariableTo_descriptionResolver<TParent>;
  createdAt?: EnvironmentVariableToCreatedAtResolver<TParent>;
  createdBy?: EnvironmentVariableToCreatedByResolver<TParent>;
  deletedAt?: EnvironmentVariableToDeletedAtResolver<TParent>;
  id?: EnvironmentVariableToIdResolver<TParent>;
  name?: EnvironmentVariableToNameResolver<TParent>;
  updatedAt?: EnvironmentVariableToUpdatedAtResolver<TParent>;
  value?: EnvironmentVariableToValueResolver<TParent>;
}

export interface EnvironmentVariableTo_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnvironmentVariableToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnvironmentVariableToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnvironmentVariableToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnvironmentVariableToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnvironmentVariableToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnvironmentVariableToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnvironmentVariableToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFileListResponseTypeResolver<TParent = any> {
  count?: FileListResponseToCountResolver<TParent>;
  groups?: FileListResponseToGroupsResolver<TParent>;
  items?: FileListResponseToItemsResolver<TParent>;
}

export interface FileListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileListResponseToGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSchoolListResponseTypeResolver<TParent = any> {
  count?: SchoolListResponseToCountResolver<TParent>;
  groups?: SchoolListResponseToGroupsResolver<TParent>;
  items?: SchoolListResponseToItemsResolver<TParent>;
}

export interface SchoolListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SchoolListResponseToGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SchoolListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTechnologyLogoListResponseTypeResolver<TParent = any> {
  count?: TechnologyLogoListResponseToCountResolver<TParent>;
  groups?: TechnologyLogoListResponseToGroupsResolver<TParent>;
  items?: TechnologyLogoListResponseToItemsResolver<TParent>;
}

export interface TechnologyLogoListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TechnologyLogoListResponseToGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TechnologyLogoListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSettingListResponseTypeResolver<TParent = any> {
  count?: SettingListResponseToCountResolver<TParent>;
  groups?: SettingListResponseToGroupsResolver<TParent>;
  items?: SettingListResponseToItemsResolver<TParent>;
}

export interface SettingListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingListResponseToGroupsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSettingTypeResolver<TParent = any> {
  _description?: SettingTo_descriptionResolver<TParent>;
  bgColor?: SettingToBgColorResolver<TParent>;
  buttonLinkColor?: SettingToButtonLinkColorResolver<TParent>;
  containerColor?: SettingToContainerColorResolver<TParent>;
  createdAt?: SettingToCreatedAtResolver<TParent>;
  createdBy?: SettingToCreatedByResolver<TParent>;
  currency?: SettingToCurrencyResolver<TParent>;
  dateFormat?: SettingToDateFormatResolver<TParent>;
  landingPageImage?: SettingToLandingPageImageResolver<TParent>;
  language?: SettingToLanguageResolver<TParent>;
  leftNavColor?: SettingToLeftNavColorResolver<TParent>;
  menuBarBGColor?: SettingToMenuBarBGColorResolver<TParent>;
  menuBarIconsColor?: SettingToMenuBarIconsColorResolver<TParent>;
  menuBarLogo?: SettingToMenuBarLogoResolver<TParent>;
  passwordMinLength?: SettingToPasswordMinLengthResolver<TParent>;
  passwordRequireLowercase?: SettingToPasswordRequireLowercaseResolver<TParent>;
  passwordRequireNumbers?: SettingToPasswordRequireNumbersResolver<TParent>;
  passwordRequireSpecial?: SettingToPasswordRequireSpecialResolver<TParent>;
  passwordRequireUppercase?: SettingToPasswordRequireUppercaseResolver<TParent>;
  passwordUpdateInterval?: SettingToPasswordUpdateIntervalResolver<TParent>;
  rememberDevice?: SettingToRememberDeviceResolver<TParent>;
  timezone?: SettingToTimezoneResolver<TParent>;
  updatedAt?: SettingToUpdatedAtResolver<TParent>;
  userInterfaceStyle?: SettingToUserInterfaceStyleResolver<TParent>;
  vanityUrl?: SettingToVanityUrlResolver<TParent>;
}

export interface SettingTo_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToBgColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToButtonLinkColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToContainerColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToDateFormatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToLandingPageImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToLanguageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToLeftNavColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToMenuBarBGColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToMenuBarIconsColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToMenuBarLogoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToPasswordMinLengthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToPasswordRequireLowercaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToPasswordRequireNumbersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToPasswordRequireSpecialResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToPasswordRequireUppercaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToPasswordUpdateIntervalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToRememberDeviceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToTimezoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToUserInterfaceStyleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingToVanityUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserPermissionListTypeResolver<TParent = any> {
  count?: UserPermissionListToCountResolver<TParent>;
  items?: UserPermissionListToItemsResolver<TParent>;
}

export interface UserPermissionListToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserPermissionListToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserPermissionTypeResolver<TParent = any> {
  permission?: UserPermissionToPermissionResolver<TParent>;
  resource?: UserPermissionToResourceResolver<TParent>;
  resourceType?: UserPermissionToResourceTypeResolver<TParent>;
}

export interface UserPermissionToPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserPermissionToResourceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserPermissionToResourceTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLApplicationTypeResolver<TParent = any> {
  appType?: ApplicationToAppTypeResolver<TParent>;
  createdAt?: ApplicationToCreatedAtResolver<TParent>;
  description?: ApplicationToDescriptionResolver<TParent>;
  displayName?: ApplicationToDisplayNameResolver<TParent>;
  id?: ApplicationToIdResolver<TParent>;
  name?: ApplicationToNameResolver<TParent>;
  status?: ApplicationToStatusResolver<TParent>;
}

export interface ApplicationToAppTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApplicationToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApplicationToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApplicationToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApplicationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApplicationToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApplicationToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLApplicationListResponseTypeResolver<TParent = any> {
  count?: ApplicationListResponseToCountResolver<TParent>;
  items?: ApplicationListResponseToItemsResolver<TParent>;
}

export interface ApplicationListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApplicationListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAsyncSessionStatusResponseTypeResolver<TParent = any> {
  message?: AsyncSessionStatusResponseToMessageResolver<TParent>;
  status?: AsyncSessionStatusResponseToStatusResolver<TParent>;
}

export interface AsyncSessionStatusResponseToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AsyncSessionStatusResponseToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAuthenticationSettingTypeResolver<TParent = any> {
  _description?: AuthenticationSettingTo_descriptionResolver<TParent>;
  allowedCallbacks?: AuthenticationSettingToAllowedCallbacksResolver<TParent>;
  allowedLogouts?: AuthenticationSettingToAllowedLogoutsResolver<TParent>;
  allowedWebOrigins?: AuthenticationSettingToAllowedWebOriginsResolver<TParent>;
  connections?: AuthenticationSettingToConnectionsResolver<TParent>;
  createdAt?: AuthenticationSettingToCreatedAtResolver<TParent>;
  createdBy?: AuthenticationSettingToCreatedByResolver<TParent>;
  updatedAt?: AuthenticationSettingToUpdatedAtResolver<TParent>;
}

export interface AuthenticationSettingTo_descriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationSettingToAllowedCallbacksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationSettingToAllowedLogoutsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationSettingToAllowedWebOriginsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationSettingToConnectionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationSettingToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationSettingToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationSettingToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAuthenticationProfileConnectionOptionsTypeResolver<TParent = any> {
  facebook?: AuthenticationProfileConnectionOptionsToFacebookResolver<TParent>;
  github?: AuthenticationProfileConnectionOptionsToGithubResolver<TParent>;
  google?: AuthenticationProfileConnectionOptionsToGoogleResolver<TParent>;
}

export interface AuthenticationProfileConnectionOptionsToFacebookResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileConnectionOptionsToGithubResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileConnectionOptionsToGoogleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFacebookOptionsTypeResolver<TParent = any> {
  app_id?: FacebookOptionsToApp_idResolver<TParent>;
  app_secret?: FacebookOptionsToApp_secretResolver<TParent>;
  enabled?: FacebookOptionsToEnabledResolver<TParent>;
}

export interface FacebookOptionsToApp_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FacebookOptionsToApp_secretResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FacebookOptionsToEnabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGithubOptionsTypeResolver<TParent = any> {
  client_id?: GithubOptionsToClient_idResolver<TParent>;
  client_secret?: GithubOptionsToClient_secretResolver<TParent>;
  enabled?: GithubOptionsToEnabledResolver<TParent>;
}

export interface GithubOptionsToClient_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GithubOptionsToClient_secretResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GithubOptionsToEnabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGoogleOptionsTypeResolver<TParent = any> {
  client_id?: GoogleOptionsToClient_idResolver<TParent>;
  client_secret?: GoogleOptionsToClient_secretResolver<TParent>;
  enabled?: GoogleOptionsToEnabledResolver<TParent>;
}

export interface GoogleOptionsToClient_idResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GoogleOptionsToClient_secretResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GoogleOptionsToEnabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBillingCurrentPlanResponseTypeResolver<TParent = any> {
  displayName?: BillingCurrentPlanResponseToDisplayNameResolver<TParent>;
  id?: BillingCurrentPlanResponseToIdResolver<TParent>;
  name?: BillingCurrentPlanResponseToNameResolver<TParent>;
  nextPlan?: BillingCurrentPlanResponseToNextPlanResolver<TParent>;
  price?: BillingCurrentPlanResponseToPriceResolver<TParent>;
  status?: BillingCurrentPlanResponseToStatusResolver<TParent>;
  trialEnd?: BillingCurrentPlanResponseToTrialEndResolver<TParent>;
}

export interface BillingCurrentPlanResponseToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingCurrentPlanResponseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingCurrentPlanResponseToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingCurrentPlanResponseToNextPlanResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingCurrentPlanResponseToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingCurrentPlanResponseToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingCurrentPlanResponseToTrialEndResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBillingNextPlanResponseTypeResolver<TParent = any> {
  displayName?: BillingNextPlanResponseToDisplayNameResolver<TParent>;
  id?: BillingNextPlanResponseToIdResolver<TParent>;
  name?: BillingNextPlanResponseToNameResolver<TParent>;
  price?: BillingNextPlanResponseToPriceResolver<TParent>;
}

export interface BillingNextPlanResponseToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingNextPlanResponseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingNextPlanResponseToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingNextPlanResponseToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBillingDetailsResponseTypeResolver<TParent = any> {
  brand?: BillingDetailsResponseToBrandResolver<TParent>;
  expMonth?: BillingDetailsResponseToExpMonthResolver<TParent>;
  expYear?: BillingDetailsResponseToExpYearResolver<TParent>;
  last4?: BillingDetailsResponseToLast4Resolver<TParent>;
}

export interface BillingDetailsResponseToBrandResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingDetailsResponseToExpMonthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingDetailsResponseToExpYearResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingDetailsResponseToLast4Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBillingInvoicesListResponseTypeResolver<TParent = any> {
  count?: BillingInvoicesListResponseToCountResolver<TParent>;
  items?: BillingInvoicesListResponseToItemsResolver<TParent>;
}

export interface BillingInvoicesListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoicesListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBillingInvoiceItemTypeResolver<TParent = any> {
  amountDue?: BillingInvoiceItemToAmountDueResolver<TParent>;
  amountPaid?: BillingInvoiceItemToAmountPaidResolver<TParent>;
  amountRemaining?: BillingInvoiceItemToAmountRemainingResolver<TParent>;
  description?: BillingInvoiceItemToDescriptionResolver<TParent>;
  endingBalance?: BillingInvoiceItemToEndingBalanceResolver<TParent>;
  id?: BillingInvoiceItemToIdResolver<TParent>;
  invoicePdf?: BillingInvoiceItemToInvoicePdfResolver<TParent>;
  number?: BillingInvoiceItemToNumberResolver<TParent>;
  organization?: BillingInvoiceItemToOrganizationResolver<TParent>;
  paid?: BillingInvoiceItemToPaidResolver<TParent>;
  periodEnd?: BillingInvoiceItemToPeriodEndResolver<TParent>;
  periodStart?: BillingInvoiceItemToPeriodStartResolver<TParent>;
  plan?: BillingInvoiceItemToPlanResolver<TParent>;
  status?: BillingInvoiceItemToStatusResolver<TParent>;
  total?: BillingInvoiceItemToTotalResolver<TParent>;
  workspace?: BillingInvoiceItemToWorkspaceResolver<TParent>;
}

export interface BillingInvoiceItemToAmountDueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoiceItemToAmountPaidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoiceItemToAmountRemainingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoiceItemToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoiceItemToEndingBalanceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoiceItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoiceItemToInvoicePdfResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoiceItemToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoiceItemToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoiceItemToPaidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoiceItemToPeriodEndResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoiceItemToPeriodStartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoiceItemToPlanResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoiceItemToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoiceItemToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoiceItemToWorkspaceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBillingInvoiceItemOrganizationInfoTypeResolver<TParent = any> {
  id?: BillingInvoiceItemOrganizationInfoToIdResolver<TParent>;
  name?: BillingInvoiceItemOrganizationInfoToNameResolver<TParent>;
}

export interface BillingInvoiceItemOrganizationInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoiceItemOrganizationInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBillingInvoiceItemPlanInfoTypeResolver<TParent = any> {
  displayName?: BillingInvoiceItemPlanInfoToDisplayNameResolver<TParent>;
  id?: BillingInvoiceItemPlanInfoToIdResolver<TParent>;
  name?: BillingInvoiceItemPlanInfoToNameResolver<TParent>;
}

export interface BillingInvoiceItemPlanInfoToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoiceItemPlanInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoiceItemPlanInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBillingInvoiceItemWorkspaceInfoTypeResolver<TParent = any> {
  id?: BillingInvoiceItemWorkspaceInfoToIdResolver<TParent>;
  name?: BillingInvoiceItemWorkspaceInfoToNameResolver<TParent>;
}

export interface BillingInvoiceItemWorkspaceInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingInvoiceItemWorkspaceInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBillingMetricUsageQuotasListResponseTypeResolver<TParent = any> {
  count?: BillingMetricUsageQuotasListResponseToCountResolver<TParent>;
  items?: BillingMetricUsageQuotasListResponseToItemsResolver<TParent>;
}

export interface BillingMetricUsageQuotasListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingMetricUsageQuotasListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBillingMetricUsageQuotaItemTypeResolver<TParent = any> {
  limitMetric?: BillingMetricUsageQuotaItemToLimitMetricResolver<TParent>;
  value?: BillingMetricUsageQuotaItemToValueResolver<TParent>;
}

export interface BillingMetricUsageQuotaItemToLimitMetricResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingMetricUsageQuotaItemToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBillingLimitMetricItemTypeResolver<TParent = any> {
  displayName?: BillingLimitMetricItemToDisplayNameResolver<TParent>;
  name?: BillingLimitMetricItemToNameResolver<TParent>;
  showPriority?: BillingLimitMetricItemToShowPriorityResolver<TParent>;
  unit?: BillingLimitMetricItemToUnitResolver<TParent>;
}

export interface BillingLimitMetricItemToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingLimitMetricItemToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingLimitMetricItemToShowPriorityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingLimitMetricItemToUnitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBillingMetricUsagesListResponseTypeResolver<TParent = any> {
  count?: BillingMetricUsagesListResponseToCountResolver<TParent>;
  items?: BillingMetricUsagesListResponseToItemsResolver<TParent>;
}

export interface BillingMetricUsagesListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingMetricUsagesListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBillingMetricUsageItemTypeResolver<TParent = any> {
  limitMetric?: BillingMetricUsageItemToLimitMetricResolver<TParent>;
  value?: BillingMetricUsageItemToValueResolver<TParent>;
}

export interface BillingMetricUsageItemToLimitMetricResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingMetricUsageItemToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeployStatusResultTypeResolver<TParent = any> {
  message?: DeployStatusResultToMessageResolver<TParent>;
  status?: DeployStatusResultToStatusResolver<TParent>;
}

export interface DeployStatusResultToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployStatusResultToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFileUploadInfoResponseTypeResolver<TParent = any> {
  apiKey?: FileUploadInfoResponseToApiKeyResolver<TParent>;
  path?: FileUploadInfoResponseToPathResolver<TParent>;
  policy?: FileUploadInfoResponseToPolicyResolver<TParent>;
  signature?: FileUploadInfoResponseToSignatureResolver<TParent>;
}

export interface FileUploadInfoResponseToApiKeyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileUploadInfoResponseToPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileUploadInfoResponseToPolicyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileUploadInfoResponseToSignatureResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFunctionListResponseTypeResolver<TParent = any> {
  count?: FunctionListResponseToCountResolver<TParent>;
  items?: FunctionListResponseToItemsResolver<TParent>;
}

export interface FunctionListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFunctionInfoTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'FunctionResolverInfo' | 'FunctionTaskInfo' | 'FunctionTriggerInfo' | 'FunctionWebhookInfo' | Promise<'FunctionResolverInfo' | 'FunctionTaskInfo' | 'FunctionTriggerInfo' | 'FunctionWebhookInfo'>;
}
export interface GQLWorkspaceTransferItemTypeResolver<TParent = any> {
  newOwnerEmail?: WorkspaceTransferItemToNewOwnerEmailResolver<TParent>;
  newOwnerFirstName?: WorkspaceTransferItemToNewOwnerFirstNameResolver<TParent>;
  newOwnerLastName?: WorkspaceTransferItemToNewOwnerLastNameResolver<TParent>;
  ownerEmail?: WorkspaceTransferItemToOwnerEmailResolver<TParent>;
  ownerFirstName?: WorkspaceTransferItemToOwnerFirstNameResolver<TParent>;
  ownerLastName?: WorkspaceTransferItemToOwnerLastNameResolver<TParent>;
  status?: WorkspaceTransferItemToStatusResolver<TParent>;
  workspaceId?: WorkspaceTransferItemToWorkspaceIdResolver<TParent>;
  workspaceName?: WorkspaceTransferItemToWorkspaceNameResolver<TParent>;
}

export interface WorkspaceTransferItemToNewOwnerEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceTransferItemToNewOwnerFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceTransferItemToNewOwnerLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceTransferItemToOwnerEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceTransferItemToOwnerFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceTransferItemToOwnerLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceTransferItemToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceTransferItemToWorkspaceIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceTransferItemToWorkspaceNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemQueryTypeResolver<TParent = any> {
  application?: SystemQueryToApplicationResolver<TParent>;
  applicationsList?: SystemQueryToApplicationsListResolver<TParent>;
  billingCurrentPlan?: SystemQueryToBillingCurrentPlanResolver<TParent>;
  billingDetails?: SystemQueryToBillingDetailsResolver<TParent>;
  billingInvoicesList?: SystemQueryToBillingInvoicesListResolver<TParent>;
  billingMetricUsageQuotasList?: SystemQueryToBillingMetricUsageQuotasListResolver<TParent>;
  billingMetricUsagesList?: SystemQueryToBillingMetricUsagesListResolver<TParent>;
  ciGenerate?: SystemQueryToCiGenerateResolver<TParent>;
  ciPlan?: SystemQueryToCiPlanResolver<TParent>;
  ciStatus?: SystemQueryToCiStatusResolver<TParent>;
  deployStatus?: SystemQueryToDeployStatusResolver<TParent>;
  environmentBackupsList?: SystemQueryToEnvironmentBackupsListResolver<TParent>;
  environmentMember?: SystemQueryToEnvironmentMemberResolver<TParent>;
  environmentMembersList?: SystemQueryToEnvironmentMembersListResolver<TParent>;
  environmentSettings?: SystemQueryToEnvironmentSettingsResolver<TParent>;
  environmentsList?: SystemQueryToEnvironmentsListResolver<TParent>;
  functionsList?: SystemQueryToFunctionsListResolver<TParent>;
  getEnvironmentRoles?: SystemQueryToGetEnvironmentRolesResolver<TParent>;
  getFrontendPlanId?: SystemQueryToGetFrontendPlanIdResolver<TParent>;
  getWorkspaceTransferInfo?: SystemQueryToGetWorkspaceTransferInfoResolver<TParent>;
  inboxEventsList?: SystemQueryToInboxEventsListResolver<TParent>;
  introspection?: SystemQueryToIntrospectionResolver<TParent>;
  logs?: SystemQueryToLogsResolver<TParent>;
  logsList?: SystemQueryToLogsListResolver<TParent>;
  memberAccount?: SystemQueryToMemberAccountResolver<TParent>;
  memberBillingHistory?: SystemQueryToMemberBillingHistoryResolver<TParent>;
  memberInvitation?: SystemQueryToMemberInvitationResolver<TParent>;
  memberInvitationsList?: SystemQueryToMemberInvitationsListResolver<TParent>;
  memberPaymentDetails?: SystemQueryToMemberPaymentDetailsResolver<TParent>;
  organizationBillingHistory?: SystemQueryToOrganizationBillingHistoryResolver<TParent>;
  organizationById?: SystemQueryToOrganizationByIdResolver<TParent>;
  organizationInvitationById?: SystemQueryToOrganizationInvitationByIdResolver<TParent>;
  organizationPaymentDetails?: SystemQueryToOrganizationPaymentDetailsResolver<TParent>;
  organizationWorkspaceAddSession?: SystemQueryToOrganizationWorkspaceAddSessionResolver<TParent>;
  organizationsListAll?: SystemQueryToOrganizationsListAllResolver<TParent>;
  organizationsListByUser?: SystemQueryToOrganizationsListByUserResolver<TParent>;
  table?: SystemQueryToTableResolver<TParent>;
  tableField?: SystemQueryToTableFieldResolver<TParent>;
  tablesList?: SystemQueryToTablesListResolver<TParent>;
  userBillingConfiguration?: SystemQueryToUserBillingConfigurationResolver<TParent>;
  userInvitationsList?: SystemQueryToUserInvitationsListResolver<TParent>;
  workspaceBillingHistory?: SystemQueryToWorkspaceBillingHistoryResolver<TParent>;
  workspacePaymentDetails?: SystemQueryToWorkspacePaymentDetailsResolver<TParent>;
  workspacesFrontendList?: SystemQueryToWorkspacesFrontendListResolver<TParent>;
  workspacesList?: SystemQueryToWorkspacesListResolver<TParent>;
}

export interface SystemQueryToApplicationArgs {
  id: string;
}
export interface SystemQueryToApplicationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToApplicationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToApplicationsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToBillingCurrentPlanResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToBillingDetailsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToBillingInvoicesListArgs {
  after?: string;
  before?: string;
  by?: GQLSystemBillingInvoicesListFilterType;
  limit?: number;
}
export interface SystemQueryToBillingInvoicesListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToBillingInvoicesListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToBillingMetricUsageQuotasListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToBillingMetricUsagesListArgs {
  filter?: GQLSystemBillingMetricUsagesListFilter;
}
export interface SystemQueryToBillingMetricUsagesListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToBillingMetricUsagesListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToCiGenerateArgs {
  sourceEnvironmentId?: string;
  tables?: Array<string>;
  targetEnvironmentId?: string;
}
export interface SystemQueryToCiGenerateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToCiGenerateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToCiPlanArgs {
  sourceEnvironmentId?: string;
  tables?: Array<string>;
  targetEnvironmentId?: string;
}
export interface SystemQueryToCiPlanResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToCiPlanArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToCiStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToDeployStatusArgs {
  buildName: string;
}
export interface SystemQueryToDeployStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToDeployStatusArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToEnvironmentBackupsListArgs {
  environmentName?: string;
}
export interface SystemQueryToEnvironmentBackupsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToEnvironmentBackupsListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToEnvironmentMemberArgs {
  filter?: GQLSystemEnvironmentMemberFilter;
}
export interface SystemQueryToEnvironmentMemberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToEnvironmentMemberArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToEnvironmentMembersListArgs {
  filter?: GQLSystemEnvironmentMembersListFilter;
  first?: number;
  skip?: number;
  sort?: Array<GQLSystemEnvironmentMembersListSort>;
}
export interface SystemQueryToEnvironmentMembersListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToEnvironmentMembersListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToEnvironmentSettingsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToEnvironmentsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToFunctionsListArgs {
  applicationId?: string;
  filter?: GQLSystemFunctionInfoFilter;
  orderBy?: Array<GQLSystemFunctionInfoOrderBy | null>;
}
export interface SystemQueryToFunctionsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToFunctionsListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToGetEnvironmentRolesArgs {
  email?: string;
  workspaceId: string;
}
export interface SystemQueryToGetEnvironmentRolesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToGetEnvironmentRolesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToGetFrontendPlanIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToGetWorkspaceTransferInfoArgs {
  workspaceId: string;
}
export interface SystemQueryToGetWorkspaceTransferInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToGetWorkspaceTransferInfoArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToInboxEventsListArgs {
  filter?: GQLInboxEventsListFilter;
  first?: number;
  skip?: number;
}
export interface SystemQueryToInboxEventsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToInboxEventsListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToIntrospectionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToLogsArgs {
  applicationId?: string;
  endTime?: GQLDateTime;
  functionName: string;
  limit?: number;
  startTime?: GQLDateTime;
}
export interface SystemQueryToLogsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToLogsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToLogsListArgs {
  applicationId?: string;
  endTime?: GQLDateTime;
  functionName: string;
  limit?: number;
  startTime?: GQLDateTime;
}
export interface SystemQueryToLogsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToLogsListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToMemberAccountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToMemberBillingHistoryArgs {
  first?: number;
  hideOrganizationInvoices?: boolean;
  skip?: number;
}
export interface SystemQueryToMemberBillingHistoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToMemberBillingHistoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToMemberInvitationArgs {
  id: string;
}
export interface SystemQueryToMemberInvitationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToMemberInvitationArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToMemberInvitationsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToMemberPaymentDetailsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToOrganizationBillingHistoryArgs {
  first?: number;
  hideWorkspaceInvoices?: boolean;
  organizationId: string;
  skip?: number;
}
export interface SystemQueryToOrganizationBillingHistoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToOrganizationBillingHistoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToOrganizationByIdArgs {
  organizationId: string;
}
export interface SystemQueryToOrganizationByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToOrganizationByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToOrganizationInvitationByIdArgs {
  invitationId: string;
}
export interface SystemQueryToOrganizationInvitationByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToOrganizationInvitationByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToOrganizationPaymentDetailsArgs {
  organizationId: string;
}
export interface SystemQueryToOrganizationPaymentDetailsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToOrganizationPaymentDetailsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToOrganizationWorkspaceAddSessionArgs {
  sessionId: string;
}
export interface SystemQueryToOrganizationWorkspaceAddSessionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToOrganizationWorkspaceAddSessionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToOrganizationsListAllResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToOrganizationsListByUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToTableArgs {
  id?: string;
  name?: string;
}
export interface SystemQueryToTableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToTableArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToTableFieldArgs {
  id: string;
}
export interface SystemQueryToTableFieldResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToTableFieldArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToTablesListArgs {
  filter?: GQLSystemTableListFilter;
}
export interface SystemQueryToTablesListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToTablesListArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToUserBillingConfigurationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToUserInvitationsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToWorkspaceBillingHistoryArgs {
  first?: number;
  skip?: number;
}
export interface SystemQueryToWorkspaceBillingHistoryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemQueryToWorkspaceBillingHistoryArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToWorkspacePaymentDetailsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToWorkspacesFrontendListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemQueryToWorkspacesListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemApplicationTypeResolver<TParent = any> {
  appType?: SystemApplicationToAppTypeResolver<TParent>;
  createdAt?: SystemApplicationToCreatedAtResolver<TParent>;
  description?: SystemApplicationToDescriptionResolver<TParent>;
  displayName?: SystemApplicationToDisplayNameResolver<TParent>;
  id?: SystemApplicationToIdResolver<TParent>;
  name?: SystemApplicationToNameResolver<TParent>;
  status?: SystemApplicationToStatusResolver<TParent>;
}

export interface SystemApplicationToAppTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemApplicationToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemApplicationToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemApplicationToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemApplicationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemApplicationToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemApplicationToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemApplicationListResponseTypeResolver<TParent = any> {
  count?: SystemApplicationListResponseToCountResolver<TParent>;
  items?: SystemApplicationListResponseToItemsResolver<TParent>;
}

export interface SystemApplicationListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemApplicationListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemBillingCurrentPlanResponseTypeResolver<TParent = any> {
  displayName?: SystemBillingCurrentPlanResponseToDisplayNameResolver<TParent>;
  id?: SystemBillingCurrentPlanResponseToIdResolver<TParent>;
  name?: SystemBillingCurrentPlanResponseToNameResolver<TParent>;
  nextPlan?: SystemBillingCurrentPlanResponseToNextPlanResolver<TParent>;
  price?: SystemBillingCurrentPlanResponseToPriceResolver<TParent>;
  status?: SystemBillingCurrentPlanResponseToStatusResolver<TParent>;
  trialEnd?: SystemBillingCurrentPlanResponseToTrialEndResolver<TParent>;
}

export interface SystemBillingCurrentPlanResponseToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingCurrentPlanResponseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingCurrentPlanResponseToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingCurrentPlanResponseToNextPlanResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingCurrentPlanResponseToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingCurrentPlanResponseToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingCurrentPlanResponseToTrialEndResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemBillingNextPlanResponseTypeResolver<TParent = any> {
  displayName?: SystemBillingNextPlanResponseToDisplayNameResolver<TParent>;
  id?: SystemBillingNextPlanResponseToIdResolver<TParent>;
  name?: SystemBillingNextPlanResponseToNameResolver<TParent>;
  price?: SystemBillingNextPlanResponseToPriceResolver<TParent>;
}

export interface SystemBillingNextPlanResponseToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingNextPlanResponseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingNextPlanResponseToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingNextPlanResponseToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemBillingDetailsResponseTypeResolver<TParent = any> {
  brand?: SystemBillingDetailsResponseToBrandResolver<TParent>;
  expMonth?: SystemBillingDetailsResponseToExpMonthResolver<TParent>;
  expYear?: SystemBillingDetailsResponseToExpYearResolver<TParent>;
  last4?: SystemBillingDetailsResponseToLast4Resolver<TParent>;
}

export interface SystemBillingDetailsResponseToBrandResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingDetailsResponseToExpMonthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingDetailsResponseToExpYearResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingDetailsResponseToLast4Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemBillingInvoicesListResponseTypeResolver<TParent = any> {
  count?: SystemBillingInvoicesListResponseToCountResolver<TParent>;
  items?: SystemBillingInvoicesListResponseToItemsResolver<TParent>;
}

export interface SystemBillingInvoicesListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoicesListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemBillingInvoiceItemTypeResolver<TParent = any> {
  amountDue?: SystemBillingInvoiceItemToAmountDueResolver<TParent>;
  amountPaid?: SystemBillingInvoiceItemToAmountPaidResolver<TParent>;
  amountRemaining?: SystemBillingInvoiceItemToAmountRemainingResolver<TParent>;
  description?: SystemBillingInvoiceItemToDescriptionResolver<TParent>;
  endingBalance?: SystemBillingInvoiceItemToEndingBalanceResolver<TParent>;
  id?: SystemBillingInvoiceItemToIdResolver<TParent>;
  invoicePdf?: SystemBillingInvoiceItemToInvoicePdfResolver<TParent>;
  number?: SystemBillingInvoiceItemToNumberResolver<TParent>;
  organization?: SystemBillingInvoiceItemToOrganizationResolver<TParent>;
  paid?: SystemBillingInvoiceItemToPaidResolver<TParent>;
  periodEnd?: SystemBillingInvoiceItemToPeriodEndResolver<TParent>;
  periodStart?: SystemBillingInvoiceItemToPeriodStartResolver<TParent>;
  plan?: SystemBillingInvoiceItemToPlanResolver<TParent>;
  status?: SystemBillingInvoiceItemToStatusResolver<TParent>;
  total?: SystemBillingInvoiceItemToTotalResolver<TParent>;
  workspace?: SystemBillingInvoiceItemToWorkspaceResolver<TParent>;
}

export interface SystemBillingInvoiceItemToAmountDueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoiceItemToAmountPaidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoiceItemToAmountRemainingResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoiceItemToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoiceItemToEndingBalanceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoiceItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoiceItemToInvoicePdfResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoiceItemToNumberResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoiceItemToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoiceItemToPaidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoiceItemToPeriodEndResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoiceItemToPeriodStartResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoiceItemToPlanResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoiceItemToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoiceItemToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoiceItemToWorkspaceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemBillingInvoiceItemOrganizationInfoTypeResolver<TParent = any> {
  id?: SystemBillingInvoiceItemOrganizationInfoToIdResolver<TParent>;
  name?: SystemBillingInvoiceItemOrganizationInfoToNameResolver<TParent>;
}

export interface SystemBillingInvoiceItemOrganizationInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoiceItemOrganizationInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemBillingInvoiceItemPlanInfoTypeResolver<TParent = any> {
  displayName?: SystemBillingInvoiceItemPlanInfoToDisplayNameResolver<TParent>;
  id?: SystemBillingInvoiceItemPlanInfoToIdResolver<TParent>;
  name?: SystemBillingInvoiceItemPlanInfoToNameResolver<TParent>;
}

export interface SystemBillingInvoiceItemPlanInfoToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoiceItemPlanInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoiceItemPlanInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemBillingInvoiceItemWorkspaceInfoTypeResolver<TParent = any> {
  id?: SystemBillingInvoiceItemWorkspaceInfoToIdResolver<TParent>;
  name?: SystemBillingInvoiceItemWorkspaceInfoToNameResolver<TParent>;
}

export interface SystemBillingInvoiceItemWorkspaceInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingInvoiceItemWorkspaceInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemBillingMetricUsageQuotasListResponseTypeResolver<TParent = any> {
  count?: SystemBillingMetricUsageQuotasListResponseToCountResolver<TParent>;
  items?: SystemBillingMetricUsageQuotasListResponseToItemsResolver<TParent>;
}

export interface SystemBillingMetricUsageQuotasListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingMetricUsageQuotasListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemBillingMetricUsageQuotaItemTypeResolver<TParent = any> {
  limitMetric?: SystemBillingMetricUsageQuotaItemToLimitMetricResolver<TParent>;
  value?: SystemBillingMetricUsageQuotaItemToValueResolver<TParent>;
}

export interface SystemBillingMetricUsageQuotaItemToLimitMetricResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingMetricUsageQuotaItemToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemBillingLimitMetricItemTypeResolver<TParent = any> {
  displayName?: SystemBillingLimitMetricItemToDisplayNameResolver<TParent>;
  name?: SystemBillingLimitMetricItemToNameResolver<TParent>;
  showPriority?: SystemBillingLimitMetricItemToShowPriorityResolver<TParent>;
  unit?: SystemBillingLimitMetricItemToUnitResolver<TParent>;
}

export interface SystemBillingLimitMetricItemToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingLimitMetricItemToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingLimitMetricItemToShowPriorityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingLimitMetricItemToUnitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemBillingMetricUsagesListResponseTypeResolver<TParent = any> {
  count?: SystemBillingMetricUsagesListResponseToCountResolver<TParent>;
  items?: SystemBillingMetricUsagesListResponseToItemsResolver<TParent>;
}

export interface SystemBillingMetricUsagesListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingMetricUsagesListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemBillingMetricUsageItemTypeResolver<TParent = any> {
  limitMetric?: SystemBillingMetricUsageItemToLimitMetricResolver<TParent>;
  value?: SystemBillingMetricUsageItemToValueResolver<TParent>;
}

export interface SystemBillingMetricUsageItemToLimitMetricResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingMetricUsageItemToValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemGenerateEnvironmentOutputTypeResolver<TParent = any> {
  url?: SystemGenerateEnvironmentOutputToUrlResolver<TParent>;
}

export interface SystemGenerateEnvironmentOutputToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemPlanEnvironmentOutputTypeResolver<TParent = any> {
  url?: SystemPlanEnvironmentOutputToUrlResolver<TParent>;
}

export interface SystemPlanEnvironmentOutputToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemCiStatusOutputTypeResolver<TParent = any> {
  migrations?: SystemCiStatusOutputToMigrationsResolver<TParent>;
  status?: SystemCiStatusOutputToStatusResolver<TParent>;
}

export interface SystemCiStatusOutputToMigrationsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemCiStatusOutputToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemDeployStatusResultTypeResolver<TParent = any> {
  message?: SystemDeployStatusResultToMessageResolver<TParent>;
  status?: SystemDeployStatusResultToStatusResolver<TParent>;
}

export interface SystemDeployStatusResultToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemDeployStatusResultToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemEnvironmentBackupListResponseTypeResolver<TParent = any> {
  count?: SystemEnvironmentBackupListResponseToCountResolver<TParent>;
  items?: SystemEnvironmentBackupListResponseToItemsResolver<TParent>;
}

export interface SystemEnvironmentBackupListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentBackupListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnvironmentBackupItemTypeResolver<TParent = any> {
  name?: EnvironmentBackupItemToNameResolver<TParent>;
  size?: EnvironmentBackupItemToSizeResolver<TParent>;
}

export interface EnvironmentBackupItemToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnvironmentBackupItemToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemEnvironmentMemberTypeResolver<TParent = any> {
  avatar?: SystemEnvironmentMemberToAvatarResolver<TParent>;
  createdAt?: SystemEnvironmentMemberToCreatedAtResolver<TParent>;
  email?: SystemEnvironmentMemberToEmailResolver<TParent>;
  firstName?: SystemEnvironmentMemberToFirstNameResolver<TParent>;
  lastName?: SystemEnvironmentMemberToLastNameResolver<TParent>;
  permissions?: SystemEnvironmentMemberToPermissionsResolver<TParent>;
  roles?: SystemEnvironmentMemberToRolesResolver<TParent>;
  status?: SystemEnvironmentMemberToStatusResolver<TParent>;
}

export interface SystemEnvironmentMemberToAvatarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentMemberToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentMemberToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentMemberToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentMemberToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentMemberToPermissionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentMemberToRolesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentMemberToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemEnvironmentMemberAvatarTypeResolver<TParent = any> {
  downloadUrl?: SystemEnvironmentMemberAvatarToDownloadUrlResolver<TParent>;
  id?: SystemEnvironmentMemberAvatarToIdResolver<TParent>;
}

export interface SystemEnvironmentMemberAvatarToDownloadUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentMemberAvatarToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemEnvironmentMemberPermissionsListTypeResolver<TParent = any> {
  count?: SystemEnvironmentMemberPermissionsListToCountResolver<TParent>;
  items?: SystemEnvironmentMemberPermissionsListToItemsResolver<TParent>;
}

export interface SystemEnvironmentMemberPermissionsListToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentMemberPermissionsListToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemEnvironmentMemberPermissionTypeResolver<TParent = any> {
  permission?: SystemEnvironmentMemberPermissionToPermissionResolver<TParent>;
  resource?: SystemEnvironmentMemberPermissionToResourceResolver<TParent>;
  resourceType?: SystemEnvironmentMemberPermissionToResourceTypeResolver<TParent>;
}

export interface SystemEnvironmentMemberPermissionToPermissionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentMemberPermissionToResourceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentMemberPermissionToResourceTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemEnvironmentMemberRolesListTypeResolver<TParent = any> {
  count?: SystemEnvironmentMemberRolesListToCountResolver<TParent>;
  items?: SystemEnvironmentMemberRolesListToItemsResolver<TParent>;
}

export interface SystemEnvironmentMemberRolesListToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentMemberRolesListToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemEnvironmentMemberRoleTypeResolver<TParent = any> {
  id?: SystemEnvironmentMemberRoleToIdResolver<TParent>;
  name?: SystemEnvironmentMemberRoleToNameResolver<TParent>;
}

export interface SystemEnvironmentMemberRoleToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentMemberRoleToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemEnvironmentMembersListResponseTypeResolver<TParent = any> {
  count?: SystemEnvironmentMembersListResponseToCountResolver<TParent>;
  items?: SystemEnvironmentMembersListResponseToItemsResolver<TParent>;
}

export interface SystemEnvironmentMembersListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentMembersListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemEnvironmentSettingsTypeResolver<TParent = any> {
  deleteLock?: SystemEnvironmentSettingsToDeleteLockResolver<TParent>;
  fileManagementProvider?: SystemEnvironmentSettingsToFileManagementProviderResolver<TParent>;
}

export interface SystemEnvironmentSettingsToDeleteLockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentSettingsToFileManagementProviderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemEnvironmentsListResponseTypeResolver<TParent = any> {
  count?: SystemEnvironmentsListResponseToCountResolver<TParent>;
  items?: SystemEnvironmentsListResponseToItemsResolver<TParent>;
}

export interface SystemEnvironmentsListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentsListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnvironmentItemTypeResolver<TParent = any> {
  id?: EnvironmentItemToIdResolver<TParent>;
  name?: EnvironmentItemToNameResolver<TParent>;
}

export interface EnvironmentItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnvironmentItemToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemFunctionListResponseTypeResolver<TParent = any> {
  count?: SystemFunctionListResponseToCountResolver<TParent>;
  items?: SystemFunctionListResponseToItemsResolver<TParent>;
}

export interface SystemFunctionListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemFunctionInfoTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'SystemFunctionResolverInfo' | 'SystemFunctionTaskInfo' | 'SystemFunctionTriggerInfo' | 'SystemFunctionWebhookInfo' | Promise<'SystemFunctionResolverInfo' | 'SystemFunctionTaskInfo' | 'SystemFunctionTriggerInfo' | 'SystemFunctionWebhookInfo'>;
}
export interface GQLSystemEnvironmentRoleListTypeResolver<TParent = any> {
  environmentId?: SystemEnvironmentRoleListToEnvironmentIdResolver<TParent>;
  environmentName?: SystemEnvironmentRoleListToEnvironmentNameResolver<TParent>;
  exists?: SystemEnvironmentRoleListToExistsResolver<TParent>;
  roles?: SystemEnvironmentRoleListToRolesResolver<TParent>;
}

export interface SystemEnvironmentRoleListToEnvironmentIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentRoleListToEnvironmentNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentRoleListToExistsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentRoleListToRolesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemEnvironmentRoleBaseInfoTypeResolver<TParent = any> {
  id?: SystemEnvironmentRoleBaseInfoToIdResolver<TParent>;
  name?: SystemEnvironmentRoleBaseInfoToNameResolver<TParent>;
}

export interface SystemEnvironmentRoleBaseInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemEnvironmentRoleBaseInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemFrontendPlanIdItemTypeResolver<TParent = any> {
  id?: SystemFrontendPlanIdItemToIdResolver<TParent>;
}

export interface SystemFrontendPlanIdItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemInboxEventsListResponseTypeResolver<TParent = any> {
  count?: SystemInboxEventsListResponseToCountResolver<TParent>;
  items?: SystemInboxEventsListResponseToItemsResolver<TParent>;
}

export interface SystemInboxEventsListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventsListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemInboxEventItemTypeResolver<TParent = any> {
  createdAt?: SystemInboxEventItemToCreatedAtResolver<TParent>;
  details?: SystemInboxEventItemToDetailsResolver<TParent>;
  id?: SystemInboxEventItemToIdResolver<TParent>;
  isCompleted?: SystemInboxEventItemToIsCompletedResolver<TParent>;
  type?: SystemInboxEventItemToTypeResolver<TParent>;
}

export interface SystemInboxEventItemToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventItemToDetailsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventItemToIsCompletedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventItemToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemInboxEventDetailsUnionTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'SystemInboxEventEnvironmentInvitationDetails' | 'SystemInboxEventNotificationDetailsType' | 'SystemInboxEventOrganizationInvitationDetails' | Promise<'SystemInboxEventEnvironmentInvitationDetails' | 'SystemInboxEventNotificationDetailsType' | 'SystemInboxEventOrganizationInvitationDetails'>;
}
export interface GQLSystemInboxEventEnvironmentInvitationDetailsTypeResolver<TParent = any> {
  environmentName?: SystemInboxEventEnvironmentInvitationDetailsToEnvironmentNameResolver<TParent>;
  invitedBy?: SystemInboxEventEnvironmentInvitationDetailsToInvitedByResolver<TParent>;
  status?: SystemInboxEventEnvironmentInvitationDetailsToStatusResolver<TParent>;
  uuid?: SystemInboxEventEnvironmentInvitationDetailsToUuidResolver<TParent>;
  workspace?: SystemInboxEventEnvironmentInvitationDetailsToWorkspaceResolver<TParent>;
}

export interface SystemInboxEventEnvironmentInvitationDetailsToEnvironmentNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventEnvironmentInvitationDetailsToInvitedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventEnvironmentInvitationDetailsToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventEnvironmentInvitationDetailsToUuidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventEnvironmentInvitationDetailsToWorkspaceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemInboxEventInvitedByTypeResolver<TParent = any> {
  avatar?: SystemInboxEventInvitedByToAvatarResolver<TParent>;
  email?: SystemInboxEventInvitedByToEmailResolver<TParent>;
  firstName?: SystemInboxEventInvitedByToFirstNameResolver<TParent>;
  lastName?: SystemInboxEventInvitedByToLastNameResolver<TParent>;
}

export interface SystemInboxEventInvitedByToAvatarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventInvitedByToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventInvitedByToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventInvitedByToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGraphQLFileItemResponseTypeResolver<TParent = any> {
  downloadUrl?: GraphQLFileItemResponseToDownloadUrlResolver<TParent>;
  id?: GraphQLFileItemResponseToIdResolver<TParent>;
}

export interface GraphQLFileItemResponseToDownloadUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GraphQLFileItemResponseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemInboxEventWorkspaceTypeResolver<TParent = any> {
  apiHost?: SystemInboxEventWorkspaceToApiHostResolver<TParent>;
  avatar?: SystemInboxEventWorkspaceToAvatarResolver<TParent>;
  id?: SystemInboxEventWorkspaceToIdResolver<TParent>;
  name?: SystemInboxEventWorkspaceToNameResolver<TParent>;
}

export interface SystemInboxEventWorkspaceToApiHostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventWorkspaceToAvatarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventWorkspaceToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventWorkspaceToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemInboxEventNotificationDetailsTypeTypeResolver<TParent = any> {
  details?: SystemInboxEventNotificationDetailsTypeToDetailsResolver<TParent>;
  kind?: SystemInboxEventNotificationDetailsTypeToKindResolver<TParent>;
}

export interface SystemInboxEventNotificationDetailsTypeToDetailsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventNotificationDetailsTypeToKindResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemInboxEventOrganizationInvitationDetailsTypeResolver<TParent = any> {
  invitedBy?: SystemInboxEventOrganizationInvitationDetailsToInvitedByResolver<TParent>;
  organization?: SystemInboxEventOrganizationInvitationDetailsToOrganizationResolver<TParent>;
  status?: SystemInboxEventOrganizationInvitationDetailsToStatusResolver<TParent>;
  uuid?: SystemInboxEventOrganizationInvitationDetailsToUuidResolver<TParent>;
}

export interface SystemInboxEventOrganizationInvitationDetailsToInvitedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventOrganizationInvitationDetailsToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventOrganizationInvitationDetailsToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventOrganizationInvitationDetailsToUuidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemInboxEventOrganizationTypeResolver<TParent = any> {
  avatar?: SystemInboxEventOrganizationToAvatarResolver<TParent>;
  id?: SystemInboxEventOrganizationToIdResolver<TParent>;
  name?: SystemInboxEventOrganizationToNameResolver<TParent>;
}

export interface SystemInboxEventOrganizationToAvatarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventOrganizationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInboxEventOrganizationToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLIntrospectionQueryResponseTypeResolver<TParent = any> {
  url?: IntrospectionQueryResponseToUrlResolver<TParent>;
}

export interface IntrospectionQueryResponseToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemFunctionLogEntryTypeResolver<TParent = any> {
  message?: SystemFunctionLogEntryToMessageResolver<TParent>;
  timestamp?: SystemFunctionLogEntryToTimestampResolver<TParent>;
}

export interface SystemFunctionLogEntryToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionLogEntryToTimestampResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemMemberAccountInfoTypeResolver<TParent = any> {
  aboutMe?: SystemMemberAccountInfoToAboutMeResolver<TParent>;
  addressLine1?: SystemMemberAccountInfoToAddressLine1Resolver<TParent>;
  addressLine2?: SystemMemberAccountInfoToAddressLine2Resolver<TParent>;
  avatar?: SystemMemberAccountInfoToAvatarResolver<TParent>;
  city?: SystemMemberAccountInfoToCityResolver<TParent>;
  companyName?: SystemMemberAccountInfoToCompanyNameResolver<TParent>;
  country?: SystemMemberAccountInfoToCountryResolver<TParent>;
  createdAt?: SystemMemberAccountInfoToCreatedAtResolver<TParent>;
  email?: SystemMemberAccountInfoToEmailResolver<TParent>;
  firstName?: SystemMemberAccountInfoToFirstNameResolver<TParent>;
  githubUsername?: SystemMemberAccountInfoToGithubUsernameResolver<TParent>;
  isDeveloper?: SystemMemberAccountInfoToIsDeveloperResolver<TParent>;
  lastName?: SystemMemberAccountInfoToLastNameResolver<TParent>;
  learningMode?: SystemMemberAccountInfoToLearningModeResolver<TParent>;
  linkedInUsername?: SystemMemberAccountInfoToLinkedInUsernameResolver<TParent>;
  projectDescription?: SystemMemberAccountInfoToProjectDescriptionResolver<TParent>;
  role?: SystemMemberAccountInfoToRoleResolver<TParent>;
  state?: SystemMemberAccountInfoToStateResolver<TParent>;
  timezone?: SystemMemberAccountInfoToTimezoneResolver<TParent>;
  twitterUsername?: SystemMemberAccountInfoToTwitterUsernameResolver<TParent>;
  type?: SystemMemberAccountInfoToTypeResolver<TParent>;
  website?: SystemMemberAccountInfoToWebsiteResolver<TParent>;
  zipCode?: SystemMemberAccountInfoToZipCodeResolver<TParent>;
}

export interface SystemMemberAccountInfoToAboutMeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToAddressLine1Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToAddressLine2Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToAvatarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToCityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToCompanyNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToCountryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToGithubUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToIsDeveloperResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToLearningModeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToLinkedInUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToProjectDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToStateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToTimezoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToTwitterUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToWebsiteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberAccountInfoToZipCodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemMemberInvitationTypeResolver<TParent = any> {
  accepted?: SystemMemberInvitationToAcceptedResolver<TParent>;
  acceptedOn?: SystemMemberInvitationToAcceptedOnResolver<TParent>;
  apiHost?: SystemMemberInvitationToApiHostResolver<TParent>;
  email?: SystemMemberInvitationToEmailResolver<TParent>;
  firstName?: SystemMemberInvitationToFirstNameResolver<TParent>;
  id?: SystemMemberInvitationToIdResolver<TParent>;
  invitedBy?: SystemMemberInvitationToInvitedByResolver<TParent>;
  isRegistered?: SystemMemberInvitationToIsRegisteredResolver<TParent>;
  lastName?: SystemMemberInvitationToLastNameResolver<TParent>;
  resentOn?: SystemMemberInvitationToResentOnResolver<TParent>;
}

export interface SystemMemberInvitationToAcceptedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberInvitationToAcceptedOnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberInvitationToApiHostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberInvitationToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberInvitationToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberInvitationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberInvitationToInvitedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberInvitationToIsRegisteredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberInvitationToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberInvitationToResentOnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemInvitedByNameTypeResolver<TParent = any> {
  email?: SystemInvitedByNameToEmailResolver<TParent>;
  firstName?: SystemInvitedByNameToFirstNameResolver<TParent>;
  lastName?: SystemInvitedByNameToLastNameResolver<TParent>;
  workspaceName?: SystemInvitedByNameToWorkspaceNameResolver<TParent>;
}

export interface SystemInvitedByNameToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInvitedByNameToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInvitedByNameToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemInvitedByNameToWorkspaceNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemMemberInvitationsListTypeResolver<TParent = any> {
  count?: SystemMemberInvitationsListToCountResolver<TParent>;
  items?: SystemMemberInvitationsListToItemsResolver<TParent>;
}

export interface SystemMemberInvitationsListToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMemberInvitationsListToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemPaymentDetailsResponseTypeResolver<TParent = any> {
  brand?: SystemPaymentDetailsResponseToBrandResolver<TParent>;
  expMonth?: SystemPaymentDetailsResponseToExpMonthResolver<TParent>;
  expYear?: SystemPaymentDetailsResponseToExpYearResolver<TParent>;
  last4?: SystemPaymentDetailsResponseToLast4Resolver<TParent>;
}

export interface SystemPaymentDetailsResponseToBrandResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemPaymentDetailsResponseToExpMonthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemPaymentDetailsResponseToExpYearResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemPaymentDetailsResponseToLast4Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemOrganizationItemTypeResolver<TParent = any> {
  description?: SystemOrganizationItemToDescriptionResolver<TParent>;
  id?: SystemOrganizationItemToIdResolver<TParent>;
  image?: SystemOrganizationItemToImageResolver<TParent>;
  name?: SystemOrganizationItemToNameResolver<TParent>;
  predefinedPlans?: SystemOrganizationItemToPredefinedPlansResolver<TParent>;
  type?: SystemOrganizationItemToTypeResolver<TParent>;
  users?: SystemOrganizationItemToUsersResolver<TParent>;
}

export interface SystemOrganizationItemToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationItemToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationItemToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationItemToPredefinedPlansResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationItemToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationItemToUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemOrganizationItemImageTypeResolver<TParent = any> {
  downloadUrl?: SystemOrganizationItemImageToDownloadUrlResolver<TParent>;
  id?: SystemOrganizationItemImageToIdResolver<TParent>;
}

export interface SystemOrganizationItemImageToDownloadUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationItemImageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemBillingPlanBaseScalarInfoTypeResolver<TParent = any> {
  description?: SystemBillingPlanBaseScalarInfoToDescriptionResolver<TParent>;
  displayName?: SystemBillingPlanBaseScalarInfoToDisplayNameResolver<TParent>;
  id?: SystemBillingPlanBaseScalarInfoToIdResolver<TParent>;
  name?: SystemBillingPlanBaseScalarInfoToNameResolver<TParent>;
  price?: SystemBillingPlanBaseScalarInfoToPriceResolver<TParent>;
}

export interface SystemBillingPlanBaseScalarInfoToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingPlanBaseScalarInfoToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingPlanBaseScalarInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingPlanBaseScalarInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingPlanBaseScalarInfoToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemOrganizationUserInfoTypeResolver<TParent = any> {
  avatar?: SystemOrganizationUserInfoToAvatarResolver<TParent>;
  email?: SystemOrganizationUserInfoToEmailResolver<TParent>;
  firstName?: SystemOrganizationUserInfoToFirstNameResolver<TParent>;
  id?: SystemOrganizationUserInfoToIdResolver<TParent>;
  lastName?: SystemOrganizationUserInfoToLastNameResolver<TParent>;
  role?: SystemOrganizationUserInfoToRoleResolver<TParent>;
  status?: SystemOrganizationUserInfoToStatusResolver<TParent>;
  workspaces?: SystemOrganizationUserInfoToWorkspacesResolver<TParent>;
}

export interface SystemOrganizationUserInfoToAvatarResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationUserInfoToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationUserInfoToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationUserInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationUserInfoToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationUserInfoToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationUserInfoToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationUserInfoToWorkspacesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemOrganizationWorkspaceItemTypeResolver<TParent = any> {
  id?: SystemOrganizationWorkspaceItemToIdResolver<TParent>;
  name?: SystemOrganizationWorkspaceItemToNameResolver<TParent>;
  organization?: SystemOrganizationWorkspaceItemToOrganizationResolver<TParent>;
}

export interface SystemOrganizationWorkspaceItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationWorkspaceItemToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationWorkspaceItemToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemOrganizationBaseItemTypeResolver<TParent = any> {
  description?: SystemOrganizationBaseItemToDescriptionResolver<TParent>;
  id?: SystemOrganizationBaseItemToIdResolver<TParent>;
  name?: SystemOrganizationBaseItemToNameResolver<TParent>;
  type?: SystemOrganizationBaseItemToTypeResolver<TParent>;
}

export interface SystemOrganizationBaseItemToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationBaseItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationBaseItemToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationBaseItemToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemOrganizationInvitationTypeResolver<TParent = any> {
  accepted?: SystemOrganizationInvitationToAcceptedResolver<TParent>;
  email?: SystemOrganizationInvitationToEmailResolver<TParent>;
  emailFrom?: SystemOrganizationInvitationToEmailFromResolver<TParent>;
  firstName?: SystemOrganizationInvitationToFirstNameResolver<TParent>;
  firstNameFrom?: SystemOrganizationInvitationToFirstNameFromResolver<TParent>;
  id?: SystemOrganizationInvitationToIdResolver<TParent>;
  lastName?: SystemOrganizationInvitationToLastNameResolver<TParent>;
  lastNameFrom?: SystemOrganizationInvitationToLastNameFromResolver<TParent>;
  organization?: SystemOrganizationInvitationToOrganizationResolver<TParent>;
  role?: SystemOrganizationInvitationToRoleResolver<TParent>;
}

export interface SystemOrganizationInvitationToAcceptedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationInvitationToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationInvitationToEmailFromResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationInvitationToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationInvitationToFirstNameFromResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationInvitationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationInvitationToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationInvitationToLastNameFromResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationInvitationToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationInvitationToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemOrganizationWorkspaceAddSessionTypeResolver<TParent = any> {
  organization?: SystemOrganizationWorkspaceAddSessionToOrganizationResolver<TParent>;
  status?: SystemOrganizationWorkspaceAddSessionToStatusResolver<TParent>;
  user?: SystemOrganizationWorkspaceAddSessionToUserResolver<TParent>;
  workspace?: SystemOrganizationWorkspaceAddSessionToWorkspaceResolver<TParent>;
}

export interface SystemOrganizationWorkspaceAddSessionToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationWorkspaceAddSessionToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationWorkspaceAddSessionToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationWorkspaceAddSessionToWorkspaceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemOrganizationUserBaseInfoTypeResolver<TParent = any> {
  email?: SystemOrganizationUserBaseInfoToEmailResolver<TParent>;
  firstName?: SystemOrganizationUserBaseInfoToFirstNameResolver<TParent>;
  id?: SystemOrganizationUserBaseInfoToIdResolver<TParent>;
  lastName?: SystemOrganizationUserBaseInfoToLastNameResolver<TParent>;
  role?: SystemOrganizationUserBaseInfoToRoleResolver<TParent>;
  status?: SystemOrganizationUserBaseInfoToStatusResolver<TParent>;
}

export interface SystemOrganizationUserBaseInfoToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationUserBaseInfoToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationUserBaseInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationUserBaseInfoToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationUserBaseInfoToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationUserBaseInfoToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemOrganizationsListAllResponseTypeResolver<TParent = any> {
  count?: SystemOrganizationsListAllResponseToCountResolver<TParent>;
  items?: SystemOrganizationsListAllResponseToItemsResolver<TParent>;
}

export interface SystemOrganizationsListAllResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationsListAllResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemOrganizationsListResponseTypeResolver<TParent = any> {
  count?: SystemOrganizationsListResponseToCountResolver<TParent>;
  items?: SystemOrganizationsListResponseToItemsResolver<TParent>;
}

export interface SystemOrganizationsListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemOrganizationsListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemTableTypeResolver<TParent = any> {
  application?: SystemTableToApplicationResolver<TParent>;
  attributes?: SystemTableToAttributesResolver<TParent>;
  dataFeatures?: SystemTableToDataFeaturesResolver<TParent>;
  description?: SystemTableToDescriptionResolver<TParent>;
  displayName?: SystemTableToDisplayNameResolver<TParent>;
  fields?: SystemTableToFieldsResolver<TParent>;
  id?: SystemTableToIdResolver<TParent>;
  indexes?: SystemTableToIndexesResolver<TParent>;
  isSystem?: SystemTableToIsSystemResolver<TParent>;
  name?: SystemTableToNameResolver<TParent>;
  origin?: SystemTableToOriginResolver<TParent>;
  schemaFeatures?: SystemTableToSchemaFeaturesResolver<TParent>;
}

export interface SystemTableToApplicationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableToAttributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableToDataFeaturesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableToFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableToIndexesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableToIsSystemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableToOriginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableToSchemaFeaturesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemTableAttributesTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'SystemViewAttributes' | Promise<'SystemViewAttributes'>;
}
export interface GQLSystemViewAttributesTypeResolver<TParent = any> {
  query?: SystemViewAttributesToQueryResolver<TParent>;
}

export interface SystemViewAttributesToQueryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemTableDataFeaturesTypeResolver<TParent = any> {
  create?: SystemTableDataFeaturesToCreateResolver<TParent>;
  delete?: SystemTableDataFeaturesToDeleteResolver<TParent>;
  update?: SystemTableDataFeaturesToUpdateResolver<TParent>;
}

export interface SystemTableDataFeaturesToCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableDataFeaturesToDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableDataFeaturesToUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemTableFieldTypeResolver<TParent = any> {
  computedMode?: SystemTableFieldToComputedModeResolver<TParent>;
  dataFeatures?: SystemTableFieldToDataFeaturesResolver<TParent>;
  defaultValue?: SystemTableFieldToDefaultValueResolver<TParent>;
  description?: SystemTableFieldToDescriptionResolver<TParent>;
  displayName?: SystemTableFieldToDisplayNameResolver<TParent>;
  expression?: SystemTableFieldToExpressionResolver<TParent>;
  fieldType?: SystemTableFieldToFieldTypeResolver<TParent>;
  fieldTypeAttributes?: SystemTableFieldToFieldTypeAttributesResolver<TParent>;
  id?: SystemTableFieldToIdResolver<TParent>;
  isList?: SystemTableFieldToIsListResolver<TParent>;
  isMeta?: SystemTableFieldToIsMetaResolver<TParent>;
  isRequired?: SystemTableFieldToIsRequiredResolver<TParent>;
  isSystem?: SystemTableFieldToIsSystemResolver<TParent>;
  isUnique?: SystemTableFieldToIsUniqueResolver<TParent>;
  name?: SystemTableFieldToNameResolver<TParent>;
  origin?: SystemTableFieldToOriginResolver<TParent>;
  relation?: SystemTableFieldToRelationResolver<TParent>;
  schemaFeatures?: SystemTableFieldToSchemaFeaturesResolver<TParent>;
  table?: SystemTableFieldToTableResolver<TParent>;
}

export interface SystemTableFieldToComputedModeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableFieldToDataFeaturesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableFieldToDefaultValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableFieldToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableFieldToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableFieldToExpressionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableFieldToFieldTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableFieldToFieldTypeAttributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableFieldToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableFieldToIsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableFieldToIsMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableFieldToIsRequiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableFieldToIsSystemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableFieldToIsUniqueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableFieldToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableFieldToOriginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableFieldToRelationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableFieldToSchemaFeaturesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableFieldToTableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemFieldDataFeaturesTypeResolver<TParent = any> {
  create?: SystemFieldDataFeaturesToCreateResolver<TParent>;
  sort?: SystemFieldDataFeaturesToSortResolver<TParent>;
  update?: SystemFieldDataFeaturesToUpdateResolver<TParent>;
}

export interface SystemFieldDataFeaturesToCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFieldDataFeaturesToSortResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFieldDataFeaturesToUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemFieldTypeAttributesTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'SystemDateFieldTypeAttributes' | 'SystemFileFieldTypeAttributes' | 'SystemGeoFieldTypeAttributes' | 'SystemMissingRelationFieldTypeAttributes' | 'SystemNumberFieldTypeAttributes' | 'SystemSmartFieldTypeAttributes' | 'SystemSwitchFieldTypeAttributes' | 'SystemTextFieldTypeAttributes' | 'SystemUUIDFieldTypeAttributes' | Promise<'SystemDateFieldTypeAttributes' | 'SystemFileFieldTypeAttributes' | 'SystemGeoFieldTypeAttributes' | 'SystemMissingRelationFieldTypeAttributes' | 'SystemNumberFieldTypeAttributes' | 'SystemSmartFieldTypeAttributes' | 'SystemSwitchFieldTypeAttributes' | 'SystemTextFieldTypeAttributes' | 'SystemUUIDFieldTypeAttributes'>;
}
export interface GQLSystemDateFieldTypeAttributesTypeResolver<TParent = any> {
  format?: SystemDateFieldTypeAttributesToFormatResolver<TParent>;
}

export interface SystemDateFieldTypeAttributesToFormatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemFileFieldTypeAttributesTypeResolver<TParent = any> {
  expiration?: SystemFileFieldTypeAttributesToExpirationResolver<TParent>;
  format?: SystemFileFieldTypeAttributesToFormatResolver<TParent>;
  maxSize?: SystemFileFieldTypeAttributesToMaxSizeResolver<TParent>;
  showTitle?: SystemFileFieldTypeAttributesToShowTitleResolver<TParent>;
  showUrl?: SystemFileFieldTypeAttributesToShowUrlResolver<TParent>;
  typeRestrictions?: SystemFileFieldTypeAttributesToTypeRestrictionsResolver<TParent>;
}

export interface SystemFileFieldTypeAttributesToExpirationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFileFieldTypeAttributesToFormatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFileFieldTypeAttributesToMaxSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFileFieldTypeAttributesToShowTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFileFieldTypeAttributesToShowUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFileFieldTypeAttributesToTypeRestrictionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemGeoFieldTypeAttributesTypeResolver<TParent = any> {
  format?: SystemGeoFieldTypeAttributesToFormatResolver<TParent>;
  srid?: SystemGeoFieldTypeAttributesToSridResolver<TParent>;
}

export interface SystemGeoFieldTypeAttributesToFormatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemGeoFieldTypeAttributesToSridResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemMissingRelationFieldTypeAttributesTypeResolver<TParent = any> {
  missingTable?: SystemMissingRelationFieldTypeAttributesToMissingTableResolver<TParent>;
}

export interface SystemMissingRelationFieldTypeAttributesToMissingTableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemNumberFieldTypeAttributesTypeResolver<TParent = any> {
  autoIncrement?: SystemNumberFieldTypeAttributesToAutoIncrementResolver<TParent>;
  currency?: SystemNumberFieldTypeAttributesToCurrencyResolver<TParent>;
  format?: SystemNumberFieldTypeAttributesToFormatResolver<TParent>;
  isBigInt?: SystemNumberFieldTypeAttributesToIsBigIntResolver<TParent>;
  maxValue?: SystemNumberFieldTypeAttributesToMaxValueResolver<TParent>;
  minValue?: SystemNumberFieldTypeAttributesToMinValueResolver<TParent>;
  precision?: SystemNumberFieldTypeAttributesToPrecisionResolver<TParent>;
}

export interface SystemNumberFieldTypeAttributesToAutoIncrementResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemNumberFieldTypeAttributesToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemNumberFieldTypeAttributesToFormatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemNumberFieldTypeAttributesToIsBigIntResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemNumberFieldTypeAttributesToMaxValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemNumberFieldTypeAttributesToMinValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemNumberFieldTypeAttributesToPrecisionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemSmartFieldTypeAttributesTypeResolver<TParent = any> {
  format?: SystemSmartFieldTypeAttributesToFormatResolver<TParent>;
  innerFields?: SystemSmartFieldTypeAttributesToInnerFieldsResolver<TParent>;
}

export interface SystemSmartFieldTypeAttributesToFormatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemSmartFieldTypeAttributesToInnerFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemCustomTableFieldTypeResolver<TParent = any> {
  computedMode?: SystemCustomTableFieldToComputedModeResolver<TParent>;
  defaultValue?: SystemCustomTableFieldToDefaultValueResolver<TParent>;
  description?: SystemCustomTableFieldToDescriptionResolver<TParent>;
  displayName?: SystemCustomTableFieldToDisplayNameResolver<TParent>;
  expression?: SystemCustomTableFieldToExpressionResolver<TParent>;
  fieldType?: SystemCustomTableFieldToFieldTypeResolver<TParent>;
  fieldTypeAttributes?: SystemCustomTableFieldToFieldTypeAttributesResolver<TParent>;
  isList?: SystemCustomTableFieldToIsListResolver<TParent>;
  isRequired?: SystemCustomTableFieldToIsRequiredResolver<TParent>;
  isUnique?: SystemCustomTableFieldToIsUniqueResolver<TParent>;
  name?: SystemCustomTableFieldToNameResolver<TParent>;
}

export interface SystemCustomTableFieldToComputedModeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemCustomTableFieldToDefaultValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemCustomTableFieldToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemCustomTableFieldToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemCustomTableFieldToExpressionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemCustomTableFieldToFieldTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemCustomTableFieldToFieldTypeAttributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemCustomTableFieldToIsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemCustomTableFieldToIsRequiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemCustomTableFieldToIsUniqueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemCustomTableFieldToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemSwitchFieldTypeAttributesTypeResolver<TParent = any> {
  format?: SystemSwitchFieldTypeAttributesToFormatResolver<TParent>;
  listOptions?: SystemSwitchFieldTypeAttributesToListOptionsResolver<TParent>;
}

export interface SystemSwitchFieldTypeAttributesToFormatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemSwitchFieldTypeAttributesToListOptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemTextFieldTypeAttributesTypeResolver<TParent = any> {
  fieldSize?: SystemTextFieldTypeAttributesToFieldSizeResolver<TParent>;
  format?: SystemTextFieldTypeAttributesToFormatResolver<TParent>;
}

export interface SystemTextFieldTypeAttributesToFieldSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTextFieldTypeAttributesToFormatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemUUIDFieldTypeAttributesTypeResolver<TParent = any> {
  fieldSize?: SystemUUIDFieldTypeAttributesToFieldSizeResolver<TParent>;
}

export interface SystemUUIDFieldTypeAttributesToFieldSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemSchemaOriginTypeResolver<TParent = any> {
  provider?: SystemSchemaOriginToProviderResolver<TParent>;
  type?: SystemSchemaOriginToTypeResolver<TParent>;
}

export interface SystemSchemaOriginToProviderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemSchemaOriginToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemRelationTypeResolver<TParent = any> {
  refField?: SystemRelationToRefFieldResolver<TParent>;
  refFieldDisplayName?: SystemRelationToRefFieldDisplayNameResolver<TParent>;
  refFieldIsList?: SystemRelationToRefFieldIsListResolver<TParent>;
  refFieldIsRequired?: SystemRelationToRefFieldIsRequiredResolver<TParent>;
  refFieldName?: SystemRelationToRefFieldNameResolver<TParent>;
  refTable?: SystemRelationToRefTableResolver<TParent>;
  relationFieldName?: SystemRelationToRelationFieldNameResolver<TParent>;
  relationTableName?: SystemRelationToRelationTableNameResolver<TParent>;
}

export interface SystemRelationToRefFieldResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemRelationToRefFieldDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemRelationToRefFieldIsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemRelationToRefFieldIsRequiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemRelationToRefFieldNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemRelationToRefTableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemRelationToRelationFieldNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemRelationToRelationTableNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemFieldSchemaFeaturesTypeResolver<TParent = any> {
  delete?: SystemFieldSchemaFeaturesToDeleteResolver<TParent>;
  update?: SystemFieldSchemaFeaturesToUpdateResolver<TParent>;
}

export interface SystemFieldSchemaFeaturesToDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFieldSchemaFeaturesToUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemTableIndexTypeResolver<TParent = any> {
  columns?: SystemTableIndexToColumnsResolver<TParent>;
  id?: SystemTableIndexToIdResolver<TParent>;
  isSystem?: SystemTableIndexToIsSystemResolver<TParent>;
  name?: SystemTableIndexToNameResolver<TParent>;
  table?: SystemTableIndexToTableResolver<TParent>;
  type?: SystemTableIndexToTypeResolver<TParent>;
}

export interface SystemTableIndexToColumnsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableIndexToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableIndexToIsSystemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableIndexToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableIndexToTableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableIndexToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemTableIndexColumnTypeResolver<TParent = any> {
  name?: SystemTableIndexColumnToNameResolver<TParent>;
}

export interface SystemTableIndexColumnToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemTableSchemaFeaturesTypeResolver<TParent = any> {
  computedFields?: SystemTableSchemaFeaturesToComputedFieldsResolver<TParent>;
  create?: SystemTableSchemaFeaturesToCreateResolver<TParent>;
  update?: SystemTableSchemaFeaturesToUpdateResolver<TParent>;
}

export interface SystemTableSchemaFeaturesToComputedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableSchemaFeaturesToCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableSchemaFeaturesToUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemTableSchemaCreateFeaturesTypeResolver<TParent = any> {
  DATE?: SystemTableSchemaCreateFeaturesToDATEResolver<TParent>;
  FILE?: SystemTableSchemaCreateFeaturesToFILEResolver<TParent>;
  GEO?: SystemTableSchemaCreateFeaturesToGEOResolver<TParent>;
  ID?: SystemTableSchemaCreateFeaturesToIDResolver<TParent>;
  JSON?: SystemTableSchemaCreateFeaturesToJSONResolver<TParent>;
  MISSING_RELATION?: SystemTableSchemaCreateFeaturesToMISSING_RELATIONResolver<TParent>;
  NUMBER?: SystemTableSchemaCreateFeaturesToNUMBERResolver<TParent>;
  ONE_WAY_RELATION?: SystemTableSchemaCreateFeaturesToONE_WAY_RELATIONResolver<TParent>;
  RELATION?: SystemTableSchemaCreateFeaturesToRELATIONResolver<TParent>;
  SMART?: SystemTableSchemaCreateFeaturesToSMARTResolver<TParent>;
  SWITCH?: SystemTableSchemaCreateFeaturesToSWITCHResolver<TParent>;
  TEXT?: SystemTableSchemaCreateFeaturesToTEXTResolver<TParent>;
  UUID?: SystemTableSchemaCreateFeaturesToUUIDResolver<TParent>;
}

export interface SystemTableSchemaCreateFeaturesToDATEResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableSchemaCreateFeaturesToFILEResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableSchemaCreateFeaturesToGEOResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableSchemaCreateFeaturesToIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableSchemaCreateFeaturesToJSONResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableSchemaCreateFeaturesToMISSING_RELATIONResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableSchemaCreateFeaturesToNUMBERResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableSchemaCreateFeaturesToONE_WAY_RELATIONResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableSchemaCreateFeaturesToRELATIONResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableSchemaCreateFeaturesToSMARTResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableSchemaCreateFeaturesToSWITCHResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableSchemaCreateFeaturesToTEXTResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableSchemaCreateFeaturesToUUIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemTableSchemaMetaFieldFeaturesTypeResolver<TParent = any> {
  displayName?: SystemTableSchemaMetaFieldFeaturesToDisplayNameResolver<TParent>;
  name?: SystemTableSchemaMetaFieldFeaturesToNameResolver<TParent>;
}

export interface SystemTableSchemaMetaFieldFeaturesToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableSchemaMetaFieldFeaturesToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemTableListResponseTypeResolver<TParent = any> {
  count?: SystemTableListResponseToCountResolver<TParent>;
  items?: SystemTableListResponseToItemsResolver<TParent>;
}

export interface SystemTableListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTableListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemUserBillingConfigurationResponseTypeResolver<TParent = any> {
  availablePlans?: SystemUserBillingConfigurationResponseToAvailablePlansResolver<TParent>;
  isCancelSubscriptionAvailable?: SystemUserBillingConfigurationResponseToIsCancelSubscriptionAvailableResolver<TParent>;
  isFreePlanAvailable?: SystemUserBillingConfigurationResponseToIsFreePlanAvailableResolver<TParent>;
}

export interface SystemUserBillingConfigurationResponseToAvailablePlansResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemUserBillingConfigurationResponseToIsCancelSubscriptionAvailableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemUserBillingConfigurationResponseToIsFreePlanAvailableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemBillingPlanBaseInfoTypeResolver<TParent = any> {
  description?: SystemBillingPlanBaseInfoToDescriptionResolver<TParent>;
  displayName?: SystemBillingPlanBaseInfoToDisplayNameResolver<TParent>;
  id?: SystemBillingPlanBaseInfoToIdResolver<TParent>;
  isCustom?: SystemBillingPlanBaseInfoToIsCustomResolver<TParent>;
  isLegacy?: SystemBillingPlanBaseInfoToIsLegacyResolver<TParent>;
  limitMetrics?: SystemBillingPlanBaseInfoToLimitMetricsResolver<TParent>;
  name?: SystemBillingPlanBaseInfoToNameResolver<TParent>;
  price?: SystemBillingPlanBaseInfoToPriceResolver<TParent>;
}

export interface SystemBillingPlanBaseInfoToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingPlanBaseInfoToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingPlanBaseInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingPlanBaseInfoToIsCustomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingPlanBaseInfoToIsLegacyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingPlanBaseInfoToLimitMetricsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingPlanBaseInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingPlanBaseInfoToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemBillingPlanLimitMetricItemTypeResolver<TParent = any> {
  displayName?: SystemBillingPlanLimitMetricItemToDisplayNameResolver<TParent>;
  hardLimit?: SystemBillingPlanLimitMetricItemToHardLimitResolver<TParent>;
  name?: SystemBillingPlanLimitMetricItemToNameResolver<TParent>;
  overagePrice?: SystemBillingPlanLimitMetricItemToOveragePriceResolver<TParent>;
  softLimit?: SystemBillingPlanLimitMetricItemToSoftLimitResolver<TParent>;
}

export interface SystemBillingPlanLimitMetricItemToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingPlanLimitMetricItemToHardLimitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingPlanLimitMetricItemToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingPlanLimitMetricItemToOveragePriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemBillingPlanLimitMetricItemToSoftLimitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemUserInvitationListTypeResolver<TParent = any> {
  count?: SystemUserInvitationListToCountResolver<TParent>;
  items?: SystemUserInvitationListToItemsResolver<TParent>;
}

export interface SystemUserInvitationListToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemUserInvitationListToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemUserInvitationDetailsTypeResolver<TParent = any> {
  accepted?: SystemUserInvitationDetailsToAcceptedResolver<TParent>;
  acceptedOn?: SystemUserInvitationDetailsToAcceptedOnResolver<TParent>;
  apiHost?: SystemUserInvitationDetailsToApiHostResolver<TParent>;
  email?: SystemUserInvitationDetailsToEmailResolver<TParent>;
  firstName?: SystemUserInvitationDetailsToFirstNameResolver<TParent>;
  id?: SystemUserInvitationDetailsToIdResolver<TParent>;
  invitedBy?: SystemUserInvitationDetailsToInvitedByResolver<TParent>;
  isRegistered?: SystemUserInvitationDetailsToIsRegisteredResolver<TParent>;
  lastName?: SystemUserInvitationDetailsToLastNameResolver<TParent>;
  resentOn?: SystemUserInvitationDetailsToResentOnResolver<TParent>;
}

export interface SystemUserInvitationDetailsToAcceptedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemUserInvitationDetailsToAcceptedOnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemUserInvitationDetailsToApiHostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemUserInvitationDetailsToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemUserInvitationDetailsToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemUserInvitationDetailsToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemUserInvitationDetailsToInvitedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemUserInvitationDetailsToIsRegisteredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemUserInvitationDetailsToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemUserInvitationDetailsToResentOnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemWorkspaceListResponseTypeResolver<TParent = any> {
  count?: SystemWorkspaceListResponseToCountResolver<TParent>;
  items?: SystemWorkspaceListResponseToItemsResolver<TParent>;
}

export interface SystemWorkspaceListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemWorkspaceItemTypeResolver<TParent = any> {
  apiHost?: SystemWorkspaceItemToApiHostResolver<TParent>;
  createdAt?: SystemWorkspaceItemToCreatedAtResolver<TParent>;
  description?: SystemWorkspaceItemToDescriptionResolver<TParent>;
  id?: SystemWorkspaceItemToIdResolver<TParent>;
  image?: SystemWorkspaceItemToImageResolver<TParent>;
  isCiCdEnabled?: SystemWorkspaceItemToIsCiCdEnabledResolver<TParent>;
  isOwner?: SystemWorkspaceItemToIsOwnerResolver<TParent>;
  kind?: SystemWorkspaceItemToKindResolver<TParent>;
  lastAccess?: SystemWorkspaceItemToLastAccessResolver<TParent>;
  name?: SystemWorkspaceItemToNameResolver<TParent>;
  nextPlan?: SystemWorkspaceItemToNextPlanResolver<TParent>;
  organization?: SystemWorkspaceItemToOrganizationResolver<TParent>;
  owner?: SystemWorkspaceItemToOwnerResolver<TParent>;
  plan?: SystemWorkspaceItemToPlanResolver<TParent>;
  region?: SystemWorkspaceItemToRegionResolver<TParent>;
  teamMemberCount?: SystemWorkspaceItemToTeamMemberCountResolver<TParent>;
  webSocket?: SystemWorkspaceItemToWebSocketResolver<TParent>;
}

export interface SystemWorkspaceItemToApiHostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceItemToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceItemToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceItemToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceItemToIsCiCdEnabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceItemToIsOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceItemToKindResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceItemToLastAccessResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceItemToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceItemToNextPlanResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceItemToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceItemToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceItemToPlanResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceItemToRegionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceItemToTeamMemberCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceItemToWebSocketResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemWorkspaceImageTypeResolver<TParent = any> {
  downloadUrl?: SystemWorkspaceImageToDownloadUrlResolver<TParent>;
  id?: SystemWorkspaceImageToIdResolver<TParent>;
}

export interface SystemWorkspaceImageToDownloadUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceImageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTableTypeResolver<TParent = any> {
  application?: TableToApplicationResolver<TParent>;
  attributes?: TableToAttributesResolver<TParent>;
  dataFeatures?: TableToDataFeaturesResolver<TParent>;
  description?: TableToDescriptionResolver<TParent>;
  displayName?: TableToDisplayNameResolver<TParent>;
  fields?: TableToFieldsResolver<TParent>;
  id?: TableToIdResolver<TParent>;
  indexes?: TableToIndexesResolver<TParent>;
  isSystem?: TableToIsSystemResolver<TParent>;
  name?: TableToNameResolver<TParent>;
  origin?: TableToOriginResolver<TParent>;
  schemaFeatures?: TableToSchemaFeaturesResolver<TParent>;
}

export interface TableToApplicationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableToAttributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableToDataFeaturesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableToFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableToIndexesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableToIsSystemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableToOriginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableToSchemaFeaturesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTableAttributesTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'ViewAttributes' | Promise<'ViewAttributes'>;
}
export interface GQLViewAttributesTypeResolver<TParent = any> {
  query?: ViewAttributesToQueryResolver<TParent>;
}

export interface ViewAttributesToQueryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTableDataFeaturesTypeResolver<TParent = any> {
  create?: TableDataFeaturesToCreateResolver<TParent>;
  delete?: TableDataFeaturesToDeleteResolver<TParent>;
  update?: TableDataFeaturesToUpdateResolver<TParent>;
}

export interface TableDataFeaturesToCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableDataFeaturesToDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableDataFeaturesToUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTableFieldTypeResolver<TParent = any> {
  computedMode?: TableFieldToComputedModeResolver<TParent>;
  dataFeatures?: TableFieldToDataFeaturesResolver<TParent>;
  defaultValue?: TableFieldToDefaultValueResolver<TParent>;
  description?: TableFieldToDescriptionResolver<TParent>;
  displayName?: TableFieldToDisplayNameResolver<TParent>;
  expression?: TableFieldToExpressionResolver<TParent>;
  fieldType?: TableFieldToFieldTypeResolver<TParent>;
  fieldTypeAttributes?: TableFieldToFieldTypeAttributesResolver<TParent>;
  id?: TableFieldToIdResolver<TParent>;
  isList?: TableFieldToIsListResolver<TParent>;
  isMeta?: TableFieldToIsMetaResolver<TParent>;
  isRequired?: TableFieldToIsRequiredResolver<TParent>;
  isSystem?: TableFieldToIsSystemResolver<TParent>;
  isUnique?: TableFieldToIsUniqueResolver<TParent>;
  name?: TableFieldToNameResolver<TParent>;
  origin?: TableFieldToOriginResolver<TParent>;
  relation?: TableFieldToRelationResolver<TParent>;
  schemaFeatures?: TableFieldToSchemaFeaturesResolver<TParent>;
  table?: TableFieldToTableResolver<TParent>;
}

export interface TableFieldToComputedModeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableFieldToDataFeaturesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableFieldToDefaultValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableFieldToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableFieldToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableFieldToExpressionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableFieldToFieldTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableFieldToFieldTypeAttributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableFieldToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableFieldToIsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableFieldToIsMetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableFieldToIsRequiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableFieldToIsSystemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableFieldToIsUniqueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableFieldToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableFieldToOriginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableFieldToRelationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableFieldToSchemaFeaturesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableFieldToTableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFieldDataFeaturesTypeResolver<TParent = any> {
  create?: FieldDataFeaturesToCreateResolver<TParent>;
  sort?: FieldDataFeaturesToSortResolver<TParent>;
  update?: FieldDataFeaturesToUpdateResolver<TParent>;
}

export interface FieldDataFeaturesToCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FieldDataFeaturesToSortResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FieldDataFeaturesToUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFieldTypeAttributesTypeResolver<TParent = any> {
  (parent: TParent, context: any, info: GraphQLResolveInfo): 'DateFieldTypeAttributes' | 'FileFieldTypeAttributes' | 'GeoFieldTypeAttributes' | 'MissingRelationFieldTypeAttributes' | 'NumberFieldTypeAttributes' | 'SmartFieldTypeAttributes' | 'SwitchFieldTypeAttributes' | 'TextFieldTypeAttributes' | 'UUIDFieldTypeAttributes' | Promise<'DateFieldTypeAttributes' | 'FileFieldTypeAttributes' | 'GeoFieldTypeAttributes' | 'MissingRelationFieldTypeAttributes' | 'NumberFieldTypeAttributes' | 'SmartFieldTypeAttributes' | 'SwitchFieldTypeAttributes' | 'TextFieldTypeAttributes' | 'UUIDFieldTypeAttributes'>;
}
export interface GQLDateFieldTypeAttributesTypeResolver<TParent = any> {
  format?: DateFieldTypeAttributesToFormatResolver<TParent>;
}

export interface DateFieldTypeAttributesToFormatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFileFieldTypeAttributesTypeResolver<TParent = any> {
  expiration?: FileFieldTypeAttributesToExpirationResolver<TParent>;
  format?: FileFieldTypeAttributesToFormatResolver<TParent>;
  maxSize?: FileFieldTypeAttributesToMaxSizeResolver<TParent>;
  showTitle?: FileFieldTypeAttributesToShowTitleResolver<TParent>;
  showUrl?: FileFieldTypeAttributesToShowUrlResolver<TParent>;
  typeRestrictions?: FileFieldTypeAttributesToTypeRestrictionsResolver<TParent>;
}

export interface FileFieldTypeAttributesToExpirationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileFieldTypeAttributesToFormatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileFieldTypeAttributesToMaxSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileFieldTypeAttributesToShowTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileFieldTypeAttributesToShowUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileFieldTypeAttributesToTypeRestrictionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLGeoFieldTypeAttributesTypeResolver<TParent = any> {
  format?: GeoFieldTypeAttributesToFormatResolver<TParent>;
  srid?: GeoFieldTypeAttributesToSridResolver<TParent>;
}

export interface GeoFieldTypeAttributesToFormatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GeoFieldTypeAttributesToSridResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMissingRelationFieldTypeAttributesTypeResolver<TParent = any> {
  missingTable?: MissingRelationFieldTypeAttributesToMissingTableResolver<TParent>;
}

export interface MissingRelationFieldTypeAttributesToMissingTableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLNumberFieldTypeAttributesTypeResolver<TParent = any> {
  autoIncrement?: NumberFieldTypeAttributesToAutoIncrementResolver<TParent>;
  currency?: NumberFieldTypeAttributesToCurrencyResolver<TParent>;
  format?: NumberFieldTypeAttributesToFormatResolver<TParent>;
  isBigInt?: NumberFieldTypeAttributesToIsBigIntResolver<TParent>;
  maxValue?: NumberFieldTypeAttributesToMaxValueResolver<TParent>;
  minValue?: NumberFieldTypeAttributesToMinValueResolver<TParent>;
  precision?: NumberFieldTypeAttributesToPrecisionResolver<TParent>;
}

export interface NumberFieldTypeAttributesToAutoIncrementResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NumberFieldTypeAttributesToCurrencyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NumberFieldTypeAttributesToFormatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NumberFieldTypeAttributesToIsBigIntResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NumberFieldTypeAttributesToMaxValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NumberFieldTypeAttributesToMinValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NumberFieldTypeAttributesToPrecisionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSmartFieldTypeAttributesTypeResolver<TParent = any> {
  format?: SmartFieldTypeAttributesToFormatResolver<TParent>;
  innerFields?: SmartFieldTypeAttributesToInnerFieldsResolver<TParent>;
}

export interface SmartFieldTypeAttributesToFormatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SmartFieldTypeAttributesToInnerFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCustomTableFieldTypeResolver<TParent = any> {
  computedMode?: CustomTableFieldToComputedModeResolver<TParent>;
  defaultValue?: CustomTableFieldToDefaultValueResolver<TParent>;
  description?: CustomTableFieldToDescriptionResolver<TParent>;
  displayName?: CustomTableFieldToDisplayNameResolver<TParent>;
  expression?: CustomTableFieldToExpressionResolver<TParent>;
  fieldType?: CustomTableFieldToFieldTypeResolver<TParent>;
  fieldTypeAttributes?: CustomTableFieldToFieldTypeAttributesResolver<TParent>;
  isList?: CustomTableFieldToIsListResolver<TParent>;
  isRequired?: CustomTableFieldToIsRequiredResolver<TParent>;
  isUnique?: CustomTableFieldToIsUniqueResolver<TParent>;
  name?: CustomTableFieldToNameResolver<TParent>;
}

export interface CustomTableFieldToComputedModeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomTableFieldToDefaultValueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomTableFieldToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomTableFieldToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomTableFieldToExpressionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomTableFieldToFieldTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomTableFieldToFieldTypeAttributesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomTableFieldToIsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomTableFieldToIsRequiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomTableFieldToIsUniqueResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CustomTableFieldToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSwitchFieldTypeAttributesTypeResolver<TParent = any> {
  format?: SwitchFieldTypeAttributesToFormatResolver<TParent>;
  listOptions?: SwitchFieldTypeAttributesToListOptionsResolver<TParent>;
}

export interface SwitchFieldTypeAttributesToFormatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SwitchFieldTypeAttributesToListOptionsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTextFieldTypeAttributesTypeResolver<TParent = any> {
  fieldSize?: TextFieldTypeAttributesToFieldSizeResolver<TParent>;
  format?: TextFieldTypeAttributesToFormatResolver<TParent>;
}

export interface TextFieldTypeAttributesToFieldSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TextFieldTypeAttributesToFormatResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUUIDFieldTypeAttributesTypeResolver<TParent = any> {
  fieldSize?: UUIDFieldTypeAttributesToFieldSizeResolver<TParent>;
}

export interface UUIDFieldTypeAttributesToFieldSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSchemaOriginTypeResolver<TParent = any> {
  provider?: SchemaOriginToProviderResolver<TParent>;
  type?: SchemaOriginToTypeResolver<TParent>;
}

export interface SchemaOriginToProviderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SchemaOriginToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRelationTypeResolver<TParent = any> {
  refField?: RelationToRefFieldResolver<TParent>;
  refFieldDisplayName?: RelationToRefFieldDisplayNameResolver<TParent>;
  refFieldIsList?: RelationToRefFieldIsListResolver<TParent>;
  refFieldIsRequired?: RelationToRefFieldIsRequiredResolver<TParent>;
  refFieldName?: RelationToRefFieldNameResolver<TParent>;
  refTable?: RelationToRefTableResolver<TParent>;
  relationFieldName?: RelationToRelationFieldNameResolver<TParent>;
  relationTableName?: RelationToRelationTableNameResolver<TParent>;
}

export interface RelationToRefFieldResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RelationToRefFieldDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RelationToRefFieldIsListResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RelationToRefFieldIsRequiredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RelationToRefFieldNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RelationToRefTableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RelationToRelationFieldNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RelationToRelationTableNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFieldSchemaFeaturesTypeResolver<TParent = any> {
  delete?: FieldSchemaFeaturesToDeleteResolver<TParent>;
  update?: FieldSchemaFeaturesToUpdateResolver<TParent>;
}

export interface FieldSchemaFeaturesToDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FieldSchemaFeaturesToUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTableIndexTypeResolver<TParent = any> {
  columns?: TableIndexToColumnsResolver<TParent>;
  id?: TableIndexToIdResolver<TParent>;
  isSystem?: TableIndexToIsSystemResolver<TParent>;
  name?: TableIndexToNameResolver<TParent>;
  table?: TableIndexToTableResolver<TParent>;
  type?: TableIndexToTypeResolver<TParent>;
}

export interface TableIndexToColumnsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableIndexToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableIndexToIsSystemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableIndexToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableIndexToTableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableIndexToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTableIndexColumnTypeResolver<TParent = any> {
  name?: TableIndexColumnToNameResolver<TParent>;
}

export interface TableIndexColumnToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTableSchemaFeaturesTypeResolver<TParent = any> {
  computedFields?: TableSchemaFeaturesToComputedFieldsResolver<TParent>;
  create?: TableSchemaFeaturesToCreateResolver<TParent>;
  update?: TableSchemaFeaturesToUpdateResolver<TParent>;
}

export interface TableSchemaFeaturesToComputedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableSchemaFeaturesToCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableSchemaFeaturesToUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTableSchemaCreateFeaturesTypeResolver<TParent = any> {
  DATE?: TableSchemaCreateFeaturesToDATEResolver<TParent>;
  FILE?: TableSchemaCreateFeaturesToFILEResolver<TParent>;
  GEO?: TableSchemaCreateFeaturesToGEOResolver<TParent>;
  ID?: TableSchemaCreateFeaturesToIDResolver<TParent>;
  JSON?: TableSchemaCreateFeaturesToJSONResolver<TParent>;
  MISSING_RELATION?: TableSchemaCreateFeaturesToMISSING_RELATIONResolver<TParent>;
  NUMBER?: TableSchemaCreateFeaturesToNUMBERResolver<TParent>;
  ONE_WAY_RELATION?: TableSchemaCreateFeaturesToONE_WAY_RELATIONResolver<TParent>;
  RELATION?: TableSchemaCreateFeaturesToRELATIONResolver<TParent>;
  SMART?: TableSchemaCreateFeaturesToSMARTResolver<TParent>;
  SWITCH?: TableSchemaCreateFeaturesToSWITCHResolver<TParent>;
  TEXT?: TableSchemaCreateFeaturesToTEXTResolver<TParent>;
  UUID?: TableSchemaCreateFeaturesToUUIDResolver<TParent>;
}

export interface TableSchemaCreateFeaturesToDATEResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableSchemaCreateFeaturesToFILEResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableSchemaCreateFeaturesToGEOResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableSchemaCreateFeaturesToIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableSchemaCreateFeaturesToJSONResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableSchemaCreateFeaturesToMISSING_RELATIONResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableSchemaCreateFeaturesToNUMBERResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableSchemaCreateFeaturesToONE_WAY_RELATIONResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableSchemaCreateFeaturesToRELATIONResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableSchemaCreateFeaturesToSMARTResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableSchemaCreateFeaturesToSWITCHResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableSchemaCreateFeaturesToTEXTResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableSchemaCreateFeaturesToUUIDResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTableSchemaMetaFieldFeaturesTypeResolver<TParent = any> {
  displayName?: TableSchemaMetaFieldFeaturesToDisplayNameResolver<TParent>;
  name?: TableSchemaMetaFieldFeaturesToNameResolver<TParent>;
}

export interface TableSchemaMetaFieldFeaturesToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableSchemaMetaFieldFeaturesToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTableListResponseTypeResolver<TParent = any> {
  count?: TableListResponseToCountResolver<TParent>;
  items?: TableListResponseToItemsResolver<TParent>;
}

export interface TableListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TableListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserBillingConfigurationResponseTypeResolver<TParent = any> {
  availablePlans?: UserBillingConfigurationResponseToAvailablePlansResolver<TParent>;
  isCancelSubscriptionAvailable?: UserBillingConfigurationResponseToIsCancelSubscriptionAvailableResolver<TParent>;
  isFreePlanAvailable?: UserBillingConfigurationResponseToIsFreePlanAvailableResolver<TParent>;
}

export interface UserBillingConfigurationResponseToAvailablePlansResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserBillingConfigurationResponseToIsCancelSubscriptionAvailableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserBillingConfigurationResponseToIsFreePlanAvailableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBillingPlanBaseInfoTypeResolver<TParent = any> {
  description?: BillingPlanBaseInfoToDescriptionResolver<TParent>;
  displayName?: BillingPlanBaseInfoToDisplayNameResolver<TParent>;
  id?: BillingPlanBaseInfoToIdResolver<TParent>;
  isCustom?: BillingPlanBaseInfoToIsCustomResolver<TParent>;
  isLegacy?: BillingPlanBaseInfoToIsLegacyResolver<TParent>;
  limitMetrics?: BillingPlanBaseInfoToLimitMetricsResolver<TParent>;
  name?: BillingPlanBaseInfoToNameResolver<TParent>;
  price?: BillingPlanBaseInfoToPriceResolver<TParent>;
}

export interface BillingPlanBaseInfoToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingPlanBaseInfoToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingPlanBaseInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingPlanBaseInfoToIsCustomResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingPlanBaseInfoToIsLegacyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingPlanBaseInfoToLimitMetricsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingPlanBaseInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingPlanBaseInfoToPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBillingPlanLimitMetricItemTypeResolver<TParent = any> {
  displayName?: BillingPlanLimitMetricItemToDisplayNameResolver<TParent>;
  hardLimit?: BillingPlanLimitMetricItemToHardLimitResolver<TParent>;
  name?: BillingPlanLimitMetricItemToNameResolver<TParent>;
  overagePrice?: BillingPlanLimitMetricItemToOveragePriceResolver<TParent>;
  softLimit?: BillingPlanLimitMetricItemToSoftLimitResolver<TParent>;
}

export interface BillingPlanLimitMetricItemToDisplayNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingPlanLimitMetricItemToHardLimitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingPlanLimitMetricItemToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingPlanLimitMetricItemToOveragePriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BillingPlanLimitMetricItemToSoftLimitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserInvitationListTypeResolver<TParent = any> {
  count?: UserInvitationListToCountResolver<TParent>;
  items?: UserInvitationListToItemsResolver<TParent>;
}

export interface UserInvitationListToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInvitationListToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserInvitationDetailsTypeResolver<TParent = any> {
  accepted?: UserInvitationDetailsToAcceptedResolver<TParent>;
  acceptedOn?: UserInvitationDetailsToAcceptedOnResolver<TParent>;
  apiHost?: UserInvitationDetailsToApiHostResolver<TParent>;
  email?: UserInvitationDetailsToEmailResolver<TParent>;
  firstName?: UserInvitationDetailsToFirstNameResolver<TParent>;
  id?: UserInvitationDetailsToIdResolver<TParent>;
  invitedBy?: UserInvitationDetailsToInvitedByResolver<TParent>;
  isRegistered?: UserInvitationDetailsToIsRegisteredResolver<TParent>;
  lastName?: UserInvitationDetailsToLastNameResolver<TParent>;
  resentOn?: UserInvitationDetailsToResentOnResolver<TParent>;
}

export interface UserInvitationDetailsToAcceptedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInvitationDetailsToAcceptedOnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInvitationDetailsToApiHostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInvitationDetailsToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInvitationDetailsToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInvitationDetailsToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInvitationDetailsToInvitedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInvitationDetailsToIsRegisteredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInvitationDetailsToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserInvitationDetailsToResentOnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLInvitedByNameTypeResolver<TParent = any> {
  email?: InvitedByNameToEmailResolver<TParent>;
  firstName?: InvitedByNameToFirstNameResolver<TParent>;
  lastName?: InvitedByNameToLastNameResolver<TParent>;
  workspaceName?: InvitedByNameToWorkspaceNameResolver<TParent>;
}

export interface InvitedByNameToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvitedByNameToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvitedByNameToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InvitedByNameToWorkspaceNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWorkspaceListResponseTypeResolver<TParent = any> {
  count?: WorkspaceListResponseToCountResolver<TParent>;
  items?: WorkspaceListResponseToItemsResolver<TParent>;
}

export interface WorkspaceListResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceListResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWorkspaceItemTypeResolver<TParent = any> {
  apiHost?: WorkspaceItemToApiHostResolver<TParent>;
  createdAt?: WorkspaceItemToCreatedAtResolver<TParent>;
  description?: WorkspaceItemToDescriptionResolver<TParent>;
  id?: WorkspaceItemToIdResolver<TParent>;
  image?: WorkspaceItemToImageResolver<TParent>;
  isCiCdEnabled?: WorkspaceItemToIsCiCdEnabledResolver<TParent>;
  isOwner?: WorkspaceItemToIsOwnerResolver<TParent>;
  kind?: WorkspaceItemToKindResolver<TParent>;
  lastAccess?: WorkspaceItemToLastAccessResolver<TParent>;
  name?: WorkspaceItemToNameResolver<TParent>;
  nextPlan?: WorkspaceItemToNextPlanResolver<TParent>;
  organization?: WorkspaceItemToOrganizationResolver<TParent>;
  owner?: WorkspaceItemToOwnerResolver<TParent>;
  plan?: WorkspaceItemToPlanResolver<TParent>;
  region?: WorkspaceItemToRegionResolver<TParent>;
  teamMemberCount?: WorkspaceItemToTeamMemberCountResolver<TParent>;
  webSocket?: WorkspaceItemToWebSocketResolver<TParent>;
}

export interface WorkspaceItemToApiHostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceItemToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceItemToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceItemToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceItemToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceItemToIsCiCdEnabledResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceItemToIsOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceItemToKindResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceItemToLastAccessResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceItemToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceItemToNextPlanResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceItemToOrganizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceItemToOwnerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceItemToPlanResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceItemToRegionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceItemToTeamMemberCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceItemToWebSocketResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWorkspaceImageTypeResolver<TParent = any> {
  downloadUrl?: WorkspaceImageToDownloadUrlResolver<TParent>;
  id?: WorkspaceImageToIdResolver<TParent>;
}

export interface WorkspaceImageToDownloadUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceImageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  apiTokenCreate?: MutationToApiTokenCreateResolver<TParent>;
  apiTokenDelete?: MutationToApiTokenDeleteResolver<TParent>;
  apiTokenDeleteByFilter?: MutationToApiTokenDeleteByFilterResolver<TParent>;
  apiTokenDestroy?: MutationToApiTokenDestroyResolver<TParent>;
  apiTokenDestroyByFilter?: MutationToApiTokenDestroyByFilterResolver<TParent>;
  apiTokenRestore?: MutationToApiTokenRestoreResolver<TParent>;
  apiTokenUpdate?: MutationToApiTokenUpdateResolver<TParent>;
  apiTokenUpdateByFilter?: MutationToApiTokenUpdateByFilterResolver<TParent>;
  applicationDelete?: MutationToApplicationDeleteResolver<TParent>;
  applicationInstall?: MutationToApplicationInstallResolver<TParent>;
  applicationUpdate?: MutationToApplicationUpdateResolver<TParent>;
  authenticationProfileCreate?: MutationToAuthenticationProfileCreateResolver<TParent>;
  authenticationProfileCreateMany?: MutationToAuthenticationProfileCreateManyResolver<TParent>;
  authenticationProfileDelete?: MutationToAuthenticationProfileDeleteResolver<TParent>;
  authenticationProfileDeleteByFilter?: MutationToAuthenticationProfileDeleteByFilterResolver<TParent>;
  authenticationProfileDestroy?: MutationToAuthenticationProfileDestroyResolver<TParent>;
  authenticationProfileDestroyByFilter?: MutationToAuthenticationProfileDestroyByFilterResolver<TParent>;
  authenticationProfileRestore?: MutationToAuthenticationProfileRestoreResolver<TParent>;
  authenticationProfileUpdate?: MutationToAuthenticationProfileUpdateResolver<TParent>;
  authenticationProfileUpdateByFilter?: MutationToAuthenticationProfileUpdateByFilterResolver<TParent>;
  authenticationSettingsUpdate?: MutationToAuthenticationSettingsUpdateResolver<TParent>;
  billingDetailsUpdate?: MutationToBillingDetailsUpdateResolver<TParent>;
  billingPlanUpdate?: MutationToBillingPlanUpdateResolver<TParent>;
  blogCreate?: MutationToBlogCreateResolver<TParent>;
  blogCreateMany?: MutationToBlogCreateManyResolver<TParent>;
  blogDelete?: MutationToBlogDeleteResolver<TParent>;
  blogDeleteByFilter?: MutationToBlogDeleteByFilterResolver<TParent>;
  blogDestroy?: MutationToBlogDestroyResolver<TParent>;
  blogDestroyByFilter?: MutationToBlogDestroyByFilterResolver<TParent>;
  blogRestore?: MutationToBlogRestoreResolver<TParent>;
  blogUpdate?: MutationToBlogUpdateResolver<TParent>;
  blogUpdateByFilter?: MutationToBlogUpdateByFilterResolver<TParent>;
  blogUserCreate?: MutationToBlogUserCreateResolver<TParent>;
  blogUserCreateMany?: MutationToBlogUserCreateManyResolver<TParent>;
  blogUserDelete?: MutationToBlogUserDeleteResolver<TParent>;
  blogUserDeleteByFilter?: MutationToBlogUserDeleteByFilterResolver<TParent>;
  blogUserDestroy?: MutationToBlogUserDestroyResolver<TParent>;
  blogUserDestroyByFilter?: MutationToBlogUserDestroyByFilterResolver<TParent>;
  blogUserRestore?: MutationToBlogUserRestoreResolver<TParent>;
  blogUserUpdate?: MutationToBlogUserUpdateResolver<TParent>;
  blogUserUpdateByFilter?: MutationToBlogUserUpdateByFilterResolver<TParent>;
  commentCreate?: MutationToCommentCreateResolver<TParent>;
  commentCreateMany?: MutationToCommentCreateManyResolver<TParent>;
  commentDelete?: MutationToCommentDeleteResolver<TParent>;
  commentDeleteByFilter?: MutationToCommentDeleteByFilterResolver<TParent>;
  commentDestroy?: MutationToCommentDestroyResolver<TParent>;
  commentDestroyByFilter?: MutationToCommentDestroyByFilterResolver<TParent>;
  commentRestore?: MutationToCommentRestoreResolver<TParent>;
  commentUpdate?: MutationToCommentUpdateResolver<TParent>;
  commentUpdateByFilter?: MutationToCommentUpdateByFilterResolver<TParent>;
  courseCreate?: MutationToCourseCreateResolver<TParent>;
  courseCreateMany?: MutationToCourseCreateManyResolver<TParent>;
  courseDelete?: MutationToCourseDeleteResolver<TParent>;
  courseDeleteByFilter?: MutationToCourseDeleteByFilterResolver<TParent>;
  courseDestroy?: MutationToCourseDestroyResolver<TParent>;
  courseDestroyByFilter?: MutationToCourseDestroyByFilterResolver<TParent>;
  courseRestore?: MutationToCourseRestoreResolver<TParent>;
  courseUpdate?: MutationToCourseUpdateResolver<TParent>;
  courseUpdateByFilter?: MutationToCourseUpdateByFilterResolver<TParent>;
  courseUrlCreate?: MutationToCourseUrlCreateResolver<TParent>;
  courseUrlCreateMany?: MutationToCourseUrlCreateManyResolver<TParent>;
  courseUrlDelete?: MutationToCourseUrlDeleteResolver<TParent>;
  courseUrlDeleteByFilter?: MutationToCourseUrlDeleteByFilterResolver<TParent>;
  courseUrlDestroy?: MutationToCourseUrlDestroyResolver<TParent>;
  courseUrlDestroyByFilter?: MutationToCourseUrlDestroyByFilterResolver<TParent>;
  courseUrlRestore?: MutationToCourseUrlRestoreResolver<TParent>;
  courseUrlUpdate?: MutationToCourseUrlUpdateResolver<TParent>;
  courseUrlUpdateByFilter?: MutationToCourseUrlUpdateByFilterResolver<TParent>;
  deploy?: MutationToDeployResolver<TParent>;
  environmentVariableCreate?: MutationToEnvironmentVariableCreateResolver<TParent>;
  environmentVariableCreateMany?: MutationToEnvironmentVariableCreateManyResolver<TParent>;
  environmentVariableDelete?: MutationToEnvironmentVariableDeleteResolver<TParent>;
  environmentVariableDeleteByFilter?: MutationToEnvironmentVariableDeleteByFilterResolver<TParent>;
  environmentVariableDestroy?: MutationToEnvironmentVariableDestroyResolver<TParent>;
  environmentVariableDestroyByFilter?: MutationToEnvironmentVariableDestroyByFilterResolver<TParent>;
  environmentVariableRestore?: MutationToEnvironmentVariableRestoreResolver<TParent>;
  environmentVariableUpdate?: MutationToEnvironmentVariableUpdateResolver<TParent>;
  environmentVariableUpdateByFilter?: MutationToEnvironmentVariableUpdateByFilterResolver<TParent>;
  fieldCreate?: MutationToFieldCreateResolver<TParent>;
  fieldDelete?: MutationToFieldDeleteResolver<TParent>;
  fieldUpdate?: MutationToFieldUpdateResolver<TParent>;
  fieldUpdatePosition?: MutationToFieldUpdatePositionResolver<TParent>;
  fileCreate?: MutationToFileCreateResolver<TParent>;
  fileCreateMany?: MutationToFileCreateManyResolver<TParent>;
  fileDelete?: MutationToFileDeleteResolver<TParent>;
  fileDeleteByFilter?: MutationToFileDeleteByFilterResolver<TParent>;
  fileDestroy?: MutationToFileDestroyResolver<TParent>;
  fileDestroyByFilter?: MutationToFileDestroyByFilterResolver<TParent>;
  fileRestore?: MutationToFileRestoreResolver<TParent>;
  fileUpdate?: MutationToFileUpdateResolver<TParent>;
  fileUpdateByFilter?: MutationToFileUpdateByFilterResolver<TParent>;
  imageCreate?: MutationToImageCreateResolver<TParent>;
  imageCreateMany?: MutationToImageCreateManyResolver<TParent>;
  imageDelete?: MutationToImageDeleteResolver<TParent>;
  imageDeleteByFilter?: MutationToImageDeleteByFilterResolver<TParent>;
  imageDestroy?: MutationToImageDestroyResolver<TParent>;
  imageDestroyByFilter?: MutationToImageDestroyByFilterResolver<TParent>;
  imageRestore?: MutationToImageRestoreResolver<TParent>;
  imageUpdate?: MutationToImageUpdateResolver<TParent>;
  imageUpdateByFilter?: MutationToImageUpdateByFilterResolver<TParent>;
  indexCreate?: MutationToIndexCreateResolver<TParent>;
  indexDelete?: MutationToIndexDeleteResolver<TParent>;
  indexUpdate?: MutationToIndexUpdateResolver<TParent>;
  invoke?: MutationToInvokeResolver<TParent>;
  personCreate?: MutationToPersonCreateResolver<TParent>;
  personCreateMany?: MutationToPersonCreateManyResolver<TParent>;
  personDelete?: MutationToPersonDeleteResolver<TParent>;
  personDeleteByFilter?: MutationToPersonDeleteByFilterResolver<TParent>;
  personDestroy?: MutationToPersonDestroyResolver<TParent>;
  personDestroyByFilter?: MutationToPersonDestroyByFilterResolver<TParent>;
  personRestore?: MutationToPersonRestoreResolver<TParent>;
  personUpdate?: MutationToPersonUpdateResolver<TParent>;
  personUpdateByFilter?: MutationToPersonUpdateByFilterResolver<TParent>;
  prepareDeploy?: MutationToPrepareDeployResolver<TParent>;
  roleCreate?: MutationToRoleCreateResolver<TParent>;
  roleCreateMany?: MutationToRoleCreateManyResolver<TParent>;
  roleDelete?: MutationToRoleDeleteResolver<TParent>;
  roleDeleteByFilter?: MutationToRoleDeleteByFilterResolver<TParent>;
  roleDestroy?: MutationToRoleDestroyResolver<TParent>;
  roleDestroyByFilter?: MutationToRoleDestroyByFilterResolver<TParent>;
  roleRestore?: MutationToRoleRestoreResolver<TParent>;
  roleUpdate?: MutationToRoleUpdateResolver<TParent>;
  roleUpdateByFilter?: MutationToRoleUpdateByFilterResolver<TParent>;
  schoolCreate?: MutationToSchoolCreateResolver<TParent>;
  schoolCreateMany?: MutationToSchoolCreateManyResolver<TParent>;
  schoolDelete?: MutationToSchoolDeleteResolver<TParent>;
  schoolDeleteByFilter?: MutationToSchoolDeleteByFilterResolver<TParent>;
  schoolDestroy?: MutationToSchoolDestroyResolver<TParent>;
  schoolDestroyByFilter?: MutationToSchoolDestroyByFilterResolver<TParent>;
  schoolRestore?: MutationToSchoolRestoreResolver<TParent>;
  schoolUpdate?: MutationToSchoolUpdateResolver<TParent>;
  schoolUpdateByFilter?: MutationToSchoolUpdateByFilterResolver<TParent>;
  sendInvitationTo8base?: MutationToSendInvitationTo8baseResolver<TParent>;
  settingsUpdate?: MutationToSettingsUpdateResolver<TParent>;
  system?: MutationToSystemResolver<TParent>;
  tableCreate?: MutationToTableCreateResolver<TParent>;
  tableDelete?: MutationToTableDeleteResolver<TParent>;
  tableUpdate?: MutationToTableUpdateResolver<TParent>;
  technologyLogoCreate?: MutationToTechnologyLogoCreateResolver<TParent>;
  technologyLogoCreateMany?: MutationToTechnologyLogoCreateManyResolver<TParent>;
  technologyLogoDelete?: MutationToTechnologyLogoDeleteResolver<TParent>;
  technologyLogoDeleteByFilter?: MutationToTechnologyLogoDeleteByFilterResolver<TParent>;
  technologyLogoDestroy?: MutationToTechnologyLogoDestroyResolver<TParent>;
  technologyLogoDestroyByFilter?: MutationToTechnologyLogoDestroyByFilterResolver<TParent>;
  technologyLogoRestore?: MutationToTechnologyLogoRestoreResolver<TParent>;
  technologyLogoUpdate?: MutationToTechnologyLogoUpdateResolver<TParent>;
  userChangePassword?: MutationToUserChangePasswordResolver<TParent>;
  userCreate?: MutationToUserCreateResolver<TParent>;
  userCreateMany?: MutationToUserCreateManyResolver<TParent>;
  userDelete?: MutationToUserDeleteResolver<TParent>;
  userDeleteByFilter?: MutationToUserDeleteByFilterResolver<TParent>;
  userDestroy?: MutationToUserDestroyResolver<TParent>;
  userDestroyByFilter?: MutationToUserDestroyByFilterResolver<TParent>;
  userLogin?: MutationToUserLoginResolver<TParent>;
  userPasswordForgot?: MutationToUserPasswordForgotResolver<TParent>;
  userPasswordForgotConfirm?: MutationToUserPasswordForgotConfirmResolver<TParent>;
  userRefreshToken?: MutationToUserRefreshTokenResolver<TParent>;
  userRestore?: MutationToUserRestoreResolver<TParent>;
  userSignUp?: MutationToUserSignUpResolver<TParent>;
  userSignUpResend?: MutationToUserSignUpResendResolver<TParent>;
  userSignUpWithPassword?: MutationToUserSignUpWithPasswordResolver<TParent>;
  userSignUpWithToken?: MutationToUserSignUpWithTokenResolver<TParent>;
  userUpdate?: MutationToUserUpdateResolver<TParent>;
  userUpdateByFilter?: MutationToUserUpdateByFilterResolver<TParent>;
  userVerificationEmailResend?: MutationToUserVerificationEmailResendResolver<TParent>;
  viewCreate?: MutationToViewCreateResolver<TParent>;
  viewUpdate?: MutationToViewUpdateResolver<TParent>;
  workspaceCreate?: MutationToWorkspaceCreateResolver<TParent>;
  workspaceCreateAsync?: MutationToWorkspaceCreateAsyncResolver<TParent>;
  workspaceDelete?: MutationToWorkspaceDeleteResolver<TParent>;
  workspaceLeave?: MutationToWorkspaceLeaveResolver<TParent>;
  workspaceUpdate?: MutationToWorkspaceUpdateResolver<TParent>;
}

export interface MutationToApiTokenCreateArgs {
  data: GQLApiTokenCreateInput;
}
export interface MutationToApiTokenCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToApiTokenCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToApiTokenDeleteArgs {
  data?: GQLApiTokenDeleteInput;
  filter?: GQLApiTokenKeyFilter;
  force?: boolean;
}
export interface MutationToApiTokenDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToApiTokenDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToApiTokenDeleteByFilterArgs {
  filter: GQLApiTokenFilter;
  force?: boolean;
}
export interface MutationToApiTokenDeleteByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToApiTokenDeleteByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToApiTokenDestroyArgs {
  filter?: GQLApiTokenKeyFilter;
  force?: boolean;
}
export interface MutationToApiTokenDestroyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToApiTokenDestroyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToApiTokenDestroyByFilterArgs {
  filter: GQLApiTokenFilter;
  force?: boolean;
}
export interface MutationToApiTokenDestroyByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToApiTokenDestroyByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToApiTokenRestoreArgs {
  id: string;
}
export interface MutationToApiTokenRestoreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToApiTokenRestoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToApiTokenUpdateArgs {
  data: GQLApiTokenUpdateInput;
  destroyDetached?: boolean;
  filter?: GQLApiTokenKeyFilter;
  force?: boolean;
}
export interface MutationToApiTokenUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToApiTokenUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToApiTokenUpdateByFilterArgs {
  data: GQLApiTokenUpdateByFilterInput;
  filter?: GQLApiTokenFilter;
}
export interface MutationToApiTokenUpdateByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToApiTokenUpdateByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToApplicationDeleteArgs {
  data: GQLApplicationDeleteMutationInput;
}
export interface MutationToApplicationDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToApplicationDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToApplicationInstallArgs {
  data: GQLApplicationInstallInput;
}
export interface MutationToApplicationInstallResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToApplicationInstallArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToApplicationUpdateArgs {
  data: GQLApplicationUpdateInput;
}
export interface MutationToApplicationUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToApplicationUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAuthenticationProfileCreateArgs {
  data: GQLAuthenticationProfileCreateInput;
}
export interface MutationToAuthenticationProfileCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAuthenticationProfileCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAuthenticationProfileCreateManyArgs {
  data: Array<GQLAuthenticationProfileCreateManyInput | null>;
}
export interface MutationToAuthenticationProfileCreateManyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAuthenticationProfileCreateManyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAuthenticationProfileDeleteArgs {
  data?: GQLAuthenticationProfileDeleteInput;
  filter?: GQLAuthenticationProfileKeyFilter;
  force?: boolean;
}
export interface MutationToAuthenticationProfileDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAuthenticationProfileDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAuthenticationProfileDeleteByFilterArgs {
  filter: GQLAuthenticationProfileFilter;
  force?: boolean;
}
export interface MutationToAuthenticationProfileDeleteByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAuthenticationProfileDeleteByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAuthenticationProfileDestroyArgs {
  filter?: GQLAuthenticationProfileKeyFilter;
  force?: boolean;
}
export interface MutationToAuthenticationProfileDestroyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAuthenticationProfileDestroyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAuthenticationProfileDestroyByFilterArgs {
  filter: GQLAuthenticationProfileFilter;
  force?: boolean;
}
export interface MutationToAuthenticationProfileDestroyByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAuthenticationProfileDestroyByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAuthenticationProfileRestoreArgs {
  id: string;
}
export interface MutationToAuthenticationProfileRestoreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAuthenticationProfileRestoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAuthenticationProfileUpdateArgs {
  data: GQLAuthenticationProfileUpdateInput;
  destroyDetached?: boolean;
  filter?: GQLAuthenticationProfileKeyFilter;
  force?: boolean;
}
export interface MutationToAuthenticationProfileUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAuthenticationProfileUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAuthenticationProfileUpdateByFilterArgs {
  data: GQLAuthenticationProfileUpdateByFilterInput;
  filter?: GQLAuthenticationProfileFilter;
}
export interface MutationToAuthenticationProfileUpdateByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAuthenticationProfileUpdateByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToAuthenticationSettingsUpdateArgs {
  data: GQLAuthenticationSettingUpdateInput;
}
export interface MutationToAuthenticationSettingsUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAuthenticationSettingsUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBillingDetailsUpdateArgs {
  data: GQLBillingDetailsUpdateMutationInput;
}
export interface MutationToBillingDetailsUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBillingDetailsUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBillingPlanUpdateArgs {
  data: GQLBillingPlanUpdateMutationInput;
}
export interface MutationToBillingPlanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBillingPlanUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBlogCreateArgs {
  data: GQLBlogCreateInput;
}
export interface MutationToBlogCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBlogCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBlogCreateManyArgs {
  data: Array<GQLBlogCreateManyInput | null>;
}
export interface MutationToBlogCreateManyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBlogCreateManyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBlogDeleteArgs {
  data?: GQLBlogDeleteInput;
  filter?: GQLBlogKeyFilter;
  force?: boolean;
}
export interface MutationToBlogDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBlogDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBlogDeleteByFilterArgs {
  filter: GQLBlogFilter;
  force?: boolean;
}
export interface MutationToBlogDeleteByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBlogDeleteByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBlogDestroyArgs {
  filter?: GQLBlogKeyFilter;
  force?: boolean;
}
export interface MutationToBlogDestroyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBlogDestroyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBlogDestroyByFilterArgs {
  filter: GQLBlogFilter;
  force?: boolean;
}
export interface MutationToBlogDestroyByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBlogDestroyByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBlogRestoreArgs {
  id: string;
}
export interface MutationToBlogRestoreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBlogRestoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBlogUpdateArgs {
  data: GQLBlogUpdateInput;
  destroyDetached?: boolean;
  filter?: GQLBlogKeyFilter;
  force?: boolean;
}
export interface MutationToBlogUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBlogUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBlogUpdateByFilterArgs {
  data: GQLBlogUpdateByFilterInput;
  filter?: GQLBlogFilter;
}
export interface MutationToBlogUpdateByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBlogUpdateByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBlogUserCreateArgs {
  data: GQLBlogUserCreateInput;
}
export interface MutationToBlogUserCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBlogUserCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBlogUserCreateManyArgs {
  data: Array<GQLBlogUserCreateManyInput | null>;
}
export interface MutationToBlogUserCreateManyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBlogUserCreateManyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBlogUserDeleteArgs {
  data?: GQLBlogUserDeleteInput;
  filter?: GQLBlogUserKeyFilter;
  force?: boolean;
}
export interface MutationToBlogUserDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBlogUserDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBlogUserDeleteByFilterArgs {
  filter: GQLBlogUserFilter;
  force?: boolean;
}
export interface MutationToBlogUserDeleteByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBlogUserDeleteByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBlogUserDestroyArgs {
  filter?: GQLBlogUserKeyFilter;
  force?: boolean;
}
export interface MutationToBlogUserDestroyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBlogUserDestroyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBlogUserDestroyByFilterArgs {
  filter: GQLBlogUserFilter;
  force?: boolean;
}
export interface MutationToBlogUserDestroyByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBlogUserDestroyByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBlogUserRestoreArgs {
  id: string;
}
export interface MutationToBlogUserRestoreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBlogUserRestoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBlogUserUpdateArgs {
  data: GQLBlogUserUpdateInput;
  destroyDetached?: boolean;
  filter?: GQLBlogUserKeyFilter;
  force?: boolean;
}
export interface MutationToBlogUserUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBlogUserUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBlogUserUpdateByFilterArgs {
  data: GQLBlogUserUpdateByFilterInput;
  filter?: GQLBlogUserFilter;
}
export interface MutationToBlogUserUpdateByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBlogUserUpdateByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCommentCreateArgs {
  data: GQLCommentCreateInput;
}
export interface MutationToCommentCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCommentCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCommentCreateManyArgs {
  data: Array<GQLCommentCreateManyInput | null>;
}
export interface MutationToCommentCreateManyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCommentCreateManyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCommentDeleteArgs {
  data?: GQLCommentDeleteInput;
  filter?: GQLCommentKeyFilter;
  force?: boolean;
}
export interface MutationToCommentDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCommentDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCommentDeleteByFilterArgs {
  filter: GQLCommentFilter;
  force?: boolean;
}
export interface MutationToCommentDeleteByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCommentDeleteByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCommentDestroyArgs {
  filter?: GQLCommentKeyFilter;
  force?: boolean;
}
export interface MutationToCommentDestroyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCommentDestroyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCommentDestroyByFilterArgs {
  filter: GQLCommentFilter;
  force?: boolean;
}
export interface MutationToCommentDestroyByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCommentDestroyByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCommentRestoreArgs {
  id: string;
}
export interface MutationToCommentRestoreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCommentRestoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCommentUpdateArgs {
  data: GQLCommentUpdateInput;
  destroyDetached?: boolean;
  filter?: GQLCommentKeyFilter;
  force?: boolean;
}
export interface MutationToCommentUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCommentUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCommentUpdateByFilterArgs {
  data: GQLCommentUpdateByFilterInput;
  filter?: GQLCommentFilter;
}
export interface MutationToCommentUpdateByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCommentUpdateByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCourseCreateArgs {
  data: GQLCourseCreateInput;
}
export interface MutationToCourseCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCourseCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCourseCreateManyArgs {
  data: Array<GQLCourseCreateManyInput | null>;
}
export interface MutationToCourseCreateManyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCourseCreateManyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCourseDeleteArgs {
  data?: GQLCourseDeleteInput;
  filter?: GQLCourseKeyFilter;
  force?: boolean;
}
export interface MutationToCourseDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCourseDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCourseDeleteByFilterArgs {
  filter: GQLCourseFilter;
  force?: boolean;
}
export interface MutationToCourseDeleteByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCourseDeleteByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCourseDestroyArgs {
  filter?: GQLCourseKeyFilter;
  force?: boolean;
}
export interface MutationToCourseDestroyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCourseDestroyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCourseDestroyByFilterArgs {
  filter: GQLCourseFilter;
  force?: boolean;
}
export interface MutationToCourseDestroyByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCourseDestroyByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCourseRestoreArgs {
  id: string;
}
export interface MutationToCourseRestoreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCourseRestoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCourseUpdateArgs {
  data: GQLCourseUpdateInput;
  destroyDetached?: boolean;
  filter?: GQLCourseKeyFilter;
  force?: boolean;
}
export interface MutationToCourseUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCourseUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCourseUpdateByFilterArgs {
  data: GQLCourseUpdateByFilterInput;
  filter?: GQLCourseFilter;
}
export interface MutationToCourseUpdateByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCourseUpdateByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCourseUrlCreateArgs {
  data: GQLCourseUrlCreateInput;
}
export interface MutationToCourseUrlCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCourseUrlCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCourseUrlCreateManyArgs {
  data: Array<GQLCourseUrlCreateManyInput | null>;
}
export interface MutationToCourseUrlCreateManyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCourseUrlCreateManyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCourseUrlDeleteArgs {
  data?: GQLCourseUrlDeleteInput;
  filter?: GQLCourseUrlKeyFilter;
  force?: boolean;
}
export interface MutationToCourseUrlDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCourseUrlDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCourseUrlDeleteByFilterArgs {
  filter: GQLCourseUrlFilter;
  force?: boolean;
}
export interface MutationToCourseUrlDeleteByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCourseUrlDeleteByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCourseUrlDestroyArgs {
  filter?: GQLCourseUrlKeyFilter;
  force?: boolean;
}
export interface MutationToCourseUrlDestroyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCourseUrlDestroyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCourseUrlDestroyByFilterArgs {
  filter: GQLCourseUrlFilter;
  force?: boolean;
}
export interface MutationToCourseUrlDestroyByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCourseUrlDestroyByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCourseUrlRestoreArgs {
  id: string;
}
export interface MutationToCourseUrlRestoreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCourseUrlRestoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCourseUrlUpdateArgs {
  data: GQLCourseUrlUpdateInput;
  destroyDetached?: boolean;
  filter?: GQLCourseUrlKeyFilter;
  force?: boolean;
}
export interface MutationToCourseUrlUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCourseUrlUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCourseUrlUpdateByFilterArgs {
  data: GQLCourseUrlUpdateByFilterInput;
  filter?: GQLCourseUrlFilter;
}
export interface MutationToCourseUrlUpdateByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCourseUrlUpdateByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeployArgs {
  data?: GQLDeployingBuildInput;
}
export interface MutationToDeployResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeployArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToEnvironmentVariableCreateArgs {
  data: GQLEnvironmentVariableCreateInput;
}
export interface MutationToEnvironmentVariableCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToEnvironmentVariableCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToEnvironmentVariableCreateManyArgs {
  data: Array<GQLEnvironmentVariableCreateManyInput | null>;
}
export interface MutationToEnvironmentVariableCreateManyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToEnvironmentVariableCreateManyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToEnvironmentVariableDeleteArgs {
  data?: GQLEnvironmentVariableDeleteInput;
  filter?: GQLEnvironmentVariableKeyFilter;
  force?: boolean;
}
export interface MutationToEnvironmentVariableDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToEnvironmentVariableDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToEnvironmentVariableDeleteByFilterArgs {
  filter: GQLEnvironmentVariableFilter;
  force?: boolean;
}
export interface MutationToEnvironmentVariableDeleteByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToEnvironmentVariableDeleteByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToEnvironmentVariableDestroyArgs {
  filter?: GQLEnvironmentVariableKeyFilter;
  force?: boolean;
}
export interface MutationToEnvironmentVariableDestroyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToEnvironmentVariableDestroyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToEnvironmentVariableDestroyByFilterArgs {
  filter: GQLEnvironmentVariableFilter;
  force?: boolean;
}
export interface MutationToEnvironmentVariableDestroyByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToEnvironmentVariableDestroyByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToEnvironmentVariableRestoreArgs {
  id: string;
}
export interface MutationToEnvironmentVariableRestoreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToEnvironmentVariableRestoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToEnvironmentVariableUpdateArgs {
  data: GQLEnvironmentVariableUpdateInput;
  destroyDetached?: boolean;
  filter?: GQLEnvironmentVariableKeyFilter;
  force?: boolean;
}
export interface MutationToEnvironmentVariableUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToEnvironmentVariableUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToEnvironmentVariableUpdateByFilterArgs {
  data: GQLEnvironmentVariableUpdateByFilterInput;
  filter?: GQLEnvironmentVariableFilter;
}
export interface MutationToEnvironmentVariableUpdateByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToEnvironmentVariableUpdateByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToFieldCreateArgs {
  data: GQLTableFieldCreateInput;
}
export interface MutationToFieldCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToFieldCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToFieldDeleteArgs {
  data: GQLTableFieldDeleteInput;
}
export interface MutationToFieldDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToFieldDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToFieldUpdateArgs {
  data: GQLTableFieldUpdateInput;
}
export interface MutationToFieldUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToFieldUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToFieldUpdatePositionArgs {
  data: GQLTableFieldPositionUpdateInput;
}
export interface MutationToFieldUpdatePositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToFieldUpdatePositionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToFileCreateArgs {
  data: GQLFileCreateInput;
}
export interface MutationToFileCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToFileCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToFileCreateManyArgs {
  data: Array<GQLFileCreateManyInput | null>;
}
export interface MutationToFileCreateManyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToFileCreateManyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToFileDeleteArgs {
  data?: GQLFileDeleteInput;
  filter?: GQLFileKeyFilter;
  force?: boolean;
}
export interface MutationToFileDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToFileDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToFileDeleteByFilterArgs {
  filter: GQLFileFilter;
  force?: boolean;
}
export interface MutationToFileDeleteByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToFileDeleteByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToFileDestroyArgs {
  filter?: GQLFileKeyFilter;
  force?: boolean;
}
export interface MutationToFileDestroyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToFileDestroyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToFileDestroyByFilterArgs {
  filter: GQLFileFilter;
  force?: boolean;
}
export interface MutationToFileDestroyByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToFileDestroyByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToFileRestoreArgs {
  id: string;
}
export interface MutationToFileRestoreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToFileRestoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToFileUpdateArgs {
  data: GQLFileUpdateInput;
  destroyDetached?: boolean;
  filter?: GQLFileKeyFilter;
  force?: boolean;
}
export interface MutationToFileUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToFileUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToFileUpdateByFilterArgs {
  data: GQLFileUpdateByFilterInput;
  filter?: GQLFileFilter;
}
export interface MutationToFileUpdateByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToFileUpdateByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToImageCreateArgs {
  data: GQLImageCreateInput;
}
export interface MutationToImageCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToImageCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToImageCreateManyArgs {
  data: Array<GQLImageCreateManyInput | null>;
}
export interface MutationToImageCreateManyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToImageCreateManyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToImageDeleteArgs {
  data?: GQLImageDeleteInput;
  filter?: GQLImageKeyFilter;
  force?: boolean;
}
export interface MutationToImageDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToImageDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToImageDeleteByFilterArgs {
  filter: GQLImageFilter;
  force?: boolean;
}
export interface MutationToImageDeleteByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToImageDeleteByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToImageDestroyArgs {
  filter?: GQLImageKeyFilter;
  force?: boolean;
}
export interface MutationToImageDestroyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToImageDestroyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToImageDestroyByFilterArgs {
  filter: GQLImageFilter;
  force?: boolean;
}
export interface MutationToImageDestroyByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToImageDestroyByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToImageRestoreArgs {
  id: string;
}
export interface MutationToImageRestoreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToImageRestoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToImageUpdateArgs {
  data: GQLImageUpdateInput;
  destroyDetached?: boolean;
  filter?: GQLImageKeyFilter;
  force?: boolean;
}
export interface MutationToImageUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToImageUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToImageUpdateByFilterArgs {
  data: GQLImageUpdateByFilterInput;
  filter?: GQLImageFilter;
}
export interface MutationToImageUpdateByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToImageUpdateByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToIndexCreateArgs {
  data: GQLIndexCreateInput;
}
export interface MutationToIndexCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToIndexCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToIndexDeleteArgs {
  data: GQLIndexDeleteInput;
}
export interface MutationToIndexDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToIndexDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToIndexUpdateArgs {
  data: GQLIndexUpdateInput;
}
export interface MutationToIndexUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToIndexUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToInvokeArgs {
  data?: GQLInvokeData;
}
export interface MutationToInvokeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToInvokeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToPersonCreateArgs {
  data: GQLPersonCreateInput;
}
export interface MutationToPersonCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToPersonCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToPersonCreateManyArgs {
  data: Array<GQLPersonCreateManyInput | null>;
}
export interface MutationToPersonCreateManyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToPersonCreateManyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToPersonDeleteArgs {
  data?: GQLPersonDeleteInput;
  filter?: GQLPersonKeyFilter;
  force?: boolean;
}
export interface MutationToPersonDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToPersonDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToPersonDeleteByFilterArgs {
  filter: GQLPersonFilter;
  force?: boolean;
}
export interface MutationToPersonDeleteByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToPersonDeleteByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToPersonDestroyArgs {
  filter?: GQLPersonKeyFilter;
  force?: boolean;
}
export interface MutationToPersonDestroyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToPersonDestroyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToPersonDestroyByFilterArgs {
  filter: GQLPersonFilter;
  force?: boolean;
}
export interface MutationToPersonDestroyByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToPersonDestroyByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToPersonRestoreArgs {
  id: string;
}
export interface MutationToPersonRestoreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToPersonRestoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToPersonUpdateArgs {
  data: GQLPersonUpdateInput;
  destroyDetached?: boolean;
  filter?: GQLPersonKeyFilter;
  force?: boolean;
}
export interface MutationToPersonUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToPersonUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToPersonUpdateByFilterArgs {
  data: GQLPersonUpdateByFilterInput;
  filter?: GQLPersonFilter;
}
export interface MutationToPersonUpdateByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToPersonUpdateByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToPrepareDeployResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRoleCreateArgs {
  data: GQLRoleCreateInput;
}
export interface MutationToRoleCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRoleCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRoleCreateManyArgs {
  data: Array<GQLRoleCreateManyInput | null>;
}
export interface MutationToRoleCreateManyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRoleCreateManyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRoleDeleteArgs {
  data?: GQLRoleDeleteInput;
  filter?: GQLRoleKeyFilter;
  force?: boolean;
}
export interface MutationToRoleDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRoleDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRoleDeleteByFilterArgs {
  filter: GQLRoleFilter;
  force?: boolean;
}
export interface MutationToRoleDeleteByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRoleDeleteByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRoleDestroyArgs {
  filter?: GQLRoleKeyFilter;
  force?: boolean;
}
export interface MutationToRoleDestroyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRoleDestroyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRoleDestroyByFilterArgs {
  filter: GQLRoleFilter;
  force?: boolean;
}
export interface MutationToRoleDestroyByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRoleDestroyByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRoleRestoreArgs {
  id: string;
}
export interface MutationToRoleRestoreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRoleRestoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRoleUpdateArgs {
  data: GQLRoleUpdateInput;
  destroyDetached?: boolean;
  filter?: GQLRoleKeyFilter;
  force?: boolean;
}
export interface MutationToRoleUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRoleUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRoleUpdateByFilterArgs {
  data: GQLRoleUpdateByFilterInput;
  filter?: GQLRoleFilter;
}
export interface MutationToRoleUpdateByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRoleUpdateByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSchoolCreateArgs {
  data: GQLSchoolCreateInput;
}
export interface MutationToSchoolCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSchoolCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSchoolCreateManyArgs {
  data: Array<GQLSchoolCreateManyInput | null>;
}
export interface MutationToSchoolCreateManyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSchoolCreateManyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSchoolDeleteArgs {
  data?: GQLSchoolDeleteInput;
  filter?: GQLSchoolKeyFilter;
  force?: boolean;
}
export interface MutationToSchoolDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSchoolDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSchoolDeleteByFilterArgs {
  filter: GQLSchoolFilter;
  force?: boolean;
}
export interface MutationToSchoolDeleteByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSchoolDeleteByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSchoolDestroyArgs {
  filter?: GQLSchoolKeyFilter;
  force?: boolean;
}
export interface MutationToSchoolDestroyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSchoolDestroyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSchoolDestroyByFilterArgs {
  filter: GQLSchoolFilter;
  force?: boolean;
}
export interface MutationToSchoolDestroyByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSchoolDestroyByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSchoolRestoreArgs {
  id: string;
}
export interface MutationToSchoolRestoreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSchoolRestoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSchoolUpdateArgs {
  data: GQLSchoolUpdateInput;
  destroyDetached?: boolean;
  filter?: GQLSchoolKeyFilter;
  force?: boolean;
}
export interface MutationToSchoolUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSchoolUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSchoolUpdateByFilterArgs {
  data: GQLSchoolUpdateByFilterInput;
  filter?: GQLSchoolFilter;
}
export interface MutationToSchoolUpdateByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSchoolUpdateByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSendInvitationTo8baseArgs {
  inviteEmail: string;
}
export interface MutationToSendInvitationTo8baseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSendInvitationTo8baseArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSettingsUpdateArgs {
  data: GQLSettingUpdateInput;
}
export interface MutationToSettingsUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSettingsUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSystemResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToTableCreateArgs {
  data: GQLTableCreateInput;
}
export interface MutationToTableCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToTableCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToTableDeleteArgs {
  data: GQLTableDeleteInput;
}
export interface MutationToTableDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToTableDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToTableUpdateArgs {
  data: GQLTableUpdateInput;
}
export interface MutationToTableUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToTableUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToTechnologyLogoCreateArgs {
  data: GQLTechnologyLogoCreateInput;
}
export interface MutationToTechnologyLogoCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToTechnologyLogoCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToTechnologyLogoCreateManyArgs {
  data: Array<GQLTechnologyLogoCreateManyInput | null>;
}
export interface MutationToTechnologyLogoCreateManyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToTechnologyLogoCreateManyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToTechnologyLogoDeleteArgs {
  data?: GQLTechnologyLogoDeleteInput;
  filter?: GQLTechnologyLogoKeyFilter;
  force?: boolean;
}
export interface MutationToTechnologyLogoDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToTechnologyLogoDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToTechnologyLogoDeleteByFilterArgs {
  filter: GQLTechnologyLogoFilter;
  force?: boolean;
}
export interface MutationToTechnologyLogoDeleteByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToTechnologyLogoDeleteByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToTechnologyLogoDestroyArgs {
  filter?: GQLTechnologyLogoKeyFilter;
  force?: boolean;
}
export interface MutationToTechnologyLogoDestroyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToTechnologyLogoDestroyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToTechnologyLogoDestroyByFilterArgs {
  filter: GQLTechnologyLogoFilter;
  force?: boolean;
}
export interface MutationToTechnologyLogoDestroyByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToTechnologyLogoDestroyByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToTechnologyLogoRestoreArgs {
  id: string;
}
export interface MutationToTechnologyLogoRestoreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToTechnologyLogoRestoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToTechnologyLogoUpdateArgs {
  data: GQLTechnologyLogoUpdateInput;
  destroyDetached?: boolean;
  filter?: GQLTechnologyLogoKeyFilter;
  force?: boolean;
}
export interface MutationToTechnologyLogoUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToTechnologyLogoUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserChangePasswordArgs {
  data: GQLChangePasswordInput;
}
export interface MutationToUserChangePasswordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserChangePasswordArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserCreateArgs {
  data: GQLUserCreateInput;
}
export interface MutationToUserCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserCreateManyArgs {
  data: Array<GQLUserCreateManyInput | null>;
}
export interface MutationToUserCreateManyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserCreateManyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserDeleteArgs {
  data?: GQLUserDeleteInput;
  filter?: GQLUserKeyFilter;
  force?: boolean;
}
export interface MutationToUserDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserDeleteByFilterArgs {
  filter: GQLUserFilter;
  force?: boolean;
}
export interface MutationToUserDeleteByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserDeleteByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserDestroyArgs {
  filter?: GQLUserKeyFilter;
  force?: boolean;
}
export interface MutationToUserDestroyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserDestroyArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserDestroyByFilterArgs {
  filter: GQLUserFilter;
  force?: boolean;
}
export interface MutationToUserDestroyByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserDestroyByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserLoginArgs {
  data: GQLUserLoginInput;
}
export interface MutationToUserLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserLoginArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserPasswordForgotArgs {
  data: GQLPasswordForgotInput;
}
export interface MutationToUserPasswordForgotResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserPasswordForgotArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserPasswordForgotConfirmArgs {
  data: GQLPasswordForgotConfirmInput;
}
export interface MutationToUserPasswordForgotConfirmResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserPasswordForgotConfirmArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserRefreshTokenArgs {
  data: GQLRefreshTokenInput;
}
export interface MutationToUserRefreshTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserRefreshTokenArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserRestoreArgs {
  id: string;
}
export interface MutationToUserRestoreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserRestoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserSignUpArgs {
  authProfileId?: string;
  user: GQLUserCreateInput;
}
export interface MutationToUserSignUpResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserSignUpArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserSignUpResendArgs {
  data: GQLSignUpResendInput;
}
export interface MutationToUserSignUpResendResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserSignUpResendArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserSignUpWithPasswordArgs {
  authProfileId?: string;
  password: string;
  user: GQLUserCreateInput;
}
export interface MutationToUserSignUpWithPasswordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserSignUpWithPasswordArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserSignUpWithTokenArgs {
  authProfileId?: string;
  user: GQLUserCreateInput;
}
export interface MutationToUserSignUpWithTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserSignUpWithTokenArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserUpdateArgs {
  data: GQLUserUpdateInput;
  destroyDetached?: boolean;
  filter?: GQLUserKeyFilter;
  force?: boolean;
}
export interface MutationToUserUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserUpdateByFilterArgs {
  data: GQLUserUpdateByFilterInput;
  filter?: GQLUserFilter;
}
export interface MutationToUserUpdateByFilterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserUpdateByFilterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUserVerificationEmailResendArgs {
  authProfileId?: string;
  data: GQLVerificationEmailResendInput;
}
export interface MutationToUserVerificationEmailResendResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUserVerificationEmailResendArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToViewCreateArgs {
  data: GQLViewCreateInput;
}
export interface MutationToViewCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToViewCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToViewUpdateArgs {
  data: GQLViewUpdateInput;
}
export interface MutationToViewUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToViewUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToWorkspaceCreateArgs {
  data: GQLWorkspaceCreateMutationInput;
}
export interface MutationToWorkspaceCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToWorkspaceCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToWorkspaceCreateAsyncArgs {
  data: GQLWorkspaceCreateMutationInput;
}
export interface MutationToWorkspaceCreateAsyncResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToWorkspaceCreateAsyncArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToWorkspaceDeleteArgs {
  data: GQLWorkspaceDeleteMutationInput;
}
export interface MutationToWorkspaceDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToWorkspaceDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToWorkspaceLeaveArgs {
  force?: boolean;
}
export interface MutationToWorkspaceLeaveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToWorkspaceLeaveArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToWorkspaceUpdateArgs {
  data: GQLWorkspaceUpdateMutationInput;
}
export interface MutationToWorkspaceUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToWorkspaceUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLApiTokenResponseTypeResolver<TParent = any> {
  createdAt?: ApiTokenResponseToCreatedAtResolver<TParent>;
  createdBy?: ApiTokenResponseToCreatedByResolver<TParent>;
  deletedAt?: ApiTokenResponseToDeletedAtResolver<TParent>;
  id?: ApiTokenResponseToIdResolver<TParent>;
  name?: ApiTokenResponseToNameResolver<TParent>;
  roles?: ApiTokenResponseToRolesResolver<TParent>;
  token?: ApiTokenResponseToTokenResolver<TParent>;
  updatedAt?: ApiTokenResponseToUpdatedAtResolver<TParent>;
}

export interface ApiTokenResponseToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenResponseToCreatedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenResponseToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenResponseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenResponseToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenResponseToRolesArgs {
  after?: string;
  before?: string;
  filter?: GQLRoleFilter;
  first?: number;
  groupBy?: GQLRoleGroupBy;
  last?: number;
  orderBy?: Array<GQLRoleOrderBy | null>;
  skip?: number;
  sort?: Array<GQLRoleSort>;
}
export interface ApiTokenResponseToRolesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: ApiTokenResponseToRolesArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenResponseToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenResponseToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSuccessResponseTypeResolver<TParent = any> {
  success?: SuccessResponseToSuccessResolver<TParent>;
}

export interface SuccessResponseToSuccessResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLApiTokenManyResponseTypeResolver<TParent = any> {
  count?: ApiTokenManyResponseToCountResolver<TParent>;
  items?: ApiTokenManyResponseToItemsResolver<TParent>;
}

export interface ApiTokenManyResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenManyResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAuthenticationProfileManyResponseTypeResolver<TParent = any> {
  count?: AuthenticationProfileManyResponseToCountResolver<TParent>;
  items?: AuthenticationProfileManyResponseToItemsResolver<TParent>;
}

export interface AuthenticationProfileManyResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfileManyResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBlogManyResponseTypeResolver<TParent = any> {
  count?: BlogManyResponseToCountResolver<TParent>;
  items?: BlogManyResponseToItemsResolver<TParent>;
}

export interface BlogManyResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogManyResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBlogUserManyResponseTypeResolver<TParent = any> {
  count?: BlogUserManyResponseToCountResolver<TParent>;
  items?: BlogUserManyResponseToItemsResolver<TParent>;
}

export interface BlogUserManyResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogUserManyResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommentManyResponseTypeResolver<TParent = any> {
  count?: CommentManyResponseToCountResolver<TParent>;
  items?: CommentManyResponseToItemsResolver<TParent>;
}

export interface CommentManyResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentManyResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCourseManyResponseTypeResolver<TParent = any> {
  count?: CourseManyResponseToCountResolver<TParent>;
  items?: CourseManyResponseToItemsResolver<TParent>;
}

export interface CourseManyResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseManyResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCourseUrlManyResponseTypeResolver<TParent = any> {
  count?: CourseUrlManyResponseToCountResolver<TParent>;
  items?: CourseUrlManyResponseToItemsResolver<TParent>;
}

export interface CourseUrlManyResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseUrlManyResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnvironmentVariableManyResponseTypeResolver<TParent = any> {
  count?: EnvironmentVariableManyResponseToCountResolver<TParent>;
  items?: EnvironmentVariableManyResponseToItemsResolver<TParent>;
}

export interface EnvironmentVariableManyResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnvironmentVariableManyResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFileManyResponseTypeResolver<TParent = any> {
  count?: FileManyResponseToCountResolver<TParent>;
  items?: FileManyResponseToItemsResolver<TParent>;
}

export interface FileManyResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FileManyResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLImageManyResponseTypeResolver<TParent = any> {
  count?: ImageManyResponseToCountResolver<TParent>;
  items?: ImageManyResponseToItemsResolver<TParent>;
}

export interface ImageManyResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImageManyResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLInvokeFunctionResponseTypeResolver<TParent = any> {
  responseData?: InvokeFunctionResponseToResponseDataResolver<TParent>;
}

export interface InvokeFunctionResponseToResponseDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPersonManyResponseTypeResolver<TParent = any> {
  count?: PersonManyResponseToCountResolver<TParent>;
  items?: PersonManyResponseToItemsResolver<TParent>;
}

export interface PersonManyResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonManyResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLDeployDataResponseTypeResolver<TParent = any> {
  buildName?: DeployDataResponseToBuildNameResolver<TParent>;
  uploadBuildUrl?: DeployDataResponseToUploadBuildUrlResolver<TParent>;
  uploadMetaDataUrl?: DeployDataResponseToUploadMetaDataUrlResolver<TParent>;
}

export interface DeployDataResponseToBuildNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployDataResponseToUploadBuildUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface DeployDataResponseToUploadMetaDataUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRoleManyResponseTypeResolver<TParent = any> {
  count?: RoleManyResponseToCountResolver<TParent>;
  items?: RoleManyResponseToItemsResolver<TParent>;
}

export interface RoleManyResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RoleManyResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSchoolManyResponseTypeResolver<TParent = any> {
  count?: SchoolManyResponseToCountResolver<TParent>;
  items?: SchoolManyResponseToItemsResolver<TParent>;
}

export interface SchoolManyResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SchoolManyResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemMutationTypeResolver<TParent = any> {
  applicationDelete?: SystemMutationToApplicationDeleteResolver<TParent>;
  applicationInstall?: SystemMutationToApplicationInstallResolver<TParent>;
  applicationUpdate?: SystemMutationToApplicationUpdateResolver<TParent>;
  billingDetailsUpdate?: SystemMutationToBillingDetailsUpdateResolver<TParent>;
  billingPlanUpdate?: SystemMutationToBillingPlanUpdateResolver<TParent>;
  ciCommit?: SystemMutationToCiCommitResolver<TParent>;
  ciInstall?: SystemMutationToCiInstallResolver<TParent>;
  deploy?: SystemMutationToDeployResolver<TParent>;
  environmentBackup?: SystemMutationToEnvironmentBackupResolver<TParent>;
  environmentBranch?: SystemMutationToEnvironmentBranchResolver<TParent>;
  environmentDelete?: SystemMutationToEnvironmentDeleteResolver<TParent>;
  environmentDeleteAsync?: SystemMutationToEnvironmentDeleteAsyncResolver<TParent>;
  environmentMemberDelete?: SystemMutationToEnvironmentMemberDeleteResolver<TParent>;
  environmentMemberUpdate?: SystemMutationToEnvironmentMemberUpdateResolver<TParent>;
  environmentRestore?: SystemMutationToEnvironmentRestoreResolver<TParent>;
  environmentSetup?: SystemMutationToEnvironmentSetupResolver<TParent>;
  fieldCreate?: SystemMutationToFieldCreateResolver<TParent>;
  fieldDelete?: SystemMutationToFieldDeleteResolver<TParent>;
  fieldUpdate?: SystemMutationToFieldUpdateResolver<TParent>;
  fieldUpdatePosition?: SystemMutationToFieldUpdatePositionResolver<TParent>;
  indexCreate?: SystemMutationToIndexCreateResolver<TParent>;
  indexDelete?: SystemMutationToIndexDeleteResolver<TParent>;
  indexUpdate?: SystemMutationToIndexUpdateResolver<TParent>;
  inviteMembers?: SystemMutationToInviteMembersResolver<TParent>;
  invoke?: SystemMutationToInvokeResolver<TParent>;
  memberAccountUpsert?: SystemMutationToMemberAccountUpsertResolver<TParent>;
  memberInvitationAccept?: SystemMutationToMemberInvitationAcceptResolver<TParent>;
  memberInvitationCancel?: SystemMutationToMemberInvitationCancelResolver<TParent>;
  memberInvitationResend?: SystemMutationToMemberInvitationResendResolver<TParent>;
  memberPaymentDetailsUpdate?: SystemMutationToMemberPaymentDetailsUpdateResolver<TParent>;
  notificationUpdate?: SystemMutationToNotificationUpdateResolver<TParent>;
  organizationInviteUser?: SystemMutationToOrganizationInviteUserResolver<TParent>;
  organizationInviteUserAccept?: SystemMutationToOrganizationInviteUserAcceptResolver<TParent>;
  organizationInviteUserCancel?: SystemMutationToOrganizationInviteUserCancelResolver<TParent>;
  organizationPaymentDetailsUpdate?: SystemMutationToOrganizationPaymentDetailsUpdateResolver<TParent>;
  organizationUpdate?: SystemMutationToOrganizationUpdateResolver<TParent>;
  organizationUserRemove?: SystemMutationToOrganizationUserRemoveResolver<TParent>;
  organizationWorkspaceAdd?: SystemMutationToOrganizationWorkspaceAddResolver<TParent>;
  organizationWorkspaceAddAccept?: SystemMutationToOrganizationWorkspaceAddAcceptResolver<TParent>;
  organizationWorkspaceAddCancel?: SystemMutationToOrganizationWorkspaceAddCancelResolver<TParent>;
  organizationWorkspaceRemove?: SystemMutationToOrganizationWorkspaceRemoveResolver<TParent>;
  organizationWorkspaceUserRemove?: SystemMutationToOrganizationWorkspaceUserRemoveResolver<TParent>;
  organizationWorkspaceUserShare?: SystemMutationToOrganizationWorkspaceUserShareResolver<TParent>;
  prepareDeploy?: SystemMutationToPrepareDeployResolver<TParent>;
  tableCreate?: SystemMutationToTableCreateResolver<TParent>;
  tableDelete?: SystemMutationToTableDeleteResolver<TParent>;
  tableUpdate?: SystemMutationToTableUpdateResolver<TParent>;
  viewCreate?: SystemMutationToViewCreateResolver<TParent>;
  viewUpdate?: SystemMutationToViewUpdateResolver<TParent>;
  workspaceCreate?: SystemMutationToWorkspaceCreateResolver<TParent>;
  workspaceCreateAsync?: SystemMutationToWorkspaceCreateAsyncResolver<TParent>;
  workspaceDelete?: SystemMutationToWorkspaceDeleteResolver<TParent>;
  workspaceLeave?: SystemMutationToWorkspaceLeaveResolver<TParent>;
  workspacePaymentDetailsUpdate?: SystemMutationToWorkspacePaymentDetailsUpdateResolver<TParent>;
  workspaceTransferAccept?: SystemMutationToWorkspaceTransferAcceptResolver<TParent>;
  workspaceTransferCancel?: SystemMutationToWorkspaceTransferCancelResolver<TParent>;
  workspaceTransferRegister?: SystemMutationToWorkspaceTransferRegisterResolver<TParent>;
  workspaceUpdate?: SystemMutationToWorkspaceUpdateResolver<TParent>;
}

export interface SystemMutationToApplicationDeleteArgs {
  data: GQLSystemApplicationDeleteMutationInput;
}
export interface SystemMutationToApplicationDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToApplicationDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToApplicationInstallArgs {
  data: GQLSystemApplicationInstallInput;
}
export interface SystemMutationToApplicationInstallResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToApplicationInstallArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToApplicationUpdateArgs {
  data: GQLSystemApplicationUpdateInput;
}
export interface SystemMutationToApplicationUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToApplicationUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToBillingDetailsUpdateArgs {
  data: GQLSystemBillingDetailsUpdateMutationInput;
}
export interface SystemMutationToBillingDetailsUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToBillingDetailsUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToBillingPlanUpdateArgs {
  data: GQLSystemBillingPlanUpdateMutationInput;
}
export interface SystemMutationToBillingPlanUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToBillingPlanUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToCiCommitArgs {
  build?: string;
  migrationNames?: Array<string | null>;
  mode?: GQLSystemCiCommitMode;
}
export interface SystemMutationToCiCommitResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToCiCommitArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToCiInstallResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToDeployArgs {
  data?: GQLSystemDeployingBuildInput;
}
export interface SystemMutationToDeployResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToDeployArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToEnvironmentBackupArgs {
  environmentName: string;
}
export interface SystemMutationToEnvironmentBackupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToEnvironmentBackupArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToEnvironmentBranchArgs {
  mode?: GQLSystemBranchEnvironmentMode;
  name: string;
}
export interface SystemMutationToEnvironmentBranchResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToEnvironmentBranchArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToEnvironmentDeleteArgs {
  environmentName: string;
}
export interface SystemMutationToEnvironmentDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToEnvironmentDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToEnvironmentDeleteAsyncArgs {
  environmentName: string;
}
export interface SystemMutationToEnvironmentDeleteAsyncResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToEnvironmentDeleteAsyncArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToEnvironmentMemberDeleteArgs {
  filter?: GQLSystemEnvironmentMembersFilter;
}
export interface SystemMutationToEnvironmentMemberDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToEnvironmentMemberDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToEnvironmentMemberUpdateArgs {
  data?: GQLSystemEnvironmentMemberUpdateData;
  filter?: GQLSystemEnvironmentMembersFilter;
}
export interface SystemMutationToEnvironmentMemberUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToEnvironmentMemberUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToEnvironmentRestoreArgs {
  backup: string;
  environmentName: string;
}
export interface SystemMutationToEnvironmentRestoreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToEnvironmentRestoreArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToEnvironmentSetupArgs {
  data?: GQLEnvironmentSetupInput;
}
export interface SystemMutationToEnvironmentSetupResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToEnvironmentSetupArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToFieldCreateArgs {
  data: GQLSystemTableFieldCreateInput;
}
export interface SystemMutationToFieldCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToFieldCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToFieldDeleteArgs {
  data: GQLSystemTableFieldDeleteInput;
}
export interface SystemMutationToFieldDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToFieldDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToFieldUpdateArgs {
  data: GQLSystemTableFieldUpdateInput;
}
export interface SystemMutationToFieldUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToFieldUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToFieldUpdatePositionArgs {
  data: GQLSystemTableFieldPositionUpdateInput;
}
export interface SystemMutationToFieldUpdatePositionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToFieldUpdatePositionArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToIndexCreateArgs {
  data: GQLSystemIndexCreateInput;
}
export interface SystemMutationToIndexCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToIndexCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToIndexDeleteArgs {
  data: GQLSystemIndexDeleteInput;
}
export interface SystemMutationToIndexDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToIndexDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToIndexUpdateArgs {
  data: GQLSystemIndexUpdateInput;
}
export interface SystemMutationToIndexUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToIndexUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToInviteMembersArgs {
  data: GQLSystemInviteMembersInput;
  force?: boolean;
}
export interface SystemMutationToInviteMembersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToInviteMembersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToInvokeArgs {
  data?: GQLSystemInvokeData;
}
export interface SystemMutationToInvokeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToInvokeArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToMemberAccountUpsertArgs {
  data?: GQLSystemMemberAccountUpsertDataInput;
}
export interface SystemMutationToMemberAccountUpsertResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToMemberAccountUpsertArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToMemberInvitationAcceptArgs {
  data: GQLSystemMemberInvitationAcceptInput;
}
export interface SystemMutationToMemberInvitationAcceptResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToMemberInvitationAcceptArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToMemberInvitationCancelArgs {
  data: GQLSystemMemberInvitationCancelInput;
}
export interface SystemMutationToMemberInvitationCancelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToMemberInvitationCancelArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToMemberInvitationResendArgs {
  data: GQLSystemMemberInvitationResendInput;
}
export interface SystemMutationToMemberInvitationResendResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToMemberInvitationResendArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToMemberPaymentDetailsUpdateArgs {
  data: GQLSystemMemberPaymentDetailsUpdateMutationInput;
}
export interface SystemMutationToMemberPaymentDetailsUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToMemberPaymentDetailsUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToNotificationUpdateArgs {
  id: string;
  status: GQLNotificationStatusType;
}
export interface SystemMutationToNotificationUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToNotificationUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToOrganizationInviteUserArgs {
  email: string;
  firstName?: string;
  lastName?: string;
  organizationId: string;
  role: string;
}
export interface SystemMutationToOrganizationInviteUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToOrganizationInviteUserArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToOrganizationInviteUserAcceptArgs {
  invitationId: string;
}
export interface SystemMutationToOrganizationInviteUserAcceptResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToOrganizationInviteUserAcceptArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToOrganizationInviteUserCancelArgs {
  invitationId: string;
}
export interface SystemMutationToOrganizationInviteUserCancelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToOrganizationInviteUserCancelArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToOrganizationPaymentDetailsUpdateArgs {
  data: GQLSystemOrganizationPaymentDetailsUpdateMutationInput;
}
export interface SystemMutationToOrganizationPaymentDetailsUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToOrganizationPaymentDetailsUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToOrganizationUpdateArgs {
  description?: string;
  id: string;
  image?: GQLGraphQLCreateFileItemInput;
  name?: string;
  type?: GQLSystemOrganizationTypeEnum;
}
export interface SystemMutationToOrganizationUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToOrganizationUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToOrganizationUserRemoveArgs {
  email: string;
  organizationId: string;
}
export interface SystemMutationToOrganizationUserRemoveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToOrganizationUserRemoveArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToOrganizationWorkspaceAddArgs {
  organizationId: string;
  workspaceId: string;
}
export interface SystemMutationToOrganizationWorkspaceAddResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToOrganizationWorkspaceAddArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToOrganizationWorkspaceAddAcceptArgs {
  sessionId: string;
}
export interface SystemMutationToOrganizationWorkspaceAddAcceptResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToOrganizationWorkspaceAddAcceptArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToOrganizationWorkspaceAddCancelArgs {
  sessionId: string;
}
export interface SystemMutationToOrganizationWorkspaceAddCancelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToOrganizationWorkspaceAddCancelArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToOrganizationWorkspaceRemoveArgs {
  organizationId: string;
  workspaceId: string;
}
export interface SystemMutationToOrganizationWorkspaceRemoveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToOrganizationWorkspaceRemoveArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToOrganizationWorkspaceUserRemoveArgs {
  email: string;
  organizationId: string;
  workspaceId: string;
}
export interface SystemMutationToOrganizationWorkspaceUserRemoveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToOrganizationWorkspaceUserRemoveArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToOrganizationWorkspaceUserShareArgs {
  email: string;
  environments?: Array<GQLSystemOrganizationWorkspaceUserShareInfo | null>;
}
export interface SystemMutationToOrganizationWorkspaceUserShareResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToOrganizationWorkspaceUserShareArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToPrepareDeployResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToTableCreateArgs {
  data: GQLSystemTableCreateInput;
}
export interface SystemMutationToTableCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToTableCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToTableDeleteArgs {
  data: GQLSystemTableDeleteInput;
}
export interface SystemMutationToTableDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToTableDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToTableUpdateArgs {
  data: GQLSystemTableUpdateInput;
}
export interface SystemMutationToTableUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToTableUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToViewCreateArgs {
  data: GQLSystemViewCreateInput;
}
export interface SystemMutationToViewCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToViewCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToViewUpdateArgs {
  data: GQLSystemViewUpdateInput;
}
export interface SystemMutationToViewUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToViewUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToWorkspaceCreateArgs {
  data: GQLSystemWorkspaceCreateMutationInput;
}
export interface SystemMutationToWorkspaceCreateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToWorkspaceCreateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToWorkspaceCreateAsyncArgs {
  data: GQLSystemWorkspaceCreateMutationInput;
}
export interface SystemMutationToWorkspaceCreateAsyncResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToWorkspaceCreateAsyncArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToWorkspaceDeleteArgs {
  data: GQLSystemWorkspaceDeleteMutationInput;
}
export interface SystemMutationToWorkspaceDeleteResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToWorkspaceDeleteArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToWorkspaceLeaveArgs {
  force?: boolean;
}
export interface SystemMutationToWorkspaceLeaveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToWorkspaceLeaveArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToWorkspacePaymentDetailsUpdateArgs {
  data: GQLSystemWorkspacePaymentDetailsUpdateMutationInput;
}
export interface SystemMutationToWorkspacePaymentDetailsUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToWorkspacePaymentDetailsUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToWorkspaceTransferAcceptArgs {
  workspaceId: string;
}
export interface SystemMutationToWorkspaceTransferAcceptResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToWorkspaceTransferAcceptArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToWorkspaceTransferCancelArgs {
  workspaceId: string;
}
export interface SystemMutationToWorkspaceTransferCancelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToWorkspaceTransferCancelArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToWorkspaceTransferRegisterArgs {
  owner: string;
  workspaceId: string;
}
export interface SystemMutationToWorkspaceTransferRegisterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToWorkspaceTransferRegisterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemMutationToWorkspaceUpdateArgs {
  data: GQLSystemWorkspaceUpdateMutationInput;
}
export interface SystemMutationToWorkspaceUpdateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: SystemMutationToWorkspaceUpdateArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAsyncSessionTypeResolver<TParent = any> {
  sessionId?: AsyncSessionToSessionIdResolver<TParent>;
}

export interface AsyncSessionToSessionIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemTeamInvitationDetailsTypeResolver<TParent = any> {
  accepted?: SystemTeamInvitationDetailsToAcceptedResolver<TParent>;
  acceptedOn?: SystemTeamInvitationDetailsToAcceptedOnResolver<TParent>;
  apiHost?: SystemTeamInvitationDetailsToApiHostResolver<TParent>;
  email?: SystemTeamInvitationDetailsToEmailResolver<TParent>;
  firstName?: SystemTeamInvitationDetailsToFirstNameResolver<TParent>;
  id?: SystemTeamInvitationDetailsToIdResolver<TParent>;
  invitedBy?: SystemTeamInvitationDetailsToInvitedByResolver<TParent>;
  isRegistered?: SystemTeamInvitationDetailsToIsRegisteredResolver<TParent>;
  lastName?: SystemTeamInvitationDetailsToLastNameResolver<TParent>;
  resentOn?: SystemTeamInvitationDetailsToResentOnResolver<TParent>;
}

export interface SystemTeamInvitationDetailsToAcceptedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTeamInvitationDetailsToAcceptedOnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTeamInvitationDetailsToApiHostResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTeamInvitationDetailsToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTeamInvitationDetailsToFirstNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTeamInvitationDetailsToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTeamInvitationDetailsToInvitedByResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTeamInvitationDetailsToIsRegisteredResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTeamInvitationDetailsToLastNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemTeamInvitationDetailsToResentOnResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemInvokeFunctionResponseTypeResolver<TParent = any> {
  responseData?: SystemInvokeFunctionResponseToResponseDataResolver<TParent>;
}

export interface SystemInvokeFunctionResponseToResponseDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemMemberInvitationAcceptResponseTypeResolver<TParent = any> {
  success?: SystemMemberInvitationAcceptResponseToSuccessResolver<TParent>;
}

export interface SystemMemberInvitationAcceptResponseToSuccessResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLOrganizationUserInvitationResponseTypeResolver<TParent = any> {
  invitationId?: OrganizationUserInvitationResponseToInvitationIdResolver<TParent>;
}

export interface OrganizationUserInvitationResponseToInvitationIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemDeployDataResponseTypeResolver<TParent = any> {
  buildName?: SystemDeployDataResponseToBuildNameResolver<TParent>;
  uploadBuildUrl?: SystemDeployDataResponseToUploadBuildUrlResolver<TParent>;
  uploadMetaDataUrl?: SystemDeployDataResponseToUploadMetaDataUrlResolver<TParent>;
}

export interface SystemDeployDataResponseToBuildNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemDeployDataResponseToUploadBuildUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemDeployDataResponseToUploadMetaDataUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemWorkspaceCreateResponseTypeResolver<TParent = any> {
  description?: SystemWorkspaceCreateResponseToDescriptionResolver<TParent>;
  id?: SystemWorkspaceCreateResponseToIdResolver<TParent>;
  kind?: SystemWorkspaceCreateResponseToKindResolver<TParent>;
  name?: SystemWorkspaceCreateResponseToNameResolver<TParent>;
}

export interface SystemWorkspaceCreateResponseToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceCreateResponseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceCreateResponseToKindResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceCreateResponseToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemWorkspaceUpdateResponseTypeResolver<TParent = any> {
  description?: SystemWorkspaceUpdateResponseToDescriptionResolver<TParent>;
  id?: SystemWorkspaceUpdateResponseToIdResolver<TParent>;
  image?: SystemWorkspaceUpdateResponseToImageResolver<TParent>;
  name?: SystemWorkspaceUpdateResponseToNameResolver<TParent>;
}

export interface SystemWorkspaceUpdateResponseToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceUpdateResponseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceUpdateResponseToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemWorkspaceUpdateResponseToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTechnologyLogoManyResponseTypeResolver<TParent = any> {
  count?: TechnologyLogoManyResponseToCountResolver<TParent>;
  items?: TechnologyLogoManyResponseToItemsResolver<TParent>;
}

export interface TechnologyLogoManyResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TechnologyLogoManyResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserManyResponseTypeResolver<TParent = any> {
  count?: UserManyResponseToCountResolver<TParent>;
  items?: UserManyResponseToItemsResolver<TParent>;
}

export interface UserManyResponseToCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserManyResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLLoginResponseTypeResolver<TParent = any> {
  auth?: LoginResponseToAuthResolver<TParent>;
  success?: LoginResponseToSuccessResolver<TParent>;
  workspaces?: LoginResponseToWorkspacesResolver<TParent>;
}

export interface LoginResponseToAuthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LoginResponseToSuccessResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LoginResponseToWorkspacesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAuthTypeResolver<TParent = any> {
  idToken?: AuthToIdTokenResolver<TParent>;
  refreshToken?: AuthToRefreshTokenResolver<TParent>;
}

export interface AuthToIdTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthToRefreshTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWorkspaceInfoTypeResolver<TParent = any> {
  name?: WorkspaceInfoToNameResolver<TParent>;
  workspace?: WorkspaceInfoToWorkspaceResolver<TParent>;
}

export interface WorkspaceInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceInfoToWorkspaceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWorkspaceCreateResponseTypeResolver<TParent = any> {
  description?: WorkspaceCreateResponseToDescriptionResolver<TParent>;
  id?: WorkspaceCreateResponseToIdResolver<TParent>;
  kind?: WorkspaceCreateResponseToKindResolver<TParent>;
  name?: WorkspaceCreateResponseToNameResolver<TParent>;
}

export interface WorkspaceCreateResponseToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceCreateResponseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceCreateResponseToKindResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceCreateResponseToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWorkspaceUpdateResponseTypeResolver<TParent = any> {
  description?: WorkspaceUpdateResponseToDescriptionResolver<TParent>;
  id?: WorkspaceUpdateResponseToIdResolver<TParent>;
  image?: WorkspaceUpdateResponseToImageResolver<TParent>;
  name?: WorkspaceUpdateResponseToNameResolver<TParent>;
}

export interface WorkspaceUpdateResponseToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceUpdateResponseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceUpdateResponseToImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WorkspaceUpdateResponseToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSubscriptionTypeResolver<TParent = any> {
  ApiTokens?: SubscriptionToApiTokensResolver<TParent>;
  AuthenticationProfiles?: SubscriptionToAuthenticationProfilesResolver<TParent>;
  AuthenticationSettings?: SubscriptionToAuthenticationSettingsResolver<TParent>;
  Blog?: SubscriptionToBlogResolver<TParent>;
  BlogUser?: SubscriptionToBlogUserResolver<TParent>;
  Comment?: SubscriptionToCommentResolver<TParent>;
  Course?: SubscriptionToCourseResolver<TParent>;
  CourseUrl?: SubscriptionToCourseUrlResolver<TParent>;
  EnvironmentVariables?: SubscriptionToEnvironmentVariablesResolver<TParent>;
  Files?: SubscriptionToFilesResolver<TParent>;
  Image?: SubscriptionToImageResolver<TParent>;
  Permissions?: SubscriptionToPermissionsResolver<TParent>;
  Person?: SubscriptionToPersonResolver<TParent>;
  Roles?: SubscriptionToRolesResolver<TParent>;
  School?: SubscriptionToSchoolResolver<TParent>;
  Settings?: SubscriptionToSettingsResolver<TParent>;
  TechnologyLogo?: SubscriptionToTechnologyLogoResolver<TParent>;
  Users?: SubscriptionToUsersResolver<TParent>;
}

export interface SubscriptionToApiTokensArgs {
  filter?: GQLApiTokenSubscriptionFilter;
}
export interface SubscriptionToApiTokensResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToApiTokensArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToApiTokensArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToAuthenticationProfilesArgs {
  filter?: GQLAuthenticationProfileSubscriptionFilter;
}
export interface SubscriptionToAuthenticationProfilesResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToAuthenticationProfilesArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToAuthenticationProfilesArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToAuthenticationSettingsArgs {
  filter?: GQLAuthenticationSettingSubscriptionFilter;
}
export interface SubscriptionToAuthenticationSettingsResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToAuthenticationSettingsArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToAuthenticationSettingsArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToBlogArgs {
  filter?: GQLBlogSubscriptionFilter;
}
export interface SubscriptionToBlogResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToBlogArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToBlogArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToBlogUserArgs {
  filter?: GQLBlogUserSubscriptionFilter;
}
export interface SubscriptionToBlogUserResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToBlogUserArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToBlogUserArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToCommentArgs {
  filter?: GQLCommentSubscriptionFilter;
}
export interface SubscriptionToCommentResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToCommentArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToCommentArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToCourseArgs {
  filter?: GQLCourseSubscriptionFilter;
}
export interface SubscriptionToCourseResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToCourseArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToCourseArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToCourseUrlArgs {
  filter?: GQLCourseUrlSubscriptionFilter;
}
export interface SubscriptionToCourseUrlResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToCourseUrlArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToCourseUrlArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToEnvironmentVariablesArgs {
  filter?: GQLEnvironmentVariableSubscriptionFilter;
}
export interface SubscriptionToEnvironmentVariablesResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToEnvironmentVariablesArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToEnvironmentVariablesArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToFilesArgs {
  filter?: GQLFileSubscriptionFilter;
}
export interface SubscriptionToFilesResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToFilesArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToFilesArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToImageArgs {
  filter?: GQLImageSubscriptionFilter;
}
export interface SubscriptionToImageResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToImageArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToImageArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToPermissionsArgs {
  filter?: GQLPermissionSubscriptionFilter;
}
export interface SubscriptionToPermissionsResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToPermissionsArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToPermissionsArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToPersonArgs {
  filter?: GQLPersonSubscriptionFilter;
}
export interface SubscriptionToPersonResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToPersonArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToPersonArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToRolesArgs {
  filter?: GQLRoleSubscriptionFilter;
}
export interface SubscriptionToRolesResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToRolesArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToRolesArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToSchoolArgs {
  filter?: GQLSchoolSubscriptionFilter;
}
export interface SubscriptionToSchoolResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToSchoolArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToSchoolArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToSettingsArgs {
  filter?: GQLSettingSubscriptionFilter;
}
export interface SubscriptionToSettingsResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToSettingsArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToSettingsArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToTechnologyLogoArgs {
  filter?: GQLTechnologyLogoSubscriptionFilter;
}
export interface SubscriptionToTechnologyLogoResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToTechnologyLogoArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToTechnologyLogoArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface SubscriptionToUsersArgs {
  filter?: GQLUserSubscriptionFilter;
}
export interface SubscriptionToUsersResolver<TParent = any, TResult = any> {
  resolve?: (parent: TParent, args: SubscriptionToUsersArgs, context: any, info: GraphQLResolveInfo) => TResult;
  subscribe: (parent: TParent, args: SubscriptionToUsersArgs, context: any, info: GraphQLResolveInfo) => AsyncIterator<TResult>;
}

export interface GQLApiTokenPayloadTypeResolver<TParent = any> {
  mutation?: ApiTokenPayloadToMutationResolver<TParent>;
  node?: ApiTokenPayloadToNodeResolver<TParent>;
  previousValues?: ApiTokenPayloadToPreviousValuesResolver<TParent>;
  updatedFields?: ApiTokenPayloadToUpdatedFieldsResolver<TParent>;
}

export interface ApiTokenPayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenPayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenPayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ApiTokenPayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAuthenticationProfilePayloadTypeResolver<TParent = any> {
  mutation?: AuthenticationProfilePayloadToMutationResolver<TParent>;
  node?: AuthenticationProfilePayloadToNodeResolver<TParent>;
  previousValues?: AuthenticationProfilePayloadToPreviousValuesResolver<TParent>;
  updatedFields?: AuthenticationProfilePayloadToUpdatedFieldsResolver<TParent>;
}

export interface AuthenticationProfilePayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfilePayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfilePayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationProfilePayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLAuthenticationSettingPayloadTypeResolver<TParent = any> {
  mutation?: AuthenticationSettingPayloadToMutationResolver<TParent>;
  node?: AuthenticationSettingPayloadToNodeResolver<TParent>;
  previousValues?: AuthenticationSettingPayloadToPreviousValuesResolver<TParent>;
  updatedFields?: AuthenticationSettingPayloadToUpdatedFieldsResolver<TParent>;
}

export interface AuthenticationSettingPayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationSettingPayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationSettingPayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface AuthenticationSettingPayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBlogPayloadTypeResolver<TParent = any> {
  mutation?: BlogPayloadToMutationResolver<TParent>;
  node?: BlogPayloadToNodeResolver<TParent>;
  previousValues?: BlogPayloadToPreviousValuesResolver<TParent>;
  updatedFields?: BlogPayloadToUpdatedFieldsResolver<TParent>;
}

export interface BlogPayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogPayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogPayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogPayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBlogUserPayloadTypeResolver<TParent = any> {
  mutation?: BlogUserPayloadToMutationResolver<TParent>;
  node?: BlogUserPayloadToNodeResolver<TParent>;
  previousValues?: BlogUserPayloadToPreviousValuesResolver<TParent>;
  updatedFields?: BlogUserPayloadToUpdatedFieldsResolver<TParent>;
}

export interface BlogUserPayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogUserPayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogUserPayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BlogUserPayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCommentPayloadTypeResolver<TParent = any> {
  mutation?: CommentPayloadToMutationResolver<TParent>;
  node?: CommentPayloadToNodeResolver<TParent>;
  previousValues?: CommentPayloadToPreviousValuesResolver<TParent>;
  updatedFields?: CommentPayloadToUpdatedFieldsResolver<TParent>;
}

export interface CommentPayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentPayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentPayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CommentPayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCoursePayloadTypeResolver<TParent = any> {
  mutation?: CoursePayloadToMutationResolver<TParent>;
  node?: CoursePayloadToNodeResolver<TParent>;
  previousValues?: CoursePayloadToPreviousValuesResolver<TParent>;
  updatedFields?: CoursePayloadToUpdatedFieldsResolver<TParent>;
}

export interface CoursePayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoursePayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoursePayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CoursePayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLCourseUrlPayloadTypeResolver<TParent = any> {
  mutation?: CourseUrlPayloadToMutationResolver<TParent>;
  node?: CourseUrlPayloadToNodeResolver<TParent>;
  previousValues?: CourseUrlPayloadToPreviousValuesResolver<TParent>;
  updatedFields?: CourseUrlPayloadToUpdatedFieldsResolver<TParent>;
}

export interface CourseUrlPayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseUrlPayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseUrlPayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CourseUrlPayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLEnvironmentVariablePayloadTypeResolver<TParent = any> {
  mutation?: EnvironmentVariablePayloadToMutationResolver<TParent>;
  node?: EnvironmentVariablePayloadToNodeResolver<TParent>;
  previousValues?: EnvironmentVariablePayloadToPreviousValuesResolver<TParent>;
  updatedFields?: EnvironmentVariablePayloadToUpdatedFieldsResolver<TParent>;
}

export interface EnvironmentVariablePayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnvironmentVariablePayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnvironmentVariablePayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface EnvironmentVariablePayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFilePayloadTypeResolver<TParent = any> {
  mutation?: FilePayloadToMutationResolver<TParent>;
  node?: FilePayloadToNodeResolver<TParent>;
  previousValues?: FilePayloadToPreviousValuesResolver<TParent>;
  updatedFields?: FilePayloadToUpdatedFieldsResolver<TParent>;
}

export interface FilePayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FilePayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FilePayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FilePayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLImagePayloadTypeResolver<TParent = any> {
  mutation?: ImagePayloadToMutationResolver<TParent>;
  node?: ImagePayloadToNodeResolver<TParent>;
  previousValues?: ImagePayloadToPreviousValuesResolver<TParent>;
  updatedFields?: ImagePayloadToUpdatedFieldsResolver<TParent>;
}

export interface ImagePayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImagePayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImagePayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImagePayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPermissionPayloadTypeResolver<TParent = any> {
  mutation?: PermissionPayloadToMutationResolver<TParent>;
  node?: PermissionPayloadToNodeResolver<TParent>;
  previousValues?: PermissionPayloadToPreviousValuesResolver<TParent>;
  updatedFields?: PermissionPayloadToUpdatedFieldsResolver<TParent>;
}

export interface PermissionPayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionPayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionPayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PermissionPayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPersonPayloadTypeResolver<TParent = any> {
  mutation?: PersonPayloadToMutationResolver<TParent>;
  node?: PersonPayloadToNodeResolver<TParent>;
  previousValues?: PersonPayloadToPreviousValuesResolver<TParent>;
  updatedFields?: PersonPayloadToUpdatedFieldsResolver<TParent>;
}

export interface PersonPayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonPayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonPayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PersonPayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRolePayloadTypeResolver<TParent = any> {
  mutation?: RolePayloadToMutationResolver<TParent>;
  node?: RolePayloadToNodeResolver<TParent>;
  previousValues?: RolePayloadToPreviousValuesResolver<TParent>;
  updatedFields?: RolePayloadToUpdatedFieldsResolver<TParent>;
}

export interface RolePayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RolePayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RolePayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RolePayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSchoolPayloadTypeResolver<TParent = any> {
  mutation?: SchoolPayloadToMutationResolver<TParent>;
  node?: SchoolPayloadToNodeResolver<TParent>;
  previousValues?: SchoolPayloadToPreviousValuesResolver<TParent>;
  updatedFields?: SchoolPayloadToUpdatedFieldsResolver<TParent>;
}

export interface SchoolPayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SchoolPayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SchoolPayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SchoolPayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSettingPayloadTypeResolver<TParent = any> {
  mutation?: SettingPayloadToMutationResolver<TParent>;
  node?: SettingPayloadToNodeResolver<TParent>;
  previousValues?: SettingPayloadToPreviousValuesResolver<TParent>;
  updatedFields?: SettingPayloadToUpdatedFieldsResolver<TParent>;
}

export interface SettingPayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingPayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingPayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SettingPayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTechnologyLogoPayloadTypeResolver<TParent = any> {
  mutation?: TechnologyLogoPayloadToMutationResolver<TParent>;
  node?: TechnologyLogoPayloadToNodeResolver<TParent>;
  previousValues?: TechnologyLogoPayloadToPreviousValuesResolver<TParent>;
  updatedFields?: TechnologyLogoPayloadToUpdatedFieldsResolver<TParent>;
}

export interface TechnologyLogoPayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TechnologyLogoPayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TechnologyLogoPayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TechnologyLogoPayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserPayloadTypeResolver<TParent = any> {
  mutation?: UserPayloadToMutationResolver<TParent>;
  node?: UserPayloadToNodeResolver<TParent>;
  previousValues?: UserPayloadToPreviousValuesResolver<TParent>;
  updatedFields?: UserPayloadToUpdatedFieldsResolver<TParent>;
}

export interface UserPayloadToMutationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserPayloadToNodeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserPayloadToPreviousValuesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserPayloadToUpdatedFieldsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFunctionResolverInfoTypeResolver<TParent = any> {
  application?: FunctionResolverInfoToApplicationResolver<TParent>;
  description?: FunctionResolverInfoToDescriptionResolver<TParent>;
  functionType?: FunctionResolverInfoToFunctionTypeResolver<TParent>;
  gqlType?: FunctionResolverInfoToGqlTypeResolver<TParent>;
  name?: FunctionResolverInfoToNameResolver<TParent>;
}

export interface FunctionResolverInfoToApplicationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionResolverInfoToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionResolverInfoToFunctionTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionResolverInfoToGqlTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionResolverInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFunctionTaskInfoTypeResolver<TParent = any> {
  application?: FunctionTaskInfoToApplicationResolver<TParent>;
  description?: FunctionTaskInfoToDescriptionResolver<TParent>;
  functionType?: FunctionTaskInfoToFunctionTypeResolver<TParent>;
  name?: FunctionTaskInfoToNameResolver<TParent>;
  scheduleExpression?: FunctionTaskInfoToScheduleExpressionResolver<TParent>;
}

export interface FunctionTaskInfoToApplicationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionTaskInfoToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionTaskInfoToFunctionTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionTaskInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionTaskInfoToScheduleExpressionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFunctionTriggerInfoTypeResolver<TParent = any> {
  application?: FunctionTriggerInfoToApplicationResolver<TParent>;
  description?: FunctionTriggerInfoToDescriptionResolver<TParent>;
  functionType?: FunctionTriggerInfoToFunctionTypeResolver<TParent>;
  name?: FunctionTriggerInfoToNameResolver<TParent>;
  operation?: FunctionTriggerInfoToOperationResolver<TParent>;
  tableName?: FunctionTriggerInfoToTableNameResolver<TParent>;
  type?: FunctionTriggerInfoToTypeResolver<TParent>;
}

export interface FunctionTriggerInfoToApplicationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionTriggerInfoToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionTriggerInfoToFunctionTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionTriggerInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionTriggerInfoToOperationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionTriggerInfoToTableNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionTriggerInfoToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFunctionWebhookInfoTypeResolver<TParent = any> {
  application?: FunctionWebhookInfoToApplicationResolver<TParent>;
  description?: FunctionWebhookInfoToDescriptionResolver<TParent>;
  functionType?: FunctionWebhookInfoToFunctionTypeResolver<TParent>;
  httpMethod?: FunctionWebhookInfoToHttpMethodResolver<TParent>;
  name?: FunctionWebhookInfoToNameResolver<TParent>;
  workspaceFullPath?: FunctionWebhookInfoToWorkspaceFullPathResolver<TParent>;
  workspaceRelativePath?: FunctionWebhookInfoToWorkspaceRelativePathResolver<TParent>;
}

export interface FunctionWebhookInfoToApplicationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionWebhookInfoToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionWebhookInfoToFunctionTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionWebhookInfoToHttpMethodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionWebhookInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionWebhookInfoToWorkspaceFullPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunctionWebhookInfoToWorkspaceRelativePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLImportedTableTypeResolver<TParent = any> {
  id?: ImportedTableToIdResolver<TParent>;
  name?: ImportedTableToNameResolver<TParent>;
}

export interface ImportedTableToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ImportedTableToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMissingRelationTypeResolver<TParent = any> {
  table?: MissingRelationToTableResolver<TParent>;
}

export interface MissingRelationToTableResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemFunctionResolverInfoTypeResolver<TParent = any> {
  application?: SystemFunctionResolverInfoToApplicationResolver<TParent>;
  description?: SystemFunctionResolverInfoToDescriptionResolver<TParent>;
  functionType?: SystemFunctionResolverInfoToFunctionTypeResolver<TParent>;
  gqlType?: SystemFunctionResolverInfoToGqlTypeResolver<TParent>;
  name?: SystemFunctionResolverInfoToNameResolver<TParent>;
}

export interface SystemFunctionResolverInfoToApplicationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionResolverInfoToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionResolverInfoToFunctionTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionResolverInfoToGqlTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionResolverInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemFunctionTaskInfoTypeResolver<TParent = any> {
  application?: SystemFunctionTaskInfoToApplicationResolver<TParent>;
  description?: SystemFunctionTaskInfoToDescriptionResolver<TParent>;
  functionType?: SystemFunctionTaskInfoToFunctionTypeResolver<TParent>;
  name?: SystemFunctionTaskInfoToNameResolver<TParent>;
  scheduleExpression?: SystemFunctionTaskInfoToScheduleExpressionResolver<TParent>;
}

export interface SystemFunctionTaskInfoToApplicationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionTaskInfoToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionTaskInfoToFunctionTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionTaskInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionTaskInfoToScheduleExpressionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemFunctionTriggerInfoTypeResolver<TParent = any> {
  application?: SystemFunctionTriggerInfoToApplicationResolver<TParent>;
  description?: SystemFunctionTriggerInfoToDescriptionResolver<TParent>;
  functionType?: SystemFunctionTriggerInfoToFunctionTypeResolver<TParent>;
  name?: SystemFunctionTriggerInfoToNameResolver<TParent>;
  operation?: SystemFunctionTriggerInfoToOperationResolver<TParent>;
  tableName?: SystemFunctionTriggerInfoToTableNameResolver<TParent>;
  type?: SystemFunctionTriggerInfoToTypeResolver<TParent>;
}

export interface SystemFunctionTriggerInfoToApplicationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionTriggerInfoToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionTriggerInfoToFunctionTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionTriggerInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionTriggerInfoToOperationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionTriggerInfoToTableNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionTriggerInfoToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSystemFunctionWebhookInfoTypeResolver<TParent = any> {
  application?: SystemFunctionWebhookInfoToApplicationResolver<TParent>;
  description?: SystemFunctionWebhookInfoToDescriptionResolver<TParent>;
  functionType?: SystemFunctionWebhookInfoToFunctionTypeResolver<TParent>;
  httpMethod?: SystemFunctionWebhookInfoToHttpMethodResolver<TParent>;
  name?: SystemFunctionWebhookInfoToNameResolver<TParent>;
  workspaceFullPath?: SystemFunctionWebhookInfoToWorkspaceFullPathResolver<TParent>;
  workspaceRelativePath?: SystemFunctionWebhookInfoToWorkspaceRelativePathResolver<TParent>;
}

export interface SystemFunctionWebhookInfoToApplicationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionWebhookInfoToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionWebhookInfoToFunctionTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionWebhookInfoToHttpMethodResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionWebhookInfoToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionWebhookInfoToWorkspaceFullPathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SystemFunctionWebhookInfoToWorkspaceRelativePathResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
