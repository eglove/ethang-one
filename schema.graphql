# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"FunctionInfo"
interface FunctionInfo {
  application: Application
  description: String
  functionType: FunctionType!
  name: String!
}

"FunctionInfo"
interface SystemFunctionInfo {
  application: SystemApplication
  description: String
  functionType: SystemFunctionType!
  name: String!
}

"Authentication Profile Attributes"
union AuthenticationProfileAttributes = CognitoAuthProfileAttributes

"Field Type Attributes"
union FieldTypeAttributes = DateFieldTypeAttributes | FileFieldTypeAttributes | GeoFieldTypeAttributes | MissingRelationFieldTypeAttributes | NumberFieldTypeAttributes | SmartFieldTypeAttributes | SwitchFieldTypeAttributes | TextFieldTypeAttributes | UUIDFieldTypeAttributes

"Field Type Attributes"
union SystemFieldTypeAttributes = SystemDateFieldTypeAttributes | SystemFileFieldTypeAttributes | SystemGeoFieldTypeAttributes | SystemMissingRelationFieldTypeAttributes | SystemNumberFieldTypeAttributes | SystemSmartFieldTypeAttributes | SystemSwitchFieldTypeAttributes | SystemTextFieldTypeAttributes | SystemUUIDFieldTypeAttributes

union SystemInboxEventDetailsUnion = SystemInboxEventEnvironmentInvitationDetails | SystemInboxEventNotificationDetailsType | SystemInboxEventOrganizationInvitationDetails | SystemInboxEventWorkspaceTransferDetails

"Table Attributes"
union SystemTableAttributes = SystemViewAttributes

"Table Attributes"
union TableAttributes = ViewAttributes

type ApiToken {
  _description: String
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  id: ID
  name: String
  roles(after: String, before: String, filter: RoleFilter, first: Int, groupBy: RoleGroupBy, last: Int, orderBy: [RoleOrderBy], skip: Int, sort: [RoleSort!]): RoleListResponse
  updatedAt: DateTime
}

"ApiTokenListResponse output"
type ApiTokenListResponse {
  "List items count"
  count: Int!
  "Aggregated items"
  groups: [GroupByResponse!]!
  "List items"
  items: [ApiToken!]!
}

"ApiTokenManyResponse output"
type ApiTokenManyResponse {
  "List items count"
  count: Int!
  "List items"
  items: [ApiToken!]!
}

"ApiTokens subscription payload"
type ApiTokenPayload {
  mutation: MutationType!
  node: ApiToken
  previousValues: ApiToken
  updatedFields: [String]
}

"API Token Response"
type ApiTokenResponse {
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  id: ID
  name: String
  roles(after: String, before: String, filter: RoleFilter, first: Int, groupBy: RoleGroupBy, last: Int, orderBy: [RoleOrderBy], skip: Int, sort: [RoleSort!]): RoleListResponse
  token: String!
  updatedAt: DateTime
}

"Application"
type Application {
  appType: String!
  createdAt: DateTime!
  description: String
  displayName: String
  id: ID!
  name: String!
  status: ApplicationStatusEnum!
}

"ApplicationListResponse output"
type ApplicationListResponse {
  "List items count"
  count: Int!
  "List items"
  items: [Application!]!
}

"Async Session"
type AsyncSession {
  sessionId: String!
}

type AsyncSessionStatusResponse {
  message: String
  status: String!
}

"Auth response"
type Auth {
  idToken: String
  refreshToken: String
}

type AuthenticationProfile {
  _description: String
  attributes: AuthenticationProfileAttributes
  audiences: [String]
  clientId: String
  createdAt: DateTime
  createdBy: User
  databaseName: String
  deletedAt: Int
  domain: String
  id: ID
  managementDomain: String
  name: String
  roles(after: String, before: String, filter: RoleFilter, first: Int, groupBy: RoleGroupBy, last: Int, orderBy: [RoleOrderBy], skip: Int, sort: [RoleSort!]): RoleListResponse
  secret: String
  selfSignUpEmailDomains: [String]
  selfSignUpEnabled: Boolean
  type: String
  updatedAt: DateTime
}

"Authentication profile connection options"
type AuthenticationProfileConnectionOptions {
  facebook: FacebookOptions
  github: GithubOptions
  google: GoogleOptions
}

"AuthenticationProfileListResponse output"
type AuthenticationProfileListResponse {
  "List items count"
  count: Int!
  "Aggregated items"
  groups: [GroupByResponse!]!
  "List items"
  items: [AuthenticationProfile!]!
}

"AuthenticationProfileManyResponse output"
type AuthenticationProfileManyResponse {
  "List items count"
  count: Int!
  "List items"
  items: [AuthenticationProfile!]!
}

"AuthenticationProfiles subscription payload"
type AuthenticationProfilePayload {
  mutation: MutationType!
  node: AuthenticationProfile
  previousValues: AuthenticationProfile
  updatedFields: [String]
}

type AuthenticationSetting {
  _description: String
  allowedCallbacks: [String]
  allowedLogouts: [String]
  allowedWebOrigins: [String]
  connections: AuthenticationProfileConnectionOptions
  createdAt: DateTime
  createdBy: User
  updatedAt: DateTime
}

"AuthenticationSettings subscription payload"
type AuthenticationSettingPayload {
  mutation: MutationType!
  node: AuthenticationSetting
  previousValues: AuthenticationSetting
  updatedFields: [String]
}

type BillingCurrentPlanResponse {
  displayName: String
  id: ID
  name: String
  nextPlan: BillingNextPlanResponse
  paymentDate: DateTime
  pdf: String
  price: Int
  status: WorkspaceStatus
  trialEnd: DateTime
}

type BillingDetailsResponse {
  brand: String
  expMonth: Int
  expYear: Int
  last4: String
  origin: BillingDetailsOrigin!
}

type BillingInvoiceItem {
  amountDue: Float
  amountPaid: Float
  amountRemaining: Float
  description: String
  endingBalance: Float
  id: ID!
  invoicePdf: String
  number: String
  organization: BillingInvoiceItemOrganizationInfo
  paid: Boolean
  periodEnd: DateTime
  periodStart: DateTime
  plan: BillingInvoiceItemPlanInfo
  status: String
  total: Float
  workspace: BillingInvoiceItemWorkspaceInfo
}

type BillingInvoiceItemOrganizationInfo {
  id: ID
  name: String
}

type BillingInvoiceItemPlanInfo {
  displayName: String
  id: ID
  name: String
}

type BillingInvoiceItemWorkspaceInfo {
  id: ID
  name: String
}

"BillingInvoicesListResponse output"
type BillingInvoicesListResponse {
  "List items count"
  count: Int!
  "List items"
  items: [BillingInvoiceItem!]!
}

type BillingLimitMetricItem {
  description: String
  displayName: String
  name: String
  showPriority: Int
  tooltip: String
  unit: String
}

type BillingMetricOverageItem {
  value: Float
  warning: String
}

type BillingMetricUsageItem {
  limitMetric: BillingLimitMetricItem
  overage: BillingMetricOverageItem
  value: Float
}

type BillingMetricUsageQuotaItem {
  limitMetric: BillingLimitMetricItem
  value: Float
}

"BillingMetricUsageQuotasListResponse output"
type BillingMetricUsageQuotasListResponse {
  "List items count"
  count: Int!
  "List items"
  items: [BillingMetricUsageQuotaItem!]!
}

"BillingMetricUsagesListResponse output"
type BillingMetricUsagesListResponse {
  "List items count"
  count: Int!
  "List items"
  items: [BillingMetricUsageItem!]!
}

type BillingNextPlanResponse {
  displayName: String
  id: ID
  name: String
  pdf: String
  price: Int
}

type BillingPlanBaseInfo {
  description: String
  displayName: String
  id: ID
  isCustom: Boolean
  isLegacy: Boolean
  limitMetrics: [BillingPlanLimitMetricItem]
  name: String
  pdf: String
  price: Int
}

type BillingPlanLimitMetricItem {
  displayName: String
  hardLimit: Float
  name: String
  overagePrice: Int
  softLimit: Float
}

type Blog {
  _description: String
  "Authors"
  authors(after: String, before: String, filter: PersonFilter, first: Int, groupBy: PersonGroupBy, last: Int, orderBy: [PersonOrderBy], skip: Int, sort: [PersonSort!]): PersonListResponse
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  description: String
  "Featured Image"
  featuredImage: Image
  id: ID
  "The date that determines which order blogs will display in. Change this on update if it needs to go to the top of the list. Or use it to schedule posts for the future."
  orderDate: DateTime
  slug: String
  title: String
  updatedAt: DateTime
}

"BlogListResponse output"
type BlogListResponse {
  "List items count"
  count: Int!
  "Aggregated items"
  groups: [GroupByResponse!]!
  "List items"
  items: [Blog!]!
}

"BlogManyResponse output"
type BlogManyResponse {
  "List items count"
  count: Int!
  "List items"
  items: [Blog!]!
}

"Blog subscription payload"
type BlogPayload {
  mutation: MutationType!
  node: Blog
  previousValues: Blog
  updatedFields: [String]
}

"Authentication Profile Attributes for Cognito"
type CognitoAuthProfileAttributes {
  clientAuthDomain: String
}

type Course {
  _description: String
  courseUrls(after: String, before: String, filter: CourseUrlFilter, first: Int, groupBy: CourseUrlGroupBy, last: Int, orderBy: [CourseUrlOrderBy], skip: Int, sort: [CourseUrlSort!]): CourseUrlListResponse
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  duration: Float
  id: ID
  "Instructors"
  instructors(after: String, before: String, filter: PersonFilter, first: Int, groupBy: PersonGroupBy, last: Int, orderBy: [PersonOrderBy], skip: Int, sort: [PersonSort!]): PersonListResponse
  rating: Int
  ratingUrl: String
  recommendationOrder: Int
  school: School
  title: String
  updatedAt: DateTime
  yearUpdated: Int
}

"CourseListResponse output"
type CourseListResponse {
  "List items count"
  count: Int!
  "Aggregated items"
  groups: [GroupByResponse!]!
  "List items"
  items: [Course!]!
}

"CourseManyResponse output"
type CourseManyResponse {
  "List items count"
  count: Int!
  "List items"
  items: [Course!]!
}

"Course subscription payload"
type CoursePayload {
  mutation: MutationType!
  node: Course
  previousValues: Course
  updatedFields: [String]
}

type CourseUrl {
  _description: String
  course: Course
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  id: ID
  school: School
  updatedAt: DateTime
  url: String
}

"CourseUrlListResponse output"
type CourseUrlListResponse {
  "List items count"
  count: Int!
  "Aggregated items"
  groups: [GroupByResponse!]!
  "List items"
  items: [CourseUrl!]!
}

"CourseUrlManyResponse output"
type CourseUrlManyResponse {
  "List items count"
  count: Int!
  "List items"
  items: [CourseUrl!]!
}

"CourseUrl subscription payload"
type CourseUrlPayload {
  mutation: MutationType!
  node: CourseUrl
  previousValues: CourseUrl
  updatedFields: [String]
}

"Custom Table Field Type"
type CustomTableField {
  computedMode: ComputedFieldMode
  defaultValue: String
  description: String
  displayName: String
  expression: String
  fieldType: FieldType
  fieldTypeAttributes: FieldTypeAttributes
  isList: Boolean!
  isRequired: Boolean!
  isUnique: Boolean
  name: String
}

"Date Field Attributes"
type DateFieldTypeAttributes {
  format: String!
}

"DeployDataResponse"
type DeployDataResponse {
  buildName: String!
  uploadBuildUrl: String!
  uploadMetaDataUrl: String!
}

"DeployStatusResult"
type DeployStatusResult {
  message: String
  status: DeployStatusEnum!
}

type EnvironmentBackupItem {
  name: String!
  size: Float!
}

type EnvironmentItem {
  id: ID!
  name: String!
}

type EnvironmentVariable {
  _description: String
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  id: ID
  name: String
  updatedAt: DateTime
  value: String
}

"EnvironmentVariableListResponse output"
type EnvironmentVariableListResponse {
  "List items count"
  count: Int!
  "Aggregated items"
  groups: [GroupByResponse!]!
  "List items"
  items: [EnvironmentVariable!]!
}

"EnvironmentVariableManyResponse output"
type EnvironmentVariableManyResponse {
  "List items count"
  count: Int!
  "List items"
  items: [EnvironmentVariable!]!
}

"EnvironmentVariables subscription payload"
type EnvironmentVariablePayload {
  mutation: MutationType!
  node: EnvironmentVariable
  previousValues: EnvironmentVariable
  updatedFields: [String]
}

"Facebook connection params"
type FacebookOptions {
  app_id: String!
  app_secret: String!
  enabled: Boolean!
}

"Field Data Features"
type FieldDataFeatures {
  create: Boolean!
  sort: Boolean!
  update: Boolean!
}

"Field Schema Features"
type FieldSchemaFeatures {
  delete: Boolean!
  update: Boolean!
}

type File {
  _description: String
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  downloadStorageUrl: String
  downloadUrl: String
  fields: JSON
  fileId: String
  filename: String
  id: ID
  image_image(after: String, before: String, filter: ImageFilter, first: Int, groupBy: ImageGroupBy, last: Int, orderBy: [ImageOrderBy], skip: Int, sort: [ImageSort!]): ImageListResponse
  meta: JSON
  mods: JSON
  previewUrl: String
  provider: String
  public: Boolean
  settings_landingPageImage(after: String, before: String, filter: SettingFilter, first: Int, groupBy: SettingGroupBy, last: Int, orderBy: [SettingOrderBy], skip: Int, sort: [SettingSort!]): SettingListResponse
  settings_menuBarLogo(after: String, before: String, filter: SettingFilter, first: Int, groupBy: SettingGroupBy, last: Int, orderBy: [SettingOrderBy], skip: Int, sort: [SettingSort!]): SettingListResponse
  shareUrl: String
  updatedAt: DateTime
  uploadUrl: String
  uploaded: Boolean
  users_avatar(after: String, before: String, filter: UserFilter, first: Int, groupBy: UserGroupBy, last: Int, orderBy: [UserOrderBy], skip: Int, sort: [UserSort!]): UserListResponse
}

"File Field Attributes"
type FileFieldTypeAttributes {
  expiration: Int
  format: String!
  maxSize: Int
  showTitle: Boolean @deprecated(reason: "Field is deprecated")
  showUrl: Boolean @deprecated(reason: "Field is deprecated")
  typeRestrictions: [String!]
}

"FileListResponse output"
type FileListResponse {
  "List items count"
  count: Int!
  "Aggregated items"
  groups: [GroupByResponse!]!
  "List items"
  items: [File!]!
}

"FileManyResponse output"
type FileManyResponse {
  "List items count"
  count: Int!
  "List items"
  items: [File!]!
}

"Files subscription payload"
type FilePayload {
  mutation: MutationType!
  node: File
  previousValues: File
  updatedFields: [String]
}

type FileUploadInfoResponse {
  apiKey: String!
  path: String!
  policy: String!
  signature: String!
}

type FinanceRecord {
  _description: String
  accountName: String
  createdAt: DateTime
  createdBy: User
  currentValue: Float
  deletedAt: Int
  id: ID
  recordedDate: Date
  updatedAt: DateTime
}

"FinanceRecordListResponse output"
type FinanceRecordListResponse {
  "List items count"
  count: Int!
  "Aggregated items"
  groups: [GroupByResponse!]!
  "List items"
  items: [FinanceRecord!]!
}

"FinanceRecordManyResponse output"
type FinanceRecordManyResponse {
  "List items count"
  count: Int!
  "List items"
  items: [FinanceRecord!]!
}

"FinanceRecord subscription payload"
type FinanceRecordPayload {
  mutation: MutationType!
  node: FinanceRecord
  previousValues: FinanceRecord
  updatedFields: [String]
}

"FunctionListResponse output"
type FunctionListResponse {
  "List items count"
  count: Int!
  "List items"
  items: [FunctionInfo!]!
}

"FunctionResolverInfo"
type FunctionResolverInfo implements FunctionInfo {
  application: Application
  description: String
  functionType: FunctionType!
  gqlType: String!
  name: String!
}

"FunctionTaskInfo"
type FunctionTaskInfo implements FunctionInfo {
  application: Application
  description: String
  functionType: FunctionType!
  name: String!
  scheduleExpression: String
}

"FunctionTriggerInfo"
type FunctionTriggerInfo implements FunctionInfo {
  application: Application
  description: String
  functionType: FunctionType!
  name: String!
  operation: String!
  tableName: String!
  type: String!
}

"FunctionWebhookInfo"
type FunctionWebhookInfo implements FunctionInfo {
  application: Application
  description: String
  functionType: FunctionType!
  httpMethod: String!
  name: String!
  workspaceFullPath: String!
  workspaceRelativePath: String!
}

"Geo Field Attributes"
type GeoFieldTypeAttributes {
  format: String!
  srid: Int
}

"Github connection params"
type GithubOptions {
  client_id: String!
  client_secret: String!
  enabled: Boolean!
}

"Google connection params"
type GoogleOptions {
  client_id: String!
  client_secret: String!
  enabled: Boolean!
}

"GraphQLFileItemResponse"
type GraphQLFileItemResponse {
  downloadUrl: String
  id: String
}

type GroupByResponse {
  ApiTokenGroup(after: String, before: String, filter: ApiTokenFilter, first: Int, groupBy: ApiTokenGroupBy, last: Int, orderBy: [ApiTokenOrderBy], skip: Int, sort: [ApiTokenSort!]): ApiTokenListResponse!
  AuthenticationProfileGroup(after: String, before: String, filter: AuthenticationProfileFilter, first: Int, groupBy: AuthenticationProfileGroupBy, last: Int, orderBy: [AuthenticationProfileOrderBy], skip: Int, sort: [AuthenticationProfileSort!]): AuthenticationProfileListResponse!
  BigInt: BigInt
  BlogGroup(after: String, before: String, filter: BlogFilter, first: Int, groupBy: BlogGroupBy, last: Int, orderBy: [BlogOrderBy], skip: Int, sort: [BlogSort!]): BlogListResponse!
  Boolean: Boolean
  CourseGroup(after: String, before: String, filter: CourseFilter, first: Int, groupBy: CourseGroupBy, last: Int, orderBy: [CourseOrderBy], skip: Int, sort: [CourseSort!]): CourseListResponse!
  CourseUrlGroup(after: String, before: String, filter: CourseUrlFilter, first: Int, groupBy: CourseUrlGroupBy, last: Int, orderBy: [CourseUrlOrderBy], skip: Int, sort: [CourseUrlSort!]): CourseUrlListResponse!
  Date: Date
  DateTime: DateTime
  EnvironmentVariableGroup(after: String, before: String, filter: EnvironmentVariableFilter, first: Int, groupBy: EnvironmentVariableGroupBy, last: Int, orderBy: [EnvironmentVariableOrderBy], skip: Int, sort: [EnvironmentVariableSort!]): EnvironmentVariableListResponse!
  FileGroup(after: String, before: String, filter: FileFilter, first: Int, groupBy: FileGroupBy, last: Int, orderBy: [FileOrderBy], skip: Int, sort: [FileSort!]): FileListResponse!
  FinanceRecordGroup(after: String, before: String, filter: FinanceRecordFilter, first: Int, groupBy: FinanceRecordGroupBy, last: Int, orderBy: [FinanceRecordOrderBy], skip: Int, sort: [FinanceRecordSort!]): FinanceRecordListResponse!
  Float: Float
  GroupIds: [ID!]
  HabitGroup(after: String, before: String, filter: HabitFilter, first: Int, groupBy: HabitGroupBy, last: Int, orderBy: [HabitOrderBy], skip: Int, sort: [HabitSort!]): HabitListResponse!
  ID: ID
  ImageGroup(after: String, before: String, filter: ImageFilter, first: Int, groupBy: ImageGroupBy, last: Int, orderBy: [ImageOrderBy], skip: Int, sort: [ImageSort!]): ImageListResponse!
  Int: Int
  JSON: JSON
  PersonGroup(after: String, before: String, filter: PersonFilter, first: Int, groupBy: PersonGroupBy, last: Int, orderBy: [PersonOrderBy], skip: Int, sort: [PersonSort!]): PersonListResponse!
  RoleGroup(after: String, before: String, filter: RoleFilter, first: Int, groupBy: RoleGroupBy, last: Int, orderBy: [RoleOrderBy], skip: Int, sort: [RoleSort!]): RoleListResponse!
  SchoolGroup(after: String, before: String, filter: SchoolFilter, first: Int, groupBy: SchoolGroupBy, last: Int, orderBy: [SchoolOrderBy], skip: Int, sort: [SchoolSort!]): SchoolListResponse!
  String: String
  TechnologyLogoGroup(after: String, before: String, filter: TechnologyLogoFilter, first: Int, groupBy: TechnologyLogoGroupBy, last: Int, orderBy: [TechnologyLogoOrderBy], skip: Int, sort: [TechnologyLogoSort!]): TechnologyLogoListResponse!
  UserGroup(after: String, before: String, filter: UserFilter, first: Int, groupBy: UserGroupBy, last: Int, orderBy: [UserOrderBy], skip: Int, sort: [UserSort!]): UserListResponse!
}

type Habit {
  _description: String
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  dueDate: Date
  id: ID
  name: String
  recurInterval: String
  updatedAt: DateTime
}

"HabitListResponse output"
type HabitListResponse {
  "List items count"
  count: Int!
  "Aggregated items"
  groups: [GroupByResponse!]!
  "List items"
  items: [Habit!]!
}

"HabitManyResponse output"
type HabitManyResponse {
  "List items count"
  count: Int!
  "List items"
  items: [Habit!]!
}

"Habit subscription payload"
type HabitPayload {
  mutation: MutationType!
  node: Habit
  previousValues: Habit
  updatedFields: [String]
}

type Image {
  _description: String
  altText: String
  blogs(after: String, before: String, filter: BlogFilter, first: Int, groupBy: BlogGroupBy, last: Int, orderBy: [BlogOrderBy], skip: Int, sort: [BlogSort!]): BlogListResponse
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  height: Int
  id: ID
  image: File
  person: Person
  schools: School
  technologyLogos: TechnologyLogo
  updatedAt: DateTime
  width: Int
}

"ImageListResponse output"
type ImageListResponse {
  "List items count"
  count: Int!
  "Aggregated items"
  groups: [GroupByResponse!]!
  "List items"
  items: [Image!]!
}

"ImageManyResponse output"
type ImageManyResponse {
  "List items count"
  count: Int!
  "List items"
  items: [Image!]!
}

"Image subscription payload"
type ImagePayload {
  mutation: MutationType!
  node: Image
  previousValues: Image
  updatedFields: [String]
}

"ImportedTable"
type ImportedTable {
  id: ID!
  name: String!
}

type IntrospectionQueryResponse {
  url: String!
}

"Invited By Name"
type InvitedByName {
  email: String
  firstName: String
  lastName: String
  workspaceName: String
}

"InvokeFunctionResponse"
type InvokeFunctionResponse {
  responseData: String!
}

"LoginResponse"
type LoginResponse {
  auth: Auth
  success: Boolean
  workspaces: [WorkspaceInfo!]
}

"MissingRelation"
type MissingRelation {
  table: String!
}

"MissingRelation Field Attributes"
type MissingRelationFieldTypeAttributes {
  missingTable: String!
}

type Mutation {
  apiTokenCreate(data: ApiTokenCreateInput!): ApiTokenResponse!
  apiTokenDelete(data: ApiTokenDeleteInput, filter: ApiTokenKeyFilter, force: Boolean): SuccessResponse
  apiTokenDeleteByFilter(filter: ApiTokenFilter!, force: Boolean): SuccessResponse
  apiTokenDestroy(filter: ApiTokenKeyFilter, force: Boolean): SuccessResponse
  apiTokenDestroyByFilter(filter: ApiTokenFilter!, force: Boolean): SuccessResponse
  apiTokenRestore(id: String!): ApiToken!
  apiTokenUpdate(data: ApiTokenUpdateInput!, destroyDetached: Boolean, filter: ApiTokenKeyFilter, force: Boolean): ApiToken!
  apiTokenUpdateByFilter(data: ApiTokenUpdateByFilterInput!, filter: ApiTokenFilter): ApiTokenManyResponse!
  applicationDelete(data: ApplicationDeleteMutationInput!): SuccessResponse @deprecated(reason: "No longer supported. Use `system.applicationDelete` instead.")
  applicationInstall(data: ApplicationInstallInput!): Application @deprecated(reason: "No longer supported. Use `system.applicationInstall` instead.")
  applicationUpdate(data: ApplicationUpdateInput!): Application @deprecated(reason: "No longer supported. Use `system.applicationUpdate` instead.")
  authenticationProfileCreate(data: AuthenticationProfileCreateInput!): AuthenticationProfile!
  authenticationProfileCreateMany(data: [AuthenticationProfileCreateManyInput]!): AuthenticationProfileManyResponse!
  authenticationProfileDelete(data: AuthenticationProfileDeleteInput, filter: AuthenticationProfileKeyFilter, force: Boolean): SuccessResponse
  authenticationProfileDeleteByFilter(filter: AuthenticationProfileFilter!, force: Boolean): SuccessResponse
  authenticationProfileDestroy(filter: AuthenticationProfileKeyFilter, force: Boolean): SuccessResponse
  authenticationProfileDestroyByFilter(filter: AuthenticationProfileFilter!, force: Boolean): SuccessResponse
  authenticationProfileRestore(id: String!): AuthenticationProfile!
  authenticationProfileUpdate(data: AuthenticationProfileUpdateInput!, destroyDetached: Boolean, filter: AuthenticationProfileKeyFilter, force: Boolean): AuthenticationProfile!
  authenticationProfileUpdateByFilter(data: AuthenticationProfileUpdateByFilterInput!, filter: AuthenticationProfileFilter): AuthenticationProfileManyResponse!
  authenticationSettingsUpdate(data: AuthenticationSettingUpdateInput!): AuthenticationSetting!
  billingDetailsUpdate(data: BillingDetailsUpdateMutationInput!): BillingDetailsResponse @deprecated(reason: "No longer supported. Use `system.memberPaymentDetailsUpdate, system.organizationPaymentDetailsUpdate or system.workspacePaymentDetailsUpdate` instead.")
  billingPlanUpdate(data: BillingPlanUpdateMutationInput!): BillingCurrentPlanResponse @deprecated(reason: "No longer supported. Use `system.billingPlanUpdate` instead.")
  blogCreate(data: BlogCreateInput!): Blog!
  blogCreateMany(data: [BlogCreateManyInput]!): BlogManyResponse!
  blogDelete(data: BlogDeleteInput, filter: BlogKeyFilter, force: Boolean): SuccessResponse
  blogDeleteByFilter(filter: BlogFilter!, force: Boolean): SuccessResponse
  blogDestroy(filter: BlogKeyFilter, force: Boolean): SuccessResponse
  blogDestroyByFilter(filter: BlogFilter!, force: Boolean): SuccessResponse
  blogRestore(id: String!): Blog!
  blogUpdate(data: BlogUpdateInput!, destroyDetached: Boolean, filter: BlogKeyFilter, force: Boolean): Blog!
  blogUpdateByFilter(data: BlogUpdateByFilterInput!, filter: BlogFilter): BlogManyResponse!
  courseCreate(data: CourseCreateInput!): Course!
  courseCreateMany(data: [CourseCreateManyInput]!): CourseManyResponse!
  courseDelete(data: CourseDeleteInput, filter: CourseKeyFilter, force: Boolean): SuccessResponse
  courseDeleteByFilter(filter: CourseFilter!, force: Boolean): SuccessResponse
  courseDestroy(filter: CourseKeyFilter, force: Boolean): SuccessResponse
  courseDestroyByFilter(filter: CourseFilter!, force: Boolean): SuccessResponse
  courseRestore(id: String!): Course!
  courseUpdate(data: CourseUpdateInput!, destroyDetached: Boolean, filter: CourseKeyFilter, force: Boolean): Course!
  courseUpdateByFilter(data: CourseUpdateByFilterInput!, filter: CourseFilter): CourseManyResponse!
  courseUrlCreate(data: CourseUrlCreateInput!): CourseUrl!
  courseUrlCreateMany(data: [CourseUrlCreateManyInput]!): CourseUrlManyResponse!
  courseUrlDelete(data: CourseUrlDeleteInput, filter: CourseUrlKeyFilter, force: Boolean): SuccessResponse
  courseUrlDeleteByFilter(filter: CourseUrlFilter!, force: Boolean): SuccessResponse
  courseUrlDestroy(filter: CourseUrlKeyFilter, force: Boolean): SuccessResponse
  courseUrlDestroyByFilter(filter: CourseUrlFilter!, force: Boolean): SuccessResponse
  courseUrlRestore(id: String!): CourseUrl!
  courseUrlUpdate(data: CourseUrlUpdateInput!, destroyDetached: Boolean, filter: CourseUrlKeyFilter, force: Boolean): CourseUrl!
  courseUrlUpdateByFilter(data: CourseUrlUpdateByFilterInput!, filter: CourseUrlFilter): CourseUrlManyResponse!
  deploy(data: DeployingBuildInput): Boolean @deprecated(reason: "No longer supported. Use `system.deploy` instead.")
  environmentVariableCreate(data: EnvironmentVariableCreateInput!): EnvironmentVariable!
  environmentVariableCreateMany(data: [EnvironmentVariableCreateManyInput]!): EnvironmentVariableManyResponse!
  environmentVariableDelete(data: EnvironmentVariableDeleteInput, filter: EnvironmentVariableKeyFilter, force: Boolean): SuccessResponse
  environmentVariableDeleteByFilter(filter: EnvironmentVariableFilter!, force: Boolean): SuccessResponse
  environmentVariableDestroy(filter: EnvironmentVariableKeyFilter, force: Boolean): SuccessResponse
  environmentVariableDestroyByFilter(filter: EnvironmentVariableFilter!, force: Boolean): SuccessResponse
  environmentVariableRestore(id: String!): EnvironmentVariable!
  environmentVariableUpdate(data: EnvironmentVariableUpdateInput!, destroyDetached: Boolean, filter: EnvironmentVariableKeyFilter, force: Boolean): EnvironmentVariable!
  environmentVariableUpdateByFilter(data: EnvironmentVariableUpdateByFilterInput!, filter: EnvironmentVariableFilter): EnvironmentVariableManyResponse!
  fieldCreate(data: TableFieldCreateInput!): TableField! @deprecated(reason: "No longer supported. Use `system.fieldCreate` instead.")
  fieldDelete(data: TableFieldDeleteInput!): SuccessResponse! @deprecated(reason: "No longer supported. Use `system.fieldDelete` instead.")
  fieldUpdate(data: TableFieldUpdateInput!): TableField! @deprecated(reason: "No longer supported. Use `system.fieldUpdate` instead.")
  fieldUpdatePosition(data: TableFieldPositionUpdateInput!): SuccessResponse! @deprecated(reason: "No longer supported. Use `system.fieldUpdatePosition` instead.")
  fileCreate(data: FileCreateInput!): File!
  fileCreateMany(data: [FileCreateManyInput]!): FileManyResponse!
  fileDelete(data: FileDeleteInput, filter: FileKeyFilter, force: Boolean): SuccessResponse
  fileDeleteByFilter(filter: FileFilter!, force: Boolean): SuccessResponse
  fileDestroy(filter: FileKeyFilter, force: Boolean): SuccessResponse
  fileDestroyByFilter(filter: FileFilter!, force: Boolean): SuccessResponse
  fileRestore(id: String!): File!
  fileUpdate(data: FileUpdateInput!, destroyDetached: Boolean, filter: FileKeyFilter, force: Boolean): File!
  fileUpdateByFilter(data: FileUpdateByFilterInput!, filter: FileFilter): FileManyResponse!
  financeRecordCreate(data: FinanceRecordCreateInput!): FinanceRecord!
  financeRecordCreateMany(data: [FinanceRecordCreateManyInput]!): FinanceRecordManyResponse!
  financeRecordDelete(data: FinanceRecordDeleteInput, filter: FinanceRecordKeyFilter, force: Boolean): SuccessResponse
  financeRecordDeleteByFilter(filter: FinanceRecordFilter!, force: Boolean): SuccessResponse
  financeRecordDestroy(filter: FinanceRecordKeyFilter, force: Boolean): SuccessResponse
  financeRecordDestroyByFilter(filter: FinanceRecordFilter!, force: Boolean): SuccessResponse
  financeRecordRestore(id: String!): FinanceRecord!
  financeRecordUpdate(data: FinanceRecordUpdateInput!, destroyDetached: Boolean, filter: FinanceRecordKeyFilter, force: Boolean): FinanceRecord!
  financeRecordUpdateByFilter(data: FinanceRecordUpdateByFilterInput!, filter: FinanceRecordFilter): FinanceRecordManyResponse!
  habitCreate(data: HabitCreateInput!): Habit!
  habitCreateMany(data: [HabitCreateManyInput]!): HabitManyResponse!
  habitDelete(data: HabitDeleteInput, filter: HabitKeyFilter, force: Boolean): SuccessResponse
  habitDeleteByFilter(filter: HabitFilter!, force: Boolean): SuccessResponse
  habitDestroy(filter: HabitKeyFilter, force: Boolean): SuccessResponse
  habitDestroyByFilter(filter: HabitFilter!, force: Boolean): SuccessResponse
  habitRestore(id: String!): Habit!
  habitUpdate(data: HabitUpdateInput!, destroyDetached: Boolean, filter: HabitKeyFilter, force: Boolean): Habit!
  habitUpdateByFilter(data: HabitUpdateByFilterInput!, filter: HabitFilter): HabitManyResponse!
  imageCreate(data: ImageCreateInput!): Image!
  imageCreateMany(data: [ImageCreateManyInput]!): ImageManyResponse!
  imageDelete(data: ImageDeleteInput, filter: ImageKeyFilter, force: Boolean): SuccessResponse
  imageDeleteByFilter(filter: ImageFilter!, force: Boolean): SuccessResponse
  imageDestroy(filter: ImageKeyFilter, force: Boolean): SuccessResponse
  imageDestroyByFilter(filter: ImageFilter!, force: Boolean): SuccessResponse
  imageRestore(id: String!): Image!
  imageUpdate(data: ImageUpdateInput!, destroyDetached: Boolean, filter: ImageKeyFilter, force: Boolean): Image!
  imageUpdateByFilter(data: ImageUpdateByFilterInput!, filter: ImageFilter): ImageManyResponse!
  indexCreate(data: IndexCreateInput!): TableIndex!
  indexDelete(data: IndexDeleteInput!): SuccessResponse
  indexUpdate(data: IndexUpdateInput!): TableIndex!
  invoke(data: InvokeData): InvokeFunctionResponse @deprecated(reason: "No longer supported. Use `system.invoke` instead.")
  personCreate(data: PersonCreateInput!): Person!
  personCreateMany(data: [PersonCreateManyInput]!): PersonManyResponse!
  personDelete(data: PersonDeleteInput, filter: PersonKeyFilter, force: Boolean): SuccessResponse
  personDeleteByFilter(filter: PersonFilter!, force: Boolean): SuccessResponse
  personDestroy(filter: PersonKeyFilter, force: Boolean): SuccessResponse
  personDestroyByFilter(filter: PersonFilter!, force: Boolean): SuccessResponse
  personRestore(id: String!): Person!
  personUpdate(data: PersonUpdateInput!, destroyDetached: Boolean, filter: PersonKeyFilter, force: Boolean): Person!
  personUpdateByFilter(data: PersonUpdateByFilterInput!, filter: PersonFilter): PersonManyResponse!
  prepareDeploy: DeployDataResponse! @deprecated(reason: "No longer supported. Use `system.prepareDeploy` instead.")
  roleCreate(data: RoleCreateInput!): Role!
  roleCreateMany(data: [RoleCreateManyInput]!): RoleManyResponse!
  roleDelete(data: RoleDeleteInput, filter: RoleKeyFilter, force: Boolean): SuccessResponse
  roleDeleteByFilter(filter: RoleFilter!, force: Boolean): SuccessResponse
  roleDestroy(filter: RoleKeyFilter, force: Boolean): SuccessResponse
  roleDestroyByFilter(filter: RoleFilter!, force: Boolean): SuccessResponse
  roleRestore(id: String!): Role!
  roleUpdate(data: RoleUpdateInput!, destroyDetached: Boolean, filter: RoleKeyFilter, force: Boolean): Role!
  roleUpdateByFilter(data: RoleUpdateByFilterInput!, filter: RoleFilter): RoleManyResponse!
  schoolCreate(data: SchoolCreateInput!): School!
  schoolCreateMany(data: [SchoolCreateManyInput]!): SchoolManyResponse!
  schoolDelete(data: SchoolDeleteInput, filter: SchoolKeyFilter, force: Boolean): SuccessResponse
  schoolDeleteByFilter(filter: SchoolFilter!, force: Boolean): SuccessResponse
  schoolDestroy(filter: SchoolKeyFilter, force: Boolean): SuccessResponse
  schoolDestroyByFilter(filter: SchoolFilter!, force: Boolean): SuccessResponse
  schoolRestore(id: String!): School!
  schoolUpdate(data: SchoolUpdateInput!, destroyDetached: Boolean, filter: SchoolKeyFilter, force: Boolean): School!
  schoolUpdateByFilter(data: SchoolUpdateByFilterInput!, filter: SchoolFilter): SchoolManyResponse!
  sendInvitationTo8base(inviteEmail: String!): SuccessResponse
  settingsUpdate(data: SettingUpdateInput!): Setting!
  system: SystemMutation
  tableCreate(data: TableCreateInput!): Table! @deprecated(reason: "No longer supported. Use `system.tableCreate` instead.")
  tableDelete(data: TableDeleteInput!): SuccessResponse! @deprecated(reason: "No longer supported. Use `system.tableDelete` instead.")
  tableUpdate(data: TableUpdateInput!): Table! @deprecated(reason: "No longer supported. Use `system.tableUpdate` instead.")
  technologyLogoCreate(data: TechnologyLogoCreateInput!): TechnologyLogo!
  technologyLogoCreateMany(data: [TechnologyLogoCreateManyInput]!): TechnologyLogoManyResponse!
  technologyLogoDelete(data: TechnologyLogoDeleteInput, filter: TechnologyLogoKeyFilter, force: Boolean): SuccessResponse
  technologyLogoDeleteByFilter(filter: TechnologyLogoFilter!, force: Boolean): SuccessResponse
  technologyLogoDestroy(filter: TechnologyLogoKeyFilter, force: Boolean): SuccessResponse
  technologyLogoDestroyByFilter(filter: TechnologyLogoFilter!, force: Boolean): SuccessResponse
  technologyLogoRestore(id: String!): TechnologyLogo!
  technologyLogoUpdate(data: TechnologyLogoUpdateInput!, destroyDetached: Boolean, filter: TechnologyLogoKeyFilter, force: Boolean): TechnologyLogo!
  userChangePassword(data: ChangePasswordInput!): SuccessResponse
  userCreate(data: UserCreateInput!): User!
  userCreateMany(data: [UserCreateManyInput]!): UserManyResponse!
  userDelete(data: UserDeleteInput, filter: UserKeyFilter, force: Boolean): SuccessResponse
  userDeleteByFilter(filter: UserFilter!, force: Boolean): SuccessResponse
  userDestroy(filter: UserKeyFilter, force: Boolean): SuccessResponse
  userDestroyByFilter(filter: UserFilter!, force: Boolean): SuccessResponse
  userLogin(data: UserLoginInput!): LoginResponse
  userPasswordForgot(data: PasswordForgotInput!): SuccessResponse
  userPasswordForgotConfirm(data: PasswordForgotConfirmInput!): SuccessResponse
  userRefreshToken(data: RefreshTokenInput!): Auth
  userRestore(id: String!): User!
  userSignUp(authProfileId: ID, user: UserCreateInput!): User! @deprecated(reason: "No longer supported. Use `userSignUpWithToken` instead.")
  userSignUpResend(data: SignUpResendInput!): SuccessResponse @deprecated(reason: "No longer supported. Use `userVerificationEmailResend` instead.")
  userSignUpWithPassword(authProfileId: ID, password: String!, user: UserCreateInput!): User!
  userSignUpWithToken(authProfileId: ID, user: UserCreateInput!): User!
  userUpdate(data: UserUpdateInput!, destroyDetached: Boolean, filter: UserKeyFilter, force: Boolean): User!
  userUpdateByFilter(data: UserUpdateByFilterInput!, filter: UserFilter): UserManyResponse!
  userVerificationEmailResend(authProfileId: ID, data: VerificationEmailResendInput!): SuccessResponse
  viewCreate(data: ViewCreateInput!): Table! @deprecated(reason: "No longer supported. Use `system.viewCreate` instead.")
  viewUpdate(data: ViewUpdateInput!): Table!
  workspaceCreate(data: WorkspaceCreateMutationInput!): WorkspaceCreateResponse @deprecated(reason: "No longer supported. Use `system.workspaceCreate` instead.")
  workspaceCreateAsync(data: WorkspaceCreateMutationInput!): WorkspaceCreateResponse @deprecated(reason: "No longer supported. Use `system.workspaceCreateAsync` instead.")
  workspaceDelete(data: WorkspaceDeleteMutationInput!): SuccessResponse @deprecated(reason: "No longer supported. Use `system.workspaceDelete` instead.")
  workspaceLeave(force: Boolean): SuccessResponse @deprecated(reason: "No longer supported. Use `system.workspaceLeave` instead.")
  workspaceUpdate(data: WorkspaceUpdateMutationInput!): WorkspaceUpdateResponse @deprecated(reason: "No longer supported. Use `system.workspaceUpdate` instead.")
}

"Number Field Attributes"
type NumberFieldTypeAttributes {
  autoIncrement: Boolean
  currency: String
  format: String!
  isBigInt: Boolean
  maxValue: Float
  minValue: Float
  precision: Int
}

type OrganizationUserInvitationResponse {
  invitationId: String!
}

type Permission {
  _description: String
  appId: String
  createdAt: DateTime
  createdBy: User
  permission: JSON
  resource: String
  resourceType: String
  role: Role
  updatedAt: DateTime
}

"PermissionListResponse output"
type PermissionListResponse {
  "List items count"
  count: Int!
  "Aggregated items"
  groups: [GroupByResponse!]!
  "List items"
  items: [Permission!]!
}

"Permissions subscription payload"
type PermissionPayload {
  mutation: MutationType!
  node: Permission
  previousValues: Permission
  updatedFields: [String]
}

type Person {
  _description: String
  birthday: Date
  blogs(after: String, before: String, filter: BlogFilter, first: Int, groupBy: BlogGroupBy, last: Int, orderBy: [BlogOrderBy], skip: Int, sort: [BlogSort!]): BlogListResponse
  courses(after: String, before: String, filter: CourseFilter, first: Int, groupBy: CourseGroupBy, last: Int, orderBy: [CourseOrderBy], skip: Int, sort: [CourseSort!]): CourseListResponse
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  firstName: String
  githubUrl: String
  heightIn: Float
  id: ID
  image: Image
  lastName: String
  linkedinUrl: String
  summary: String
  updatedAt: DateTime
  websiteUrl: String
  weightLbs: Float
}

"PersonListResponse output"
type PersonListResponse {
  "List items count"
  count: Int!
  "Aggregated items"
  groups: [GroupByResponse!]!
  "List items"
  items: [Person!]!
}

"PersonManyResponse output"
type PersonManyResponse {
  "List items count"
  count: Int!
  "List items"
  items: [Person!]!
}

"Person subscription payload"
type PersonPayload {
  mutation: MutationType!
  node: Person
  previousValues: Person
  updatedFields: [String]
}

type Query {
  apiToken(id: ID, name: String, withDeleted: Boolean): ApiToken
  apiTokensList(after: String, before: String, filter: ApiTokenFilter, first: Int, groupBy: ApiTokenGroupBy, last: Int, orderBy: [ApiTokenOrderBy], skip: Int, sort: [ApiTokenSort!], withDeleted: Boolean): ApiTokenListResponse!
  application(id: String!): Application @deprecated(reason: "No longer supported. Use `system.application` instead.")
  applicationsList: ApplicationListResponse @deprecated(reason: "No longer supported. Use `system.applicationsList` instead.")
  asyncSessionStatus(sessionId: String!): AsyncSessionStatusResponse
  authenticationProfile(id: ID, name: String, withDeleted: Boolean): AuthenticationProfile
  authenticationProfilesList(after: String, before: String, filter: AuthenticationProfileFilter, first: Int, groupBy: AuthenticationProfileGroupBy, last: Int, orderBy: [AuthenticationProfileOrderBy], skip: Int, sort: [AuthenticationProfileSort!], withDeleted: Boolean): AuthenticationProfileListResponse!
  authenticationSettings: AuthenticationSetting
  billingCurrentPlan(organizationId: ID): BillingCurrentPlanResponse @deprecated(reason: "No longer supported. Use `system.billingCurrentPlan` instead.")
  billingDetails: BillingDetailsResponse @deprecated(reason: "No longer supported. Use `system.memberPaymentDetails, system.organizationPaymentDetails or system.workspacePaymentDetails` instead.")
  billingInvoicesList(after: ID, before: ID, by: BillingInvoicesListFilterType, limit: Int): BillingInvoicesListResponse! @deprecated(reason: "No longer supported. Use `system.memberBillingHistory, system.organizationBillingHistory or system.workspaceBillingHistory` instead.")
  billingMetricUsageQuotasList(organizationId: ID): BillingMetricUsageQuotasListResponse! @deprecated(reason: "No longer supported. Use `system.billingMetricUsageQuotasList` instead.")
  billingMetricUsagesList(filter: BillingMetricUsagesListFilter, organizationId: ID): BillingMetricUsagesListResponse! @deprecated(reason: "No longer supported. Use `system.billingMetricUsagesList` instead.")
  blog(id: ID, slug: String, withDeleted: Boolean): Blog
  blogsList(after: String, before: String, filter: BlogFilter, first: Int, groupBy: BlogGroupBy, last: Int, orderBy: [BlogOrderBy], skip: Int, sort: [BlogSort!], withDeleted: Boolean): BlogListResponse!
  companyName: String
  course(id: ID, ratingUrl: String, recommendationOrder: Int, title: String, withDeleted: Boolean): Course
  courseUrl(id: ID, url: String, withDeleted: Boolean): CourseUrl
  courseUrlsList(after: String, before: String, filter: CourseUrlFilter, first: Int, groupBy: CourseUrlGroupBy, last: Int, orderBy: [CourseUrlOrderBy], skip: Int, sort: [CourseUrlSort!], withDeleted: Boolean): CourseUrlListResponse!
  coursesList(after: String, before: String, filter: CourseFilter, first: Int, groupBy: CourseGroupBy, last: Int, orderBy: [CourseOrderBy], skip: Int, sort: [CourseSort!], withDeleted: Boolean): CourseListResponse!
  deployStatus(buildName: String!): DeployStatusResult! @deprecated(reason: "No longer supported. Use `system.deployStatus` instead.")
  environmentVariable(id: ID, name: String, withDeleted: Boolean): EnvironmentVariable
  environmentVariablesList(after: String, before: String, filter: EnvironmentVariableFilter, first: Int, groupBy: EnvironmentVariableGroupBy, last: Int, orderBy: [EnvironmentVariableOrderBy], skip: Int, sort: [EnvironmentVariableSort!], withDeleted: Boolean): EnvironmentVariableListResponse!
  file(fileId: String, id: ID, withDeleted: Boolean): File
  fileUploadInfo: FileUploadInfoResponse
  filesList(after: String, before: String, filter: FileFilter, first: Int, groupBy: FileGroupBy, last: Int, orderBy: [FileOrderBy], skip: Int, sort: [FileSort!], withDeleted: Boolean): FileListResponse!
  financeRecord(id: ID, withDeleted: Boolean): FinanceRecord
  financeRecordsList(after: String, before: String, filter: FinanceRecordFilter, first: Int, groupBy: FinanceRecordGroupBy, last: Int, orderBy: [FinanceRecordOrderBy], skip: Int, sort: [FinanceRecordSort!], withDeleted: Boolean): FinanceRecordListResponse!
  functionsList(applicationId: String, filter: FunctionInfoFilter, orderBy: [FunctionInfoOrderBy]): FunctionListResponse @deprecated(reason: "No longer supported. Use `system.functionsList` instead.")
  habit(id: ID, name: String, withDeleted: Boolean): Habit
  habitsList(after: String, before: String, filter: HabitFilter, first: Int, groupBy: HabitGroupBy, last: Int, orderBy: [HabitOrderBy], skip: Int, sort: [HabitSort!], withDeleted: Boolean): HabitListResponse!
  image(id: ID, withDeleted: Boolean): Image
  imagesList(after: String, before: String, filter: ImageFilter, first: Int, groupBy: ImageGroupBy, last: Int, orderBy: [ImageOrderBy], skip: Int, sort: [ImageSort!], withDeleted: Boolean): ImageListResponse!
  logs(applicationId: String, endTime: DateTime, functionName: String!, limit: Int, startTime: DateTime): [String] @deprecated(reason: "No longer supported. Use `system.logsList` instead.")
  peopleList(after: String, before: String, filter: PersonFilter, first: Int, groupBy: PersonGroupBy, last: Int, orderBy: [PersonOrderBy], skip: Int, sort: [PersonSort!], withDeleted: Boolean): PersonListResponse!
  person(id: ID, withDeleted: Boolean): Person
  role(id: ID, name: String, withDeleted: Boolean): Role
  rolesList(after: String, before: String, filter: RoleFilter, first: Int, groupBy: RoleGroupBy, last: Int, orderBy: [RoleOrderBy], skip: Int, sort: [RoleSort!], withDeleted: Boolean): RoleListResponse!
  school(id: ID, name: String, url: String, withDeleted: Boolean): School
  schoolsList(after: String, before: String, filter: SchoolFilter, first: Int, groupBy: SchoolGroupBy, last: Int, orderBy: [SchoolOrderBy], skip: Int, sort: [SchoolSort!], withDeleted: Boolean): SchoolListResponse!
  settings: Setting
  system: SystemQuery
  table(id: ID, name: String): Table @deprecated(reason: "No longer supported. Use `system.table` instead.")
  tableField(id: ID!): TableField @deprecated(reason: "No longer supported. Use `system.tableField` instead.")
  tablesList(filter: TableListFilter): TableListResponse! @deprecated(reason: "No longer supported. Use `system.tablesList` instead.")
  technologyLogo(id: ID, withDeleted: Boolean): TechnologyLogo
  technologyLogosList(after: String, before: String, filter: TechnologyLogoFilter, first: Int, groupBy: TechnologyLogoGroupBy, last: Int, orderBy: [TechnologyLogoOrderBy], skip: Int, sort: [TechnologyLogoSort!], withDeleted: Boolean): TechnologyLogoListResponse!
  user(email: String, id: ID, withDeleted: Boolean): User
  userBillingConfiguration(kind: String, organizationId: ID, region: String): UserBillingConfigurationResponse!
  userInvitationsList: UserInvitationList @deprecated(reason: "No longer supported. Use `system.userInvitationsList` instead.")
  usersList(after: String, before: String, filter: UserFilter, first: Int, groupBy: UserGroupBy, last: Int, orderBy: [UserOrderBy], skip: Int, sort: [UserSort!], withDeleted: Boolean): UserListResponse!
  workspacesList: WorkspaceListResponse @deprecated(reason: "No longer supported. Use `system.workspacesList` instead.")
}

"Relation"
type Relation {
  refField: TableField
  refFieldDisplayName: String
  refFieldIsList: Boolean
  refFieldIsRequired: Boolean
  refFieldName: String
  refTable: Table!
  relationFieldName: String
  relationTableName: String
}

type Role {
  _description: String
  apiTokens(after: String, before: String, filter: ApiTokenFilter, first: Int, groupBy: ApiTokenGroupBy, last: Int, orderBy: [ApiTokenOrderBy], skip: Int, sort: [ApiTokenSort!]): ApiTokenListResponse
  authenticationProfiles(after: String, before: String, filter: AuthenticationProfileFilter, first: Int, groupBy: AuthenticationProfileGroupBy, last: Int, orderBy: [AuthenticationProfileOrderBy], skip: Int, sort: [AuthenticationProfileSort!]): AuthenticationProfileListResponse
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  description: String
  id: ID
  membersCount: Int!
  name: String
  permissions(filter: PermissionInputFilter): PermissionListResponse
  updatedAt: DateTime
  users(after: String, before: String, filter: UserFilter, first: Int, groupBy: UserGroupBy, last: Int, orderBy: [UserOrderBy], skip: Int, sort: [UserSort!]): UserListResponse
}

"RoleListResponse output"
type RoleListResponse {
  "List items count"
  count: Int!
  "Aggregated items"
  groups: [GroupByResponse!]!
  "List items"
  items: [Role!]!
}

"RoleManyResponse output"
type RoleManyResponse {
  "List items count"
  count: Int!
  "List items"
  items: [Role!]!
}

"Roles subscription payload"
type RolePayload {
  mutation: MutationType!
  node: Role
  previousValues: Role
  updatedFields: [String]
}

"Schema Origin"
type SchemaOrigin {
  provider: String
  type: SchemaOriginType!
}

type School {
  _description: String
  courseUrls(after: String, before: String, filter: CourseUrlFilter, first: Int, groupBy: CourseUrlGroupBy, last: Int, orderBy: [CourseUrlOrderBy], skip: Int, sort: [CourseUrlSort!]): CourseUrlListResponse
  courses(after: String, before: String, filter: CourseFilter, first: Int, groupBy: CourseGroupBy, last: Int, orderBy: [CourseOrderBy], skip: Int, sort: [CourseSort!]): CourseListResponse
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  description: String
  id: ID
  image: Image
  name: String
  updatedAt: DateTime
  url: String
}

"SchoolListResponse output"
type SchoolListResponse {
  "List items count"
  count: Int!
  "Aggregated items"
  groups: [GroupByResponse!]!
  "List items"
  items: [School!]!
}

"SchoolManyResponse output"
type SchoolManyResponse {
  "List items count"
  count: Int!
  "List items"
  items: [School!]!
}

"School subscription payload"
type SchoolPayload {
  mutation: MutationType!
  node: School
  previousValues: School
  updatedFields: [String]
}

type Setting {
  _description: String
  bgColor: String
  buttonLinkColor: String
  containerColor: String
  createdAt: DateTime
  createdBy: User
  currency: String
  dateFormat: String
  landingPageImage: File
  language: String
  leftNavColor: String
  menuBarBGColor: String
  menuBarIconsColor: String
  menuBarLogo: File
  passwordMinLength: Int
  passwordRequireLowercase: Boolean
  passwordRequireNumbers: Boolean
  passwordRequireSpecial: Boolean
  passwordRequireUppercase: Boolean
  passwordUpdateInterval: Int
  rememberDevice: String
  timezone: String
  updatedAt: DateTime
  userInterfaceStyle: String
  vanityUrl: String
}

"SettingListResponse output"
type SettingListResponse {
  "List items count"
  count: Int!
  "Aggregated items"
  groups: [GroupByResponse!]!
  "List items"
  items: [Setting!]!
}

"Settings subscription payload"
type SettingPayload {
  mutation: MutationType!
  node: Setting
  previousValues: Setting
  updatedFields: [String]
}

"Smart Field Attributes"
type SmartFieldTypeAttributes {
  format: String!
  innerFields: [CustomTableField]
}

type Subscription {
  ApiTokens(filter: ApiTokenSubscriptionFilter): ApiTokenPayload
  AuthenticationProfiles(filter: AuthenticationProfileSubscriptionFilter): AuthenticationProfilePayload
  AuthenticationSettings(filter: AuthenticationSettingSubscriptionFilter): AuthenticationSettingPayload
  Blog(filter: BlogSubscriptionFilter): BlogPayload
  Course(filter: CourseSubscriptionFilter): CoursePayload
  CourseUrl(filter: CourseUrlSubscriptionFilter): CourseUrlPayload
  EnvironmentVariables(filter: EnvironmentVariableSubscriptionFilter): EnvironmentVariablePayload
  Files(filter: FileSubscriptionFilter): FilePayload
  FinanceRecord(filter: FinanceRecordSubscriptionFilter): FinanceRecordPayload
  Habit(filter: HabitSubscriptionFilter): HabitPayload
  Image(filter: ImageSubscriptionFilter): ImagePayload
  Permissions(filter: PermissionSubscriptionFilter): PermissionPayload
  Person(filter: PersonSubscriptionFilter): PersonPayload
  Roles(filter: RoleSubscriptionFilter): RolePayload
  School(filter: SchoolSubscriptionFilter): SchoolPayload
  Settings(filter: SettingSubscriptionFilter): SettingPayload
  TechnologyLogo(filter: TechnologyLogoSubscriptionFilter): TechnologyLogoPayload
  Users(filter: UserSubscriptionFilter): UserPayload
}

type SuccessResponse {
  success: Boolean
}

type SuccessWithMessageResponse {
  message: String
  success: Boolean
}

"Switch Field Attributes"
type SwitchFieldTypeAttributes {
  format: String!
  listOptions: [String]
}

"Application"
type SystemApplication {
  appType: String!
  createdAt: DateTime!
  description: String
  displayName: String
  id: ID!
  name: String!
  status: SystemApplicationStatusEnum!
}

"SystemApplicationListResponse output"
type SystemApplicationListResponse {
  "List items count"
  count: Int!
  "List items"
  items: [SystemApplication!]!
}

type SystemBillingCurrentPlanResponse {
  displayName: String
  id: ID
  name: String
  nextPlan: SystemBillingNextPlanResponse
  paymentDate: DateTime
  pdf: String
  price: Int
  status: SystemWorkspaceStatus
  trialEnd: DateTime
}

type SystemBillingDetailsResponse {
  brand: String
  expMonth: Int
  expYear: Int
  last4: String
  origin: SystemBillingDetailsOrigin!
}

type SystemBillingInvoiceItem {
  amountDue: Float
  amountPaid: Float
  amountRemaining: Float
  description: String
  endingBalance: Float
  id: ID!
  invoicePdf: String
  number: String
  organization: SystemBillingInvoiceItemOrganizationInfo
  paid: Boolean
  periodEnd: DateTime
  periodStart: DateTime
  plan: SystemBillingInvoiceItemPlanInfo
  status: String
  total: Float
  workspace: SystemBillingInvoiceItemWorkspaceInfo
}

type SystemBillingInvoiceItemOrganizationInfo {
  id: ID
  name: String
}

type SystemBillingInvoiceItemPlanInfo {
  displayName: String
  id: ID
  name: String
}

type SystemBillingInvoiceItemWorkspaceInfo {
  id: ID
  name: String
}

"SystemBillingInvoicesListResponse output"
type SystemBillingInvoicesListResponse {
  "List items count"
  count: Int!
  "List items"
  items: [SystemBillingInvoiceItem!]!
}

type SystemBillingLimitMetricItem {
  description: String
  displayName: String
  name: String
  showPriority: Int
  tooltip: String
  unit: String
}

type SystemBillingMetricOverageItem {
  value: Float
  warning: String
}

type SystemBillingMetricUsageItem {
  limitMetric: SystemBillingLimitMetricItem
  overage: SystemBillingMetricOverageItem
  value: Float
}

type SystemBillingMetricUsageQuotaItem {
  limitMetric: SystemBillingLimitMetricItem
  value: Float
}

"SystemBillingMetricUsageQuotasListResponse output"
type SystemBillingMetricUsageQuotasListResponse {
  "List items count"
  count: Int!
  "List items"
  items: [SystemBillingMetricUsageQuotaItem!]!
}

"SystemBillingMetricUsagesListResponse output"
type SystemBillingMetricUsagesListResponse {
  "List items count"
  count: Int!
  "List items"
  items: [SystemBillingMetricUsageItem!]!
}

type SystemBillingNextPlanResponse {
  displayName: String
  id: ID
  name: String
  pdf: String
  price: Int
}

type SystemBillingPlanBaseInfo {
  description: String
  displayName: String
  id: ID
  isCustom: Boolean
  isLegacy: Boolean
  limitMetrics: [SystemBillingPlanLimitMetricItem]
  name: String
  pdf: String
  price: Int
}

type SystemBillingPlanBaseScalarInfo {
  description: String
  displayName: String
  id: ID
  name: String
  pdf: String
  price: Int
}

type SystemBillingPlanLimitMetricItem {
  displayName: String
  hardLimit: Float
  name: String
  overagePrice: Int
  softLimit: Float
}

"Ci Status"
type SystemCiStatusOutput {
  migrations: [String]
  status: String!
}

"Custom Table Field Type"
type SystemCustomTableField {
  computedMode: SystemComputedFieldMode
  defaultValue: String
  description: String
  displayName: String
  expression: String
  fieldType: SystemFieldType
  fieldTypeAttributes: SystemFieldTypeAttributes
  isList: Boolean!
  isRequired: Boolean!
  isUnique: Boolean
  name: String
}

"Date Field Attributes"
type SystemDateFieldTypeAttributes {
  format: String!
}

"DeployDataResponse"
type SystemDeployDataResponse {
  buildName: String!
  uploadBuildUrl: String!
  uploadMetaDataUrl: String!
}

"SystemDeployStatusResult"
type SystemDeployStatusResult {
  message: String
  status: SystemDeployStatusEnum!
}

"SystemEnvironmentBackupListResponse output"
type SystemEnvironmentBackupListResponse {
  "List items count"
  count: Int!
  "List items"
  items: [EnvironmentBackupItem!]!
}

type SystemEnvironmentMember {
  avatar: SystemEnvironmentMemberAvatar
  createdAt: DateTime
  email: String!
  firstName: String
  lastName: String
  permissions: SystemEnvironmentMemberPermissionsList
  roles: SystemEnvironmentMemberRolesList
  status: String!
}

type SystemEnvironmentMemberAvatar {
  downloadUrl: String
  id: String
}

type SystemEnvironmentMemberPermission {
  permission: JSON
  resource: String
  resourceType: String
}

type SystemEnvironmentMemberPermissionsList {
  count: Int!
  items: [SystemEnvironmentMemberPermission!]
}

type SystemEnvironmentMemberRole {
  id: String!
  name: String!
}

type SystemEnvironmentMemberRolesList {
  count: Int!
  items: [SystemEnvironmentMemberRole!]
}

"SystemEnvironmentMembersListResponse output"
type SystemEnvironmentMembersListResponse {
  "List items count"
  count: Int!
  "List items"
  items: [SystemEnvironmentMember!]!
}

type SystemEnvironmentRoleBaseInfo {
  id: String!
  name: String!
}

type SystemEnvironmentRoleList {
  assignedRoles: [SystemEnvironmentRoleBaseInfo]
  environmentId: String!
  environmentName: String!
  exists: Boolean
  roles: [SystemEnvironmentRoleBaseInfo]
}

type SystemEnvironmentSettings {
  deleteLock: Boolean
  fileManagementProvider: String
}

"SystemEnvironmentsListResponse output"
type SystemEnvironmentsListResponse {
  "List items count"
  count: Int!
  "List items"
  items: [EnvironmentItem!]!
}

"Field Data Features"
type SystemFieldDataFeatures {
  create: Boolean!
  sort: Boolean!
  update: Boolean!
}

"Field Schema Features"
type SystemFieldSchemaFeatures {
  delete: Boolean!
  update: Boolean!
}

type SystemFileBaseInfo {
  downloadUrl: String
  id: String
}

"File Field Attributes"
type SystemFileFieldTypeAttributes {
  expiration: Int
  format: String!
  maxSize: Int
  showTitle: Boolean @deprecated(reason: "Field is deprecated")
  showUrl: Boolean @deprecated(reason: "Field is deprecated")
  typeRestrictions: [String!]
}

type SystemFrontendPlanIdItem {
  id: ID
}

"SystemFunctionListResponse output"
type SystemFunctionListResponse {
  "List items count"
  count: Int!
  "List items"
  items: [SystemFunctionInfo!]!
}

"FunctionLogEntry"
type SystemFunctionLogEntry {
  message: String
  timestamp: DateTime
}

"FunctionResolverInfo"
type SystemFunctionResolverInfo implements SystemFunctionInfo {
  application: SystemApplication
  description: String
  functionType: SystemFunctionType!
  gqlType: String!
  name: String!
}

"FunctionTaskInfo"
type SystemFunctionTaskInfo implements SystemFunctionInfo {
  application: SystemApplication
  description: String
  functionType: SystemFunctionType!
  name: String!
  scheduleExpression: String
}

"FunctionTriggerInfo"
type SystemFunctionTriggerInfo implements SystemFunctionInfo {
  application: SystemApplication
  description: String
  functionType: SystemFunctionType!
  name: String!
  operation: String!
  tableName: String!
  type: String!
}

"FunctionWebhookInfo"
type SystemFunctionWebhookInfo implements SystemFunctionInfo {
  application: SystemApplication
  description: String
  functionType: SystemFunctionType!
  httpMethod: String!
  name: String!
  workspaceFullPath: String!
  workspaceRelativePath: String!
}

"Diff Environment Input"
type SystemGenerateEnvironmentOutput {
  url: String
}

"Geo Field Attributes"
type SystemGeoFieldTypeAttributes {
  format: String!
  srid: Int
}

type SystemInboxEventEnvironmentInvitationDetails {
  environmentName: String
  invitedBy: SystemInboxEventInvitedBy
  status: SystemInboxEventStatusEnum
  uuid: String
  workspace: SystemInboxEventWorkspace
}

type SystemInboxEventInvitedBy {
  avatar: GraphQLFileItemResponse
  email: String
  firstName: String
  lastName: String
}

type SystemInboxEventItem {
  createdAt: DateTime!
  details: SystemInboxEventDetailsUnion
  id: ID!
  isCompleted: Boolean
  type: SystemInboxEventTypeEnum
}

type SystemInboxEventNotificationDetailsType {
  details: JSON
  kind: String
}

type SystemInboxEventOrganization {
  avatar: GraphQLFileItemResponse
  id: ID!
  name: String
}

type SystemInboxEventOrganizationInvitationDetails {
  invitedBy: SystemInboxEventInvitedBy
  organization: SystemInboxEventOrganization
  status: SystemInboxEventStatusEnum
  uuid: String
}

type SystemInboxEventTransferFinalizer {
  email: String!
  firstName: String
  lastName: String
}

type SystemInboxEventTransferParticipant {
  avatar: GraphQLFileItemResponse
  identity: String!
  name: String
  type: SystemTransferParticipantType!
}

type SystemInboxEventWorkspace {
  apiHost: String
  avatar: GraphQLFileItemResponse
  id: ID!
  kind: String
  name: String
}

type SystemInboxEventWorkspaceTransferDetails {
  finalizer: SystemInboxEventTransferFinalizer
  from: SystemInboxEventTransferParticipant
  status: SystemInboxEventStatusEnum
  to: SystemInboxEventTransferParticipant
  uuid: String
  workspace: SystemInboxEventWorkspace
}

"SystemInboxEventsListResponse output"
type SystemInboxEventsListResponse {
  "List items count"
  count: Int!
  "List items"
  items: [SystemInboxEventItem!]!
}

"Invited By Name"
type SystemInvitedByName {
  email: String
  firstName: String
  lastName: String
  workspaceName: String
}

"InvokeFunctionResponse"
type SystemInvokeFunctionResponse {
  responseData: String!
}

type SystemMemberAccountInfo {
  aboutMe: String
  addressLine1: String
  addressLine2: String
  avatar: GraphQLFileItemResponse
  city: String
  companyName: String
  country: String
  createdAt: DateTime
  email: String!
  firstName: String
  githubUsername: String
  isDeveloper: Boolean
  lastName: String
  learningMode: Boolean
  linkedInUsername: String
  projectDescription: String
  role: String
  state: String
  timezone: String
  twitterUsername: String
  type: SystemUserType
  website: String
  zipCode: String
}

"Member Invitation"
type SystemMemberInvitation {
  accepted: Boolean
  acceptedOn: DateTime
  apiHost: String
  email: String
  firstName: String
  id: String
  invitedBy: SystemInvitedByName
  isRegistered: Boolean
  lastName: String
  resentOn: DateTime
}

"Member Invitation Accept Response"
type SystemMemberInvitationAcceptResponse {
  success: Boolean!
}

type SystemMemberInvitationsList {
  count: Int
  items: [SystemMemberInvitation]
}

"MissingRelation Field Attributes"
type SystemMissingRelationFieldTypeAttributes {
  missingTable: String!
}

type SystemMutation {
  applicationDelete(data: SystemApplicationDeleteMutationInput!): SuccessResponse
  applicationInstall(data: SystemApplicationInstallInput!): SystemApplication
  applicationUpdate(data: SystemApplicationUpdateInput!): SystemApplication
  billingDetailsUpdate(data: SystemBillingDetailsUpdateMutationInput!): SystemBillingDetailsResponse @deprecated(reason: "No longer supported. Use `system.memberPaymentDetailsUpdate, system.organizationPaymentDetailsUpdate or system.workspacePaymentDetailsUpdate` instead.")
  billingPlanUpdate(data: SystemBillingPlanUpdateMutationInput!): SystemBillingCurrentPlanResponse
  ciCommit(build: String, migrationNames: [String], mode: SystemCiCommitMode): AsyncSession
  ciInstall: SuccessResponse
  deploy(data: SystemDeployingBuildInput): Boolean
  environmentBackup(environmentName: String!): AsyncSession
  environmentBranch(mode: SystemBranchEnvironmentMode, name: String!): AsyncSession
  environmentDelete(environmentName: String!): SuccessResponse
  environmentDeleteAsync(environmentName: String!): AsyncSession
  environmentMemberDelete(filter: SystemEnvironmentMembersFilter): SuccessResponse!
  environmentMemberUpdate(data: SystemEnvironmentMemberUpdateData, filter: SystemEnvironmentMembersFilter): SystemEnvironmentMember
  environmentRestore(backup: String!, environmentName: String!): AsyncSession
  environmentSetup(data: EnvironmentSetupInput): SuccessResponse
  fieldCreate(data: SystemTableFieldCreateInput!): SystemTableField!
  fieldDelete(data: SystemTableFieldDeleteInput!): SuccessResponse!
  fieldUpdate(data: SystemTableFieldUpdateInput!): SystemTableField!
  fieldUpdatePosition(data: SystemTableFieldPositionUpdateInput!): SuccessResponse!
  indexCreate(data: SystemIndexCreateInput!): SystemTableIndex!
  indexDelete(data: SystemIndexDeleteInput!): SuccessResponse
  indexUpdate(data: SystemIndexUpdateInput!): SystemTableIndex!
  inviteMembers(data: SystemInviteMembersInput!, force: Boolean): [SystemTeamInvitationDetails]!
  invoke(data: SystemInvokeData): SystemInvokeFunctionResponse
  memberAccountUpsert(data: SystemMemberAccountUpsertDataInput): SystemMemberAccountInfo
  memberInvitationAccept(data: SystemMemberInvitationAcceptInput!): SystemMemberInvitationAcceptResponse!
  memberInvitationCancel(data: SystemMemberInvitationCancelInput!): SuccessResponse
  memberInvitationResend(data: SystemMemberInvitationResendInput!): SuccessResponse
  memberPaymentDetailsUpdate(data: SystemMemberPaymentDetailsUpdateMutationInput!): SystemPaymentDetailsResponse
  notificationUpdate(id: String!, status: NotificationStatusType!): SuccessResponse
  organizationInviteUser(email: String!, firstName: String, lastName: String, organizationId: ID!, role: String!, workspaceRoles: [SystemOrganizationWorkspaceWithEnvironmentRolesInput]): OrganizationUserInvitationResponse
  organizationInviteUserAccept(invitationId: String!): SuccessResponse
  organizationInviteUserCancel(invitationId: String!): SuccessResponse
  organizationPaymentDetailsUpdate(data: SystemOrganizationPaymentDetailsUpdateMutationInput!): SystemPaymentDetailsResponse
  organizationUpdate(description: String, id: String!, image: GraphQLCreateFileItemInput, name: String, type: SystemOrganizationTypeEnum): SystemOrganizationItem
  organizationUserRemove(email: String!, organizationId: String!): SuccessResponse
  organizationUserUpdate(email: String!, organizationId: ID!, role: String!): SystemOrganizationUserInfo
  organizationWorkspaceUserRemove(email: String!, workspaceId: String!): SuccessResponse
  organizationWorkspaceUserShare(email: String!, environmentRoles: [SystemOrganizationWorkspaceEnvironmentRolesInput], workspaceId: ID!): SuccessResponse
  prepareDeploy: SystemDeployDataResponse!
  tableCreate(data: SystemTableCreateInput!): SystemTable!
  tableDelete(data: SystemTableDeleteInput!): SuccessResponse!
  tableUpdate(data: SystemTableUpdateInput!): SystemTable!
  viewCreate(data: SystemViewCreateInput!): SystemTable!
  viewUpdate(data: SystemViewUpdateInput!): SystemTable!
  workspaceCreate(data: SystemWorkspaceCreateMutationInput!): SystemWorkspaceCreateResponse
  workspaceCreateAsync(data: SystemWorkspaceCreateMutationInput!): SystemWorkspaceCreateResponse
  workspaceDelete(data: SystemWorkspaceDeleteMutationInput!): SuccessResponse
  workspaceLeave(force: Boolean): SuccessResponse
  workspacePaymentDetailsUpdate(data: SystemWorkspacePaymentDetailsUpdateMutationInput): SystemPaymentDetailsResponse
  workspaceTransferAbort(workspaceId: ID!): SuccessResponse
  workspaceTransferAccept(cardToken: String, planId: ID!, workspaceId: ID!, workspaceName: String): SuccessResponse
  workspaceTransferNotificationSend(workspaceId: ID!): SuccessResponse
  workspaceTransferRegister(to: String!, workspaceId: ID!): SuccessWithMessageResponse
  workspaceUpdate(data: SystemWorkspaceUpdateMutationInput!): SystemWorkspaceUpdateResponse
}

"Number Field Attributes"
type SystemNumberFieldTypeAttributes {
  autoIncrement: Boolean
  currency: String
  format: String!
  isBigInt: Boolean
  maxValue: Float
  minValue: Float
  precision: Int
}

type SystemOrganizationBaseItem {
  description: String
  id: ID!
  image: SystemFileBaseInfo
  name: String!
  type: SystemOrganizationTypeEnum
}

type SystemOrganizationInvitation {
  accepted: Boolean
  email: String!
  emailFrom: String!
  firstName: String
  firstNameFrom: String
  id: ID!
  lastName: String
  lastNameFrom: String
  organization: SystemOrganizationBaseItem!
  role: String!
}

type SystemOrganizationItem {
  description: String
  id: ID!
  image: SystemOrganizationItemImage
  name: String!
  type: SystemOrganizationTypeEnum
  users: [SystemOrganizationUserInfo]
}

type SystemOrganizationItemImage {
  downloadUrl: String
  id: String
}

type SystemOrganizationUserInfo {
  avatar: GraphQLFileItemResponse
  email: String!
  firstName: String
  id: String!
  lastName: String
  role: String!
  status: String!
  workspaces: [SystemOrganizationWorkspaceItem]
}

type SystemOrganizationWorkspaceItem {
  apiHost: String
  description: String
  id: ID!
  image: SystemFileBaseInfo
  kind: String!
  name: String!
  organization: SystemOrganizationBaseItem
}

"SystemOrganizationsListAllResponse output"
type SystemOrganizationsListAllResponse {
  "List items count"
  count: Int!
  "List items"
  items: [SystemOrganizationItem!]!
}

"SystemOrganizationsListResponse output"
type SystemOrganizationsListResponse {
  "List items count"
  count: Int!
  "List items"
  items: [SystemOrganizationItem!]!
}

type SystemPaymentDetailsResponse {
  brand: String
  expMonth: Int
  expYear: Int
  last4: String
  origin: SystemPaymentDetailsOrigin!
}

"Diff Environment Input"
type SystemPlanEnvironmentOutput {
  url: String
}

type SystemQuery {
  application(id: String!): SystemApplication
  applicationsList: SystemApplicationListResponse
  billingCurrentPlan(organizationId: ID): SystemBillingCurrentPlanResponse
  billingDetails: SystemBillingDetailsResponse @deprecated(reason: "No longer supported. Use `system.memberPaymentDetails, system.organizationPaymentDetails or system.workspacePaymentDetails` instead.")
  billingInvoicesList(after: ID, before: ID, by: SystemBillingInvoicesListFilterType, limit: Int): SystemBillingInvoicesListResponse! @deprecated(reason: "No longer supported. Use `system.memberBillingHistory, system.organizationBillingHistory or system.workspaceBillingHistory` instead.")
  billingMetricUsageQuotasList(organizationId: ID): SystemBillingMetricUsageQuotasListResponse!
  billingMetricUsagesList(filter: SystemBillingMetricUsagesListFilter, organizationId: ID): SystemBillingMetricUsagesListResponse!
  ciGenerate(sourceEnvironmentId: String, tables: [String!], targetEnvironmentId: String): SystemGenerateEnvironmentOutput
  ciPlan(sourceEnvironmentId: String, tables: [String!], targetEnvironmentId: String): SystemPlanEnvironmentOutput @deprecated(reason: "No longer supported. Use `ciGenerate` instead.")
  ciStatus: SystemCiStatusOutput
  deployStatus(buildName: String!): SystemDeployStatusResult!
  environmentBackupsList(environmentName: String): SystemEnvironmentBackupListResponse
  environmentMember(filter: SystemEnvironmentMemberFilter): SystemEnvironmentMember
  environmentMembersList(filter: SystemEnvironmentMembersListFilter, first: Int, skip: Int, sort: [SystemEnvironmentMembersListSort!]): SystemEnvironmentMembersListResponse
  environmentSettings: SystemEnvironmentSettings
  environmentsList: SystemEnvironmentsListResponse
  functionsList(applicationId: String, filter: SystemFunctionInfoFilter, orderBy: [SystemFunctionInfoOrderBy]): SystemFunctionListResponse
  getEnvironmentRoles(email: String, workspaceId: String!): [SystemEnvironmentRoleList]
  getFrontendPlanId: SystemFrontendPlanIdItem
  inboxEventsList(filter: InboxEventsListFilter, first: Int, skip: Int): SystemInboxEventsListResponse
  introspection: IntrospectionQueryResponse
  logs(applicationId: String, endTime: DateTime, functionName: String!, limit: Int, startTime: DateTime): [String] @deprecated(reason: "No longer supported. Use `system.logsList` instead.")
  logsList(applicationId: String, endTime: DateTime, functionName: String!, limit: Int, startTime: DateTime): [SystemFunctionLogEntry]
  memberAccount: SystemMemberAccountInfo
  memberBillingHistory(first: Int, hideOrganizationInvoices: Boolean, skip: Int): SystemBillingInvoicesListResponse!
  memberInvitation(id: String!): SystemMemberInvitation
  memberInvitationsList: SystemMemberInvitationsList
  memberPaymentDetails: SystemPaymentDetailsResponse
  organizationBillingHistory(first: Int, hideWorkspaceInvoices: Boolean, organizationId: ID!, skip: Int): SystemBillingInvoicesListResponse!
  organizationById(organizationId: String!): SystemOrganizationItem
  organizationInvitationById(invitationId: String!): SystemOrganizationInvitation
  organizationPaymentDetails(organizationId: ID!): SystemPaymentDetailsResponse
  organizationsListAll: SystemOrganizationsListAllResponse
  organizationsListByUser: SystemOrganizationsListResponse
  table(id: ID, name: String): SystemTable
  tableField(id: ID!): SystemTableField
  tablesList(filter: SystemTableListFilter): SystemTableListResponse!
  userBillingConfiguration(kind: String, organizationId: ID, region: String): SystemUserBillingConfigurationResponse!
  userInvitationsList: SystemUserInvitationList
  workspaceBillingHistory(first: Int, skip: Int): SystemBillingInvoicesListResponse!
  workspacePaymentDetails: SystemPaymentDetailsResponse
  workspaceTransferInfo(workspaceId: ID!): SystemWorkspaceTransferItem
  workspacesFrontendList: SystemWorkspaceListResponse
  workspacesList: SystemWorkspaceListResponse
}

"Relation"
type SystemRelation {
  refField: SystemTableField
  refFieldDisplayName: String
  refFieldIsList: Boolean
  refFieldIsRequired: Boolean
  refFieldName: String
  refTable: SystemTable!
  relationFieldName: String
  relationTableName: String
}

"Schema Origin"
type SystemSchemaOrigin {
  provider: String
  type: SystemSchemaOriginType!
}

"Smart Field Attributes"
type SystemSmartFieldTypeAttributes {
  format: String!
  innerFields: [SystemCustomTableField]
}

"Switch Field Attributes"
type SystemSwitchFieldTypeAttributes {
  format: String!
  listOptions: [String]
}

"Table"
type SystemTable {
  application: SystemApplication
  attributes: SystemTableAttributes
  dataFeatures: SystemTableDataFeatures!
  description: String
  displayName: String
  fields: [SystemTableField!]
  id: ID!
  indexes: [SystemTableIndex!]
  isSystem: Boolean!
  name: String!
  origin: SystemSchemaOrigin!
  schemaFeatures: SystemTableSchemaFeatures!
}

"Table Data Features"
type SystemTableDataFeatures {
  create: Boolean!
  delete: Boolean!
  update: Boolean!
}

"TableField"
type SystemTableField {
  computedMode: SystemComputedFieldMode
  dataFeatures: SystemFieldDataFeatures!
  defaultValue: String
  description: String
  displayName: String
  expression: String
  fieldType: SystemFieldType!
  fieldTypeAttributes: SystemFieldTypeAttributes
  id: ID!
  isList: Boolean!
  isMeta: Boolean!
  isRequired: Boolean!
  isSystem: Boolean!
  isUnique: Boolean
  name: String!
  origin: SystemSchemaOrigin!
  relation: SystemRelation
  schemaFeatures: SystemFieldSchemaFeatures!
  table: SystemTable!
}

"Table Index"
type SystemTableIndex {
  columns: [SystemTableIndexColumn!]
  id: ID!
  isSystem: Boolean!
  name: String
  table: SystemTable!
  type: String!
}

"Table Index Column"
type SystemTableIndexColumn {
  name: String!
}

"Table List Response"
type SystemTableListResponse {
  count: Int
  items: [SystemTable]
}

"Table Schema Create Features"
type SystemTableSchemaCreateFeatures {
  DATE: Boolean!
  FILE: Boolean!
  GEO: Boolean!
  ID: Boolean!
  JSON: Boolean!
  MISSING_RELATION: Boolean!
  NUMBER: Boolean!
  ONE_WAY_RELATION: Boolean!
  RELATION: Boolean!
  SMART: Boolean!
  SWITCH: Boolean!
  TEXT: Boolean!
  UUID: Boolean!
}

"Table Schema Features"
type SystemTableSchemaFeatures {
  computedFields: Boolean!
  create: SystemTableSchemaCreateFeatures!
  update: SystemTableSchemaMetaFieldFeatures
}

"Table Schema Meta Field Features"
type SystemTableSchemaMetaFieldFeatures {
  displayName: Boolean!
  name: Boolean!
}

"Team Invitation Details"
type SystemTeamInvitationDetails {
  accepted: Boolean
  acceptedOn: DateTime
  apiHost: String
  email: String
  firstName: String
  id: String
  invitedBy: SystemInvitedByName
  isRegistered: Boolean
  lastName: String
  resentOn: DateTime
}

"Text Field Attributes"
type SystemTextFieldTypeAttributes {
  fieldSize: Int
  format: String!
}

type SystemTransferParticipant {
  identity: String!
  image: GraphQLFileItemResponse
  name: String!
  type: SystemTransferParticipantType!
}

"UUID Field Attributes"
type SystemUUIDFieldTypeAttributes {
  fieldSize: Int
}

type SystemUserBillingConfigurationResponse {
  availablePlans: [SystemBillingPlanBaseInfo!]!
  isCancelSubscriptionAvailable: Boolean! @deprecated(reason: "Flag is deprecated")
  isFreePlanAvailable: Boolean! @deprecated(reason: "Flag is deprecated")
}

"User Invitation Details"
type SystemUserInvitationDetails {
  accepted: Boolean
  acceptedOn: DateTime
  apiHost: String
  email: String
  firstName: String
  id: String
  invitedBy: SystemInvitedByName
  isRegistered: Boolean
  lastName: String
  resentOn: DateTime
}

"User Invitation List"
type SystemUserInvitationList {
  count: Int
  items: [SystemUserInvitationDetails]
}

"View Attributes"
type SystemViewAttributes {
  query: String
}

type SystemWorkspaceCreateResponse {
  description: String
  id: ID
  kind: String
  name: String
}

type SystemWorkspaceImage {
  downloadUrl: String
  id: String
}

type SystemWorkspaceItem {
  apiHost: String
  createdAt: DateTime
  description: String
  id: ID!
  image: SystemWorkspaceImage
  isCiCdEnabled: Boolean
  isOwner: Boolean!
  kind: String
  lastAccess: DateTime
  name: String!
  nextPlan: SystemBillingNextPlanResponse
  organization: SystemOrganizationBaseItem
  owner: SystemMemberAccountInfo
  plan: SystemBillingCurrentPlanResponse
  region: String
  teamMemberCount: Int
  webSocket: String
}

"SystemWorkspaceListResponse output"
type SystemWorkspaceListResponse {
  "List items count"
  count: Int!
  "List items"
  items: [SystemWorkspaceItem!]!
}

type SystemWorkspaceTransferItem {
  card: SystemBillingDetailsResponse
  createdAt: DateTime!
  from: SystemTransferParticipant!
  initiator: String!
  plans: [SystemBillingPlanBaseScalarInfo]
  status: String!
  to: SystemTransferParticipant!
  workspace: SystemWorkspaceTransferWorkspaceItem!
}

type SystemWorkspaceTransferWorkspaceItem {
  apiHost: String
  createdAt: DateTime
  description: String
  image: SystemWorkspaceImage
  kind: String
  name: String!
  organization: SystemOrganizationBaseItem
  owner: String
  region: String
  webSocket: String
  workspaceId: ID!
}

type SystemWorkspaceUpdateResponse {
  description: String
  id: ID
  image: GraphQLFileItemResponse
  name: String
}

"Table"
type Table {
  application: Application
  attributes: TableAttributes
  dataFeatures: TableDataFeatures!
  description: String
  displayName: String
  fields: [TableField!]
  id: ID!
  indexes: [TableIndex!]
  isSystem: Boolean!
  name: String!
  origin: SchemaOrigin!
  schemaFeatures: TableSchemaFeatures!
}

"Table Data Features"
type TableDataFeatures {
  create: Boolean!
  delete: Boolean!
  update: Boolean!
}

"TableField"
type TableField {
  computedMode: ComputedFieldMode
  dataFeatures: FieldDataFeatures!
  defaultValue: String
  description: String
  displayName: String
  expression: String
  fieldType: FieldType!
  fieldTypeAttributes: FieldTypeAttributes
  id: ID!
  isList: Boolean!
  isMeta: Boolean!
  isRequired: Boolean!
  isSystem: Boolean!
  isUnique: Boolean
  name: String!
  origin: SchemaOrigin!
  relation: Relation
  schemaFeatures: FieldSchemaFeatures!
  table: Table!
}

"Table Index"
type TableIndex {
  columns: [TableIndexColumn!]
  id: ID!
  isSystem: Boolean!
  name: String
  table: Table!
  type: String!
}

"Table Index Column"
type TableIndexColumn {
  name: String!
}

"Table List Response"
type TableListResponse {
  count: Int
  items: [Table]
}

"Table Schema Create Features"
type TableSchemaCreateFeatures {
  DATE: Boolean!
  FILE: Boolean!
  GEO: Boolean!
  ID: Boolean!
  JSON: Boolean!
  MISSING_RELATION: Boolean!
  NUMBER: Boolean!
  ONE_WAY_RELATION: Boolean!
  RELATION: Boolean!
  SMART: Boolean!
  SWITCH: Boolean!
  TEXT: Boolean!
  UUID: Boolean!
}

"Table Schema Features"
type TableSchemaFeatures {
  computedFields: Boolean!
  create: TableSchemaCreateFeatures!
  update: TableSchemaMetaFieldFeatures
}

"Table Schema Meta Field Features"
type TableSchemaMetaFieldFeatures {
  displayName: Boolean!
  name: Boolean!
}

type TechnologyLogo {
  _description: String
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  id: ID
  image: Image
  updatedAt: DateTime
}

"TechnologyLogoListResponse output"
type TechnologyLogoListResponse {
  "List items count"
  count: Int!
  "Aggregated items"
  groups: [GroupByResponse!]!
  "List items"
  items: [TechnologyLogo!]!
}

"TechnologyLogoManyResponse output"
type TechnologyLogoManyResponse {
  "List items count"
  count: Int!
  "List items"
  items: [TechnologyLogo!]!
}

"TechnologyLogo subscription payload"
type TechnologyLogoPayload {
  mutation: MutationType!
  node: TechnologyLogo
  previousValues: TechnologyLogo
  updatedFields: [String]
}

"Text Field Attributes"
type TextFieldTypeAttributes {
  fieldSize: Int
  format: String!
}

"UUID Field Attributes"
type UUIDFieldTypeAttributes {
  fieldSize: Int
}

type User {
  _description: String
  avatar: File
  createdAt: DateTime
  createdBy: User
  deletedAt: Int
  email: String
  firstName: String
  id: ID
  is8base: Boolean
  lastName: String
  origin: String
  permissions(filter: PermissionInputFilter): UserPermissionList
  roles(after: String, before: String, filter: RoleFilter, first: Int, groupBy: RoleGroupBy, last: Int, orderBy: [RoleOrderBy], skip: Int, sort: [RoleSort!]): RoleListResponse
  status: String
  timezone: String
  updatedAt: DateTime
}

type UserBillingConfigurationResponse {
  availablePlans: [BillingPlanBaseInfo!]!
  isCancelSubscriptionAvailable: Boolean! @deprecated(reason: "Flag is deprecated")
  isFreePlanAvailable: Boolean! @deprecated(reason: "Flag is deprecated")
}

"User Invitation Details"
type UserInvitationDetails {
  accepted: Boolean
  acceptedOn: DateTime
  apiHost: String
  email: String
  firstName: String
  id: String
  invitedBy: InvitedByName
  isRegistered: Boolean
  lastName: String
  resentOn: DateTime
}

"User Invitation List"
type UserInvitationList {
  count: Int
  items: [UserInvitationDetails]
}

"UserListResponse output"
type UserListResponse {
  "List items count"
  count: Int!
  "Aggregated items"
  groups: [GroupByResponse!]!
  "List items"
  items: [User!]!
}

"UserManyResponse output"
type UserManyResponse {
  "List items count"
  count: Int!
  "List items"
  items: [User!]!
}

"Users subscription payload"
type UserPayload {
  mutation: MutationType!
  node: User
  previousValues: User
  updatedFields: [String]
}

"User Permission"
type UserPermission {
  permission: JSON
  resource: String
  resourceType: String
}

"User Permission List"
type UserPermissionList {
  count: Int!
  items: [UserPermission!]
}

"View Attributes"
type ViewAttributes {
  query: String
}

type WorkspaceCreateResponse {
  description: String
  id: ID
  kind: String
  name: String
}

type WorkspaceImage {
  downloadUrl: String
  id: String
}

"LoginResponseWorkspace name and id"
type WorkspaceInfo {
  name: String
  workspace: ID
}

type WorkspaceItem {
  apiHost: String
  createdAt: DateTime
  description: String
  id: ID!
  image: WorkspaceImage
  isCiCdEnabled: Boolean
  isOwner: Boolean!
  kind: String
  lastAccess: DateTime
  name: String!
  nextPlan: BillingNextPlanResponse
  organization: SystemOrganizationBaseItem
  owner: SystemMemberAccountInfo
  plan: BillingCurrentPlanResponse
  region: String
  teamMemberCount: Int
  webSocket: String
}

"WorkspaceListResponse output"
type WorkspaceListResponse {
  "List items count"
  count: Int!
  "List items"
  items: [WorkspaceItem!]!
}

type WorkspaceUpdateResponse {
  description: String
  id: ID
  image: GraphQLFileItemResponse
  name: String
}

enum AggregationFunctionType {
  ANY_VALUE
  AVG
  COUNT
  GROUP_CONCAT
  MAX
  MIN
  STDDEV_POP
  STDDEV_SAMP
  SUM
  VAR_POP
  VAR_SAMP
}

"No longer supported. Use `sort` instead."
enum ApiTokenOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  token_ASC
  token_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"Application Status Enum"
enum ApplicationStatusEnum {
  ACTIVE
  INACTIVE
}

"No longer supported. Use `sort` instead."
enum AuthenticationProfileOrderBy {
  clientId_ASC
  clientId_DESC
  createdAt_ASC
  createdAt_DESC
  databaseName_ASC
  databaseName_DESC
  deletedAt_ASC
  deletedAt_DESC
  domain_ASC
  domain_DESC
  id_ASC
  id_DESC
  managementDomain_ASC
  managementDomain_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  selfSignUpEnabled_ASC
  selfSignUpEnabled_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum BillingDetailsOrigin {
  member
  organization
  workspace
}

enum BillingInvoicesListFilterType {
  CUSTOMER
  WORKSPACE
}

"No longer supported. Use `sort` instead."
enum BlogOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  orderDate_ASC
  orderDate_DESC
  slug_ASC
  slug_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"Computed field mode"
enum ComputedFieldMode {
  STORED
  VIRTUAL
}

"No longer supported. Use `sort` instead."
enum CourseOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  duration_ASC
  duration_DESC
  id_ASC
  id_DESC
  ratingUrl_ASC
  ratingUrl_DESC
  rating_ASC
  rating_DESC
  recommendationOrder_ASC
  recommendationOrder_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
  yearUpdated_ASC
  yearUpdated_DESC
}

"No longer supported. Use `sort` instead."
enum CourseUrlOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

enum DatePartFunctionType {
  DATE
  DAY
  DAY_NAME
  DAY_OF_MONTH
  DAY_OF_WEEK
  DAY_OF_YEAR
  HOUR
  LAST_DAY
  MICROSECOND
  MINUTE
  MONTH
  MONTH_NAME
  QUARTER
  SECOND
  TIME
  WEEK
  WEEK_DAY
  WEEK_OF_YEAR
  YEAR
  YEAR_WEEK
}

"Date Type Format Enum"
enum DateTypeFormatEnum {
  DATE
  DATETIME
}

enum DeployModeEnum {
  FULL
  FUNCTIONS
  MIGRATIONS
  ONLY_PLUGINS
  ONLY_PROJECT
}

enum DeployStatusEnum {
  compiling
  complete_error
  complete_success
  deploying
  initialize
  preparing
}

"No longer supported. Use `sort` instead."
enum EnvironmentVariableOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  value_ASC
  value_DESC
}

"Field types"
enum FieldType {
  DATE
  FILE
  GEO
  ID
  JSON
  MISSING_RELATION
  NUMBER
  ONE_WAY_RELATION
  RELATION
  SMART
  SWITCH
  TEXT
  UUID
}

"No longer supported. Use `sort` instead."
enum FileOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  downloadUrl_ASC
  downloadUrl_DESC
  fields_ASC
  fields_DESC
  fileId_ASC
  fileId_DESC
  filename_ASC
  filename_DESC
  id_ASC
  id_DESC
  meta_ASC
  meta_DESC
  mods_ASC
  mods_DESC
  provider_ASC
  provider_DESC
  public_ASC
  public_DESC
  shareUrl_ASC
  shareUrl_DESC
  updatedAt_ASC
  updatedAt_DESC
  uploadUrl_ASC
  uploadUrl_DESC
  uploaded_ASC
  uploaded_DESC
}

"File Type Format Enum"
enum FileTypeFormatEnum {
  FILE
  IMAGE
}

"No longer supported. Use `sort` instead."
enum FinanceRecordOrderBy {
  accountName_ASC
  accountName_DESC
  createdAt_ASC
  createdAt_DESC
  currentValue_ASC
  currentValue_DESC
  deletedAt_ASC
  deletedAt_DESC
  id_ASC
  id_DESC
  recordedDate_ASC
  recordedDate_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"FunctionInfoOrderBy"
enum FunctionInfoOrderBy {
  description_ASC
  description_DESC
  functionType_ASC
  functionType_DESC
  name_ASC
  name_DESC
}

"FunctionType"
enum FunctionType {
  resolver
  schedule
  task
  trigger
  webhook
}

"No longer supported. Use `sort` instead."
enum HabitOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  dueDate_ASC
  dueDate_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  recurInterval_ASC
  recurInterval_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"No longer supported. Use `sort` instead."
enum ImageOrderBy {
  altText_ASC
  altText_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  height_ASC
  height_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  width_ASC
  width_DESC
}

enum MutationType {
  create
  delete
  destroy
  update
}

enum NotificationStatusType {
  done
}

"Number Type Format Enum"
enum NumberTypeFormatEnum {
  CURRENCY
  FRACTION
  NUMBER
  PERCENTAGE
  SCIENTIFIC
}

enum PermissionResourceTypeEnum {
  custom
  data
}

"No longer supported. Use `sort` instead."
enum PersonOrderBy {
  birthday_ASC
  birthday_DESC
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  firstName_ASC
  firstName_DESC
  githubUrl_ASC
  githubUrl_DESC
  heightIn_ASC
  heightIn_DESC
  id_ASC
  id_DESC
  lastName_ASC
  lastName_DESC
  linkedinUrl_ASC
  linkedinUrl_DESC
  summary_ASC
  summary_DESC
  updatedAt_ASC
  updatedAt_DESC
  websiteUrl_ASC
  websiteUrl_DESC
  weightLbs_ASC
  weightLbs_DESC
}

"Relative Date Predicate Operation Enum"
enum RelativePredicateOpEnum {
  ADD
  SUB
}

"Relative Date Predicate Unit Enum"
enum RelativePredicateUnitEnum {
  DAY
  DAY_HOUR
  DAY_MICROSECOND
  DAY_MINUTE
  DAY_SECOND
  HOUR
  HOUR_MICROSECOND
  HOUR_MINUTE
  HOUR_SECOND
  MICROSECOND
  MINUTE
  MINUTE_MICROSECOND
  MINUTE_SECOND
  MONTH
  QUARTER
  SECOND
  SECOND_MICROSECOND
  WEEK
  YEAR
  YEAR_MONTH
}

"No longer supported. Use `sort` instead."
enum RoleOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  systemType_ASC
  systemType_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"Schema Origin Type Enum"
enum SchemaOriginType {
  LOCAL
  REMOTE
  VIEW
}

"No longer supported. Use `sort` instead."
enum SchoolOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

"No longer supported. Use `sort` instead."
enum SettingOrderBy {
  bgColor_ASC
  bgColor_DESC
  buttonLinkColor_ASC
  buttonLinkColor_DESC
  containerColor_ASC
  containerColor_DESC
  createdAt_ASC
  createdAt_DESC
  currency_ASC
  currency_DESC
  dateFormat_ASC
  dateFormat_DESC
  deletedAt_ASC
  deletedAt_DESC
  id_ASC
  id_DESC
  language_ASC
  language_DESC
  leftNavColor_ASC
  leftNavColor_DESC
  menuBarBGColor_ASC
  menuBarBGColor_DESC
  menuBarIconsColor_ASC
  menuBarIconsColor_DESC
  passwordMinLength_ASC
  passwordMinLength_DESC
  passwordRequireLowercase_ASC
  passwordRequireLowercase_DESC
  passwordRequireNumbers_ASC
  passwordRequireNumbers_DESC
  passwordRequireSpecial_ASC
  passwordRequireSpecial_DESC
  passwordRequireUppercase_ASC
  passwordRequireUppercase_DESC
  passwordUpdateInterval_ASC
  passwordUpdateInterval_DESC
  rememberDevice_ASC
  rememberDevice_DESC
  timezone_ASC
  timezone_DESC
  updatedAt_ASC
  updatedAt_DESC
  userInterfaceStyle_ASC
  userInterfaceStyle_DESC
  vanityUrl_ASC
  vanityUrl_DESC
}

"Smart Type Format Enum"
enum SmartTypeFormatEnum {
  ADDRESS
  PHONE
}

"SortOrder"
enum SortOrder {
  ASC
  DESC
}

enum StringTrimMode {
  BOTH
  LEADING
  TRAILING
}

"Switch Type Format Enum"
enum SwitchTypeFormatEnum {
  ACTIVE_INACTIVE
  CUSTOM
  HIGH_LOW
  ON_OFF
  TRUE_FALSE
  YES_NO
}

"Application Status Enum"
enum SystemApplicationStatusEnum {
  ACTIVE
  INACTIVE
}

enum SystemBillingDetailsOrigin {
  member
  organization
  workspace
}

enum SystemBillingInvoicesListFilterType {
  CUSTOMER
  WORKSPACE
}

enum SystemBranchEnvironmentMode {
  FULL
  SYSTEM
}

"Ci Commit Mode"
enum SystemCiCommitMode {
  FULL
  ONLY_MIGRATIONS
  ONLY_PROJECT
}

"Computed field mode"
enum SystemComputedFieldMode {
  STORED
  VIRTUAL
}

"Date Type Format Enum"
enum SystemDateTypeFormatEnum {
  DATE
  DATETIME
}

enum SystemDeployModeEnum {
  FULL
  FUNCTIONS
  MIGRATIONS
  ONLY_PLUGINS
  ONLY_PROJECT
}

enum SystemDeployStatusEnum {
  compiling
  complete_error
  complete_success
  deploying
  initialize
  preparing
}

"Field types"
enum SystemFieldType {
  DATE
  FILE
  GEO
  ID
  JSON
  MISSING_RELATION
  NUMBER
  ONE_WAY_RELATION
  RELATION
  SMART
  SWITCH
  TEXT
  UUID
}

"File Type Format Enum"
enum SystemFileTypeFormatEnum {
  FILE
  IMAGE
}

"FunctionInfoOrderBy"
enum SystemFunctionInfoOrderBy {
  description_ASC
  description_DESC
  functionType_ASC
  functionType_DESC
  name_ASC
  name_DESC
}

"FunctionType"
enum SystemFunctionType {
  resolver
  schedule
  task
  trigger
  webhook
}

enum SystemInboxEventStatusEnum {
  accepted
  declined
  sent
}

enum SystemInboxEventTypeEnum {
  EnvironmentInvitation
  Notification
  OrganizationInvitation
  WorkspaceTransfer
}

"Number Type Format Enum"
enum SystemNumberTypeFormatEnum {
  CURRENCY
  FRACTION
  NUMBER
  PERCENTAGE
  SCIENTIFIC
}

enum SystemOrganizationTypeEnum {
  agency
  community
  company
}

enum SystemPaymentDetailsOrigin {
  member
  organization
  workspace
}

"Schema Origin Type Enum"
enum SystemSchemaOriginType {
  LOCAL
  REMOTE
  VIEW
}

"Smart Type Format Enum"
enum SystemSmartTypeFormatEnum {
  ADDRESS
  PHONE
}

"Switch Type Format Enum"
enum SystemSwitchTypeFormatEnum {
  ACTIVE_INACTIVE
  CUSTOM
  HIGH_LOW
  ON_OFF
  TRUE_FALSE
  YES_NO
}

"Text Type Format Enum"
enum SystemTextTypeFormatEnum {
  EIN
  EMAIL
  HTML
  MARKDOWN
  NAME
  UNFORMATTED
}

enum SystemTransferParticipantType {
  account
  organization
}

"User Type"
enum SystemUserType {
  Agency
  MyOwn
  Team
}

"Workspace Kind"
enum SystemWorkspaceKind {
  frontend
  general
}

enum SystemWorkspaceStatus {
  active
  blocked
  canceled
  canceling
  pending
  suspended
}

enum TableIndexType {
  INDEX
  UNIQUE
}

"No longer supported. Use `sort` instead."
enum TechnologyLogoOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"Text Type Format Enum"
enum TextTypeFormatEnum {
  EIN
  EMAIL
  HTML
  MARKDOWN
  NAME
  UNFORMATTED
}

"No longer supported. Use `sort` instead."
enum UserOrderBy {
  createdAt_ASC
  createdAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  id_ASC
  id_DESC
  is8base_ASC
  is8base_DESC
  isOwner_ASC
  isOwner_DESC
  lastName_ASC
  lastName_DESC
  origin_ASC
  origin_DESC
  status_ASC
  status_DESC
  timezone_ASC
  timezone_DESC
  updatedAt_ASC
  updatedAt_DESC
}

"Workspace Kind"
enum WorkspaceKind {
  frontend
  general
}

enum WorkspaceStatus {
  active
  blocked
  canceled
  canceling
  pending
  suspended
}

"The `BigInt` scalar type represents whole numeric values."
scalar BigInt

"A date string, such as `2007-12-25`, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Date

"A date-time string at UTC, such as `2007-12-25T16:15:30Z`, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar DateTime

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

"A time string at UTC, such as `16:15:30Z`, compliant with the `full-time` format outlined in section 5.6 of the RFC 3339profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar."
scalar Time

"ApiTokens create input"
input ApiTokenCreateInput {
  name: String!
  roles: ApiTokensRolesRelationInput
}

"ApiTokens delete input"
input ApiTokenDeleteInput {
  force: Boolean
  id: ID
}

input ApiTokenFilter {
  AND: [ApiTokenFilter!]
  OR: [ApiTokenFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  id: IDPredicate
  name: StringPredicate
  roles: RoleRelationFilter
  token: StringPredicate
  updatedAt: DateTimePredicate
}

input ApiTokenGroupBy {
  first: Int
  having: Having
  last: Int
  query: ApiTokenGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input ApiTokenGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  id: [GroupByField!]
  name: [GroupByField!]
  roles: RoleGroupByQuery
  updatedAt: [GroupByField!]
}

input ApiTokenKeyFilter {
  id: ID
  name: String
}

input ApiTokenRelationFilter {
  every: ApiTokenFilter
  none: ApiTokenFilter
  some: ApiTokenFilter
}

input ApiTokenSort {
  createdAt: SortOrder
  createdBy: UserSort
  deletedAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

"ApiTokens subscription filter"
input ApiTokenSubscriptionFilter {
  mutation_in: [MutationType]
  node: ApiTokenFilter
  updatedFields: UpdatedFieldsFilter
}

"ApiTokens update input"
input ApiTokenUpdateByFilterInput {
  name: [UpdateByFilterStringInput]
  token: [UpdateByFilterStringInput]
}

"ApiTokens update input"
input ApiTokenUpdateInput {
  id: ID
  name: String
  roles: ApiTokensRolesUpdateRelationInput
}

input ApiToken_PermissionFilter {
  AND: [ApiToken_PermissionFilter!]
  OR: [ApiToken_PermissionFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  deletedAt: IntPredicate
  id: IDPredicate
  name: StringPredicate
  roles: Role_PermissionRelationFilter
  token: StringPredicate
  updatedAt: DateTimePredicate
}

input ApiToken_PermissionRelationFilter {
  every: ApiToken_PermissionFilter
  none: ApiToken_PermissionFilter
  some: ApiToken_PermissionFilter
}

"ApiTokens relation input"
input ApiTokensRolesRelationInput {
  connect: [RoleKeyFilter!]
  create: [ApiTokens_RoleCreateInput]
}

"ApiTokens relation input"
input ApiTokensRolesUpdateRelationInput {
  connect: [RoleKeyFilter!]
  create: [ApiTokens_RoleCreateInput]
  disconnect: [RoleKeyFilter!]
  reconnect: [RoleKeyFilter!]
  update: [ApiTokens_RoleUpdateInput]
}

"Roles create input from apiTokens"
input ApiTokens_RoleCreateInput {
  apiTokens: RolesApiTokensRelationInput
  authenticationProfiles: RolesAuthenticationProfilesRelationInput
  description: String
  name: String!
  permissions: PermissionsInput
  users: RolesUsersRelationInput
}

"Roles update input from apiTokens"
input ApiTokens_RoleUpdateInput {
  data: RoleUpdateInput!
  filter: RoleKeyFilter
}

"ApplicationDeleteMutationInput"
input ApplicationDeleteMutationInput {
  force: Boolean
  id: String!
}

"Application install input"
input ApplicationInstallInput {
  appType: String!
  description: String
  displayName: String
  name: String!
  status: ApplicationStatusEnum = INACTIVE
}

"Application update input"
input ApplicationUpdateInput {
  description: String
  displayName: String
  id: String!
  name: String
  status: ApplicationStatusEnum
}

"Authentication profile connection options input"
input AuthenticationProfileConnectionsOptionsInput {
  facebook: FacebookOptionsInput
  github: GithubOptionsInput
  google: GoogleOptionsInput
}

"AuthenticationProfiles create input"
input AuthenticationProfileCreateInput {
  audiences: [String]
  clientId: String
  databaseName: String
  domain: String
  managementDomain: String
  name: String!
  roles: AuthenticationProfilesRolesRelationInput
  secret: String
  selfSignUpEmailDomains: [String]
  selfSignUpEnabled: Boolean = false
  type: String = "8BASE"
}

"AuthenticationProfiles create many input"
input AuthenticationProfileCreateManyInput {
  audiences: [String]
  clientId: String
  databaseName: String
  domain: String
  managementDomain: String
  name: String!
  roles: AuthenticationProfilesRolesManyRelationInput
  secret: String
  selfSignUpEmailDomains: [String]
  selfSignUpEnabled: Boolean = false
  type: String = "8BASE"
}

"AuthenticationProfiles delete input"
input AuthenticationProfileDeleteInput {
  force: Boolean
  id: ID
}

input AuthenticationProfileFilter {
  AND: [AuthenticationProfileFilter!]
  OR: [AuthenticationProfileFilter!]
  _fullText: String
  clientId: StringPredicate
  createdAt: DateTimePredicate
  createdBy: UserFilter
  databaseName: StringPredicate
  deletedAt: IntPredicate
  domain: StringPredicate
  id: IDPredicate
  managementDomain: StringPredicate
  name: StringPredicate
  roles: RoleRelationFilter
  secret: StringPredicate
  selfSignUpEnabled: BoolPredicate
  type: StringPredicate
  updatedAt: DateTimePredicate
}

input AuthenticationProfileGroupBy {
  first: Int
  having: Having
  last: Int
  query: AuthenticationProfileGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input AuthenticationProfileGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  audiences: [GroupByField!]
  clientId: [GroupByField!]
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  databaseName: [GroupByField!]
  domain: [GroupByField!]
  id: [GroupByField!]
  managementDomain: [GroupByField!]
  name: [GroupByField!]
  roles: RoleGroupByQuery
  secret: [GroupByField!]
  selfSignUpEmailDomains: [GroupByField!]
  selfSignUpEnabled: [GroupByField!]
  type: [GroupByField!]
  updatedAt: [GroupByField!]
}

input AuthenticationProfileKeyFilter {
  id: ID
  name: String
}

input AuthenticationProfileRelationFilter {
  every: AuthenticationProfileFilter
  none: AuthenticationProfileFilter
  some: AuthenticationProfileFilter
}

input AuthenticationProfileSort {
  clientId: SortOrder
  createdAt: SortOrder
  createdBy: UserSort
  databaseName: SortOrder
  deletedAt: SortOrder
  domain: SortOrder
  id: SortOrder
  managementDomain: SortOrder
  name: SortOrder
  secret: SortOrder
  selfSignUpEnabled: SortOrder
  type: SortOrder
  updatedAt: SortOrder
}

"AuthenticationProfiles subscription filter"
input AuthenticationProfileSubscriptionFilter {
  mutation_in: [MutationType]
  node: AuthenticationProfileFilter
  updatedFields: UpdatedFieldsFilter
}

"AuthenticationProfiles update input"
input AuthenticationProfileUpdateByFilterInput {
  audiences: [UpdateByFilterListStringInput]
  clientId: [UpdateByFilterStringInput]
  databaseName: [UpdateByFilterStringInput]
  domain: [UpdateByFilterStringInput]
  managementDomain: [UpdateByFilterStringInput]
  name: [UpdateByFilterStringInput]
  secret: [UpdateByFilterStringInput]
  selfSignUpEmailDomains: [UpdateByFilterListStringInput]
  selfSignUpEnabled: [UpdateByFilterBooleanSwitchInput]
  type: [UpdateByFilterStringInput]
}

"AuthenticationProfiles update input"
input AuthenticationProfileUpdateInput {
  audiences: [String]
  clientId: String
  databaseName: String
  domain: String
  id: ID
  managementDomain: String
  name: String
  roles: AuthenticationProfilesRolesUpdateRelationInput
  secret: String
  selfSignUpEmailDomains: [String]
  selfSignUpEnabled: Boolean
  type: String
}

input AuthenticationProfile_PermissionFilter {
  AND: [AuthenticationProfile_PermissionFilter!]
  OR: [AuthenticationProfile_PermissionFilter!]
  _fullText: String
  clientId: StringPredicate
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  databaseName: StringPredicate
  deletedAt: IntPredicate
  domain: StringPredicate
  id: IDPredicate
  managementDomain: StringPredicate
  name: StringPredicate
  roles: Role_PermissionRelationFilter
  secret: StringPredicate
  selfSignUpEnabled: BoolPredicate
  type: StringPredicate
  updatedAt: DateTimePredicate
}

input AuthenticationProfile_PermissionRelationFilter {
  every: AuthenticationProfile_PermissionFilter
  none: AuthenticationProfile_PermissionFilter
  some: AuthenticationProfile_PermissionFilter
}

"AuthenticationProfiles relation input"
input AuthenticationProfilesRolesManyRelationInput {
  connect: [RoleKeyFilter!]
}

"AuthenticationProfiles relation input"
input AuthenticationProfilesRolesRelationInput {
  connect: [RoleKeyFilter!]
  create: [AuthenticationProfiles_RoleCreateInput]
}

"AuthenticationProfiles relation input"
input AuthenticationProfilesRolesUpdateRelationInput {
  connect: [RoleKeyFilter!]
  create: [AuthenticationProfiles_RoleCreateInput]
  disconnect: [RoleKeyFilter!]
  reconnect: [RoleKeyFilter!]
  update: [AuthenticationProfiles_RoleUpdateInput]
}

"Roles create input from authenticationProfiles"
input AuthenticationProfiles_RoleCreateInput {
  apiTokens: RolesApiTokensRelationInput
  authenticationProfiles: RolesAuthenticationProfilesRelationInput
  description: String
  name: String!
  permissions: PermissionsInput
  users: RolesUsersRelationInput
}

"Roles update input from authenticationProfiles"
input AuthenticationProfiles_RoleUpdateInput {
  data: RoleUpdateInput!
  filter: RoleKeyFilter
}

input AuthenticationSettingFilter {
  AND: [AuthenticationSettingFilter!]
  OR: [AuthenticationSettingFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  updatedAt: DateTimePredicate
}

"AuthenticationSettings subscription filter"
input AuthenticationSettingSubscriptionFilter {
  mutation_in: [MutationType]
  node: AuthenticationSettingFilter
  updatedFields: UpdatedFieldsFilter
}

"AuthenticationSettings update input"
input AuthenticationSettingUpdateInput {
  allowedCallbacks: [String]
  allowedLogouts: [String]
  allowedWebOrigins: [String]
  connections: AuthenticationProfileConnectionsOptionsInput
}

"Blog create input from authors"
input Authors_BlogCreateInput {
  authors: BlogAuthorsRelationInput
  description: String!
  featuredImage: BlogFeaturedImageRelationInput
  "The date that determines which order blogs will display in. Change this on update if it needs to go to the top of the list. Or use it to schedule posts for the future."
  orderDate: DateTime!
  slug: String
  title: String!
}

"Blog update input from authors"
input Authors_BlogUpdateInput {
  data: BlogUpdateInput!
  filter: BlogKeyFilter
}

"Users create input from avatar"
input Avatar_UserCreateInput {
  avatar: UsersAvatarRelationInput
  email: String!
  firstName: String
  lastName: String
  roles: UsersRolesRelationInput
  status: String = "inactive"
  timezone: String
}

"Users update input from avatar"
input Avatar_UserUpdateInput {
  data: UserUpdateInput!
  filter: UserKeyFilter
}

input BigIntPredicateHaving {
  AND: [BigIntPredicateHaving!]
  OR: [BigIntPredicateHaving!]
  equals: BigInt
  gt: BigInt
  gte: BigInt
  in: [BigInt!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: BigInt
  lte: BigInt
  not_equals: BigInt
  not_in: [BigInt!]
}

"BillingDetailsUpdateMutationInput"
input BillingDetailsUpdateMutationInput {
  cardToken: String!
}

input BillingMetricUsagesListFilter {
  entryDate: DateTimePredicate!
}

"BillingPlanUpdateMutationInput"
input BillingPlanUpdateMutationInput {
  planId: ID!
}

"Blog relation input"
input BlogAuthorsManyRelationInput {
  connect: [PersonKeyFilter!]
}

"Blog relation input"
input BlogAuthorsRelationInput {
  connect: [PersonKeyFilter!]
  create: [Blogs_PersonCreateInput]
}

"Blog relation input"
input BlogAuthorsUpdateRelationInput {
  connect: [PersonKeyFilter!]
  create: [Blogs_PersonCreateInput]
  disconnect: [PersonKeyFilter!]
  reconnect: [PersonKeyFilter!]
  update: [Blogs_PersonUpdateInput]
}

"Blog create input"
input BlogCreateInput {
  authors: BlogAuthorsRelationInput
  description: String!
  featuredImage: BlogFeaturedImageRelationInput
  "The date that determines which order blogs will display in. Change this on update if it needs to go to the top of the list. Or use it to schedule posts for the future."
  orderDate: DateTime!
  slug: String
  title: String!
}

"Blog create many input"
input BlogCreateManyInput {
  authors: BlogAuthorsManyRelationInput
  description: String!
  featuredImage: BlogFeaturedImageManyRelationInput!
  "The date that determines which order blogs will display in. Change this on update if it needs to go to the top of the list. Or use it to schedule posts for the future."
  orderDate: DateTime!
  slug: String
  title: String!
}

"Blog delete input"
input BlogDeleteInput {
  force: Boolean
  id: ID
}

"Blog relation input"
input BlogFeaturedImageManyRelationInput {
  connect: ImageKeyFilter
}

"Blog relation input"
input BlogFeaturedImageRelationInput {
  connect: ImageKeyFilter
  create: Blogs_ImageCreateInput
}

"Blog relation input"
input BlogFeaturedImageUpdateRelationInput {
  connect: ImageKeyFilter
  create: Blogs_ImageCreateInput
  disconnect: ImageKeyFilter
  reconnect: ImageKeyFilter
  update: Blogs_ImageUpdateInput
}

"BlogFieldsPermissions create input"
input BlogFieldsPermissions {
  createdAt: Boolean
  description: Boolean
  orderDate: Boolean
  slug: Boolean
  title: Boolean
  updatedAt: Boolean
}

input BlogFilter {
  AND: [BlogFilter!]
  OR: [BlogFilter!]
  _fullText: String
  authors: PersonRelationFilter
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  description: StringPredicate
  featuredImage: ImageFilter
  id: IDPredicate
  orderDate: DateTimePredicate
  slug: StringPredicate
  title: StringPredicate
  updatedAt: DateTimePredicate
}

input BlogGroupBy {
  first: Int
  having: Having
  last: Int
  query: BlogGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input BlogGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  authors: PersonGroupByQuery
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  description: [GroupByField!]
  featuredImage: ImageGroupByQuery
  id: [GroupByField!]
  orderDate: [GroupByField!]
  slug: [GroupByField!]
  title: [GroupByField!]
  updatedAt: [GroupByField!]
}

input BlogKeyFilter {
  id: ID
  slug: String
}

input BlogRelationFilter {
  every: BlogFilter
  none: BlogFilter
  some: BlogFilter
}

input BlogSort {
  createdAt: SortOrder
  createdBy: UserSort
  deletedAt: SortOrder
  description: SortOrder
  featuredImage: ImageSort
  id: SortOrder
  orderDate: SortOrder
  slug: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

"Blog subscription filter"
input BlogSubscriptionFilter {
  mutation_in: [MutationType]
  node: BlogFilter
  updatedFields: UpdatedFieldsFilter
}

"Blog update input"
input BlogUpdateByFilterInput {
  description: [UpdateByFilterStringInput]
  orderDate: [UpdateByFilterDateTimeInput]
  slug: [UpdateByFilterStringInput]
  title: [UpdateByFilterStringInput]
}

"Blog update input"
input BlogUpdateInput {
  authors: BlogAuthorsUpdateRelationInput
  description: String
  featuredImage: BlogFeaturedImageUpdateRelationInput
  id: ID
  "The date that determines which order blogs will display in. Change this on update if it needs to go to the top of the list. Or use it to schedule posts for the future."
  orderDate: DateTime
  slug: String
  title: String
}

input Blog_PermissionFilter {
  AND: [Blog_PermissionFilter!]
  OR: [Blog_PermissionFilter!]
  _fullText: String
  authors: Person_PermissionRelationFilter
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  deletedAt: IntPredicate
  description: StringPredicate
  featuredImage: Image_PermissionFilter
  id: IDPredicate
  orderDate: DateTimePredicate
  slug: StringPredicate
  title: StringPredicate
  updatedAt: DateTimePredicate
}

input Blog_PermissionRelationFilter {
  every: Blog_PermissionFilter
  none: Blog_PermissionFilter
  some: Blog_PermissionFilter
}

"Image create input from blogs"
input Blogs_ImageCreateInput {
  altText: String!
  blogs: ImageBlogsRelationInput
  height: Int!
  image: ImageImageRelationInput
  person: ImagePersonRelationInput
  schools: ImageSchoolsRelationInput
  technologyLogos: ImageTechnologyLogosRelationInput
  width: Int!
}

"Image update input from blogs"
input Blogs_ImageUpdateInput {
  altText: String
  blogs: ImageBlogsUpdateRelationInput
  height: Int
  image: ImageImageUpdateRelationInput
  person: ImagePersonUpdateRelationInput
  schools: ImageSchoolsUpdateRelationInput
  technologyLogos: ImageTechnologyLogosUpdateRelationInput
  width: Int
}

"Person create input from blogs"
input Blogs_PersonCreateInput {
  birthday: Date
  blogs: PersonBlogsRelationInput
  courses: PersonCoursesRelationInput
  firstName: String!
  githubUrl: String
  heightIn: Float
  image: PersonImageRelationInput
  lastName: String!
  linkedinUrl: String
  summary: String
  websiteUrl: String
  weightLbs: Float
}

"Person update input from blogs"
input Blogs_PersonUpdateInput {
  data: PersonUpdateInput!
  filter: PersonKeyFilter
}

input BoolPredicate {
  equals: Boolean
  is_empty: Boolean
  is_not_empty: Boolean
  not_equals: Boolean
}

input BoolPredicateHaving {
  AND: [BoolPredicateHaving!]
  OR: [BoolPredicateHaving!]
  equals: Boolean
  is_empty: Boolean
  is_not_empty: Boolean
  not_equals: Boolean
}

"ChangePasswordInput"
input ChangePasswordInput {
  authProfileId: ID!
  email: String!
  newPassword: String!
  oldPassword: String!
  refreshToken: String!
}

"Course relation input"
input CourseCourseUrlsManyRelationInput {
  connect: [CourseUrlKeyFilter!]
}

"Course relation input"
input CourseCourseUrlsRelationInput {
  connect: [CourseUrlKeyFilter!]
  create: [Course_CourseUrlCreateInput]
}

"Course relation input"
input CourseCourseUrlsUpdateRelationInput {
  connect: [CourseUrlKeyFilter!]
  create: [Course_CourseUrlCreateInput]
  disconnect: [CourseUrlKeyFilter!]
  reconnect: [CourseUrlKeyFilter!]
  update: [Course_CourseUrlUpdateInput]
}

"Course create input"
input CourseCreateInput {
  courseUrls: CourseCourseUrlsRelationInput
  duration: Float
  instructors: CourseInstructorsRelationInput
  rating: Int!
  ratingUrl: String
  recommendationOrder: Int
  school: CourseSchoolRelationInput
  title: String!
  yearUpdated: Int
}

"Course create many input"
input CourseCreateManyInput {
  courseUrls: CourseCourseUrlsManyRelationInput
  duration: Float
  instructors: CourseInstructorsManyRelationInput
  rating: Int!
  ratingUrl: String
  recommendationOrder: Int
  school: CourseSchoolManyRelationInput!
  title: String!
  yearUpdated: Int
}

"Course delete input"
input CourseDeleteInput {
  force: Boolean
  id: ID
}

"CourseFieldsPermissions create input"
input CourseFieldsPermissions {
  createdAt: Boolean
  duration: Boolean
  rating: Boolean
  ratingUrl: Boolean
  recommendationOrder: Boolean
  title: Boolean
  updatedAt: Boolean
  yearUpdated: Boolean
}

input CourseFilter {
  AND: [CourseFilter!]
  OR: [CourseFilter!]
  _fullText: String
  courseUrls: CourseUrlRelationFilter
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  duration: FloatPredicate
  id: IDPredicate
  instructors: PersonRelationFilter
  rating: IntPredicate
  ratingUrl: StringPredicate
  recommendationOrder: IntPredicate
  school: SchoolFilter
  title: StringPredicate
  updatedAt: DateTimePredicate
  yearUpdated: IntPredicate
}

input CourseGroupBy {
  first: Int
  having: Having
  last: Int
  query: CourseGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input CourseGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  courseUrls: CourseUrlGroupByQuery
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  duration: [GroupByField!]
  id: [GroupByField!]
  instructors: PersonGroupByQuery
  rating: [GroupByField!]
  ratingUrl: [GroupByField!]
  recommendationOrder: [GroupByField!]
  school: SchoolGroupByQuery
  title: [GroupByField!]
  updatedAt: [GroupByField!]
  yearUpdated: [GroupByField!]
}

"Course relation input"
input CourseInstructorsManyRelationInput {
  connect: [PersonKeyFilter!]
}

"Course relation input"
input CourseInstructorsRelationInput {
  connect: [PersonKeyFilter!]
  create: [Courses_PersonCreateInput]
}

"Course relation input"
input CourseInstructorsUpdateRelationInput {
  connect: [PersonKeyFilter!]
  create: [Courses_PersonCreateInput]
  disconnect: [PersonKeyFilter!]
  reconnect: [PersonKeyFilter!]
  update: [Courses_PersonUpdateInput]
}

input CourseKeyFilter {
  id: ID
  ratingUrl: String
  recommendationOrder: Int
  title: String
}

input CourseRelationFilter {
  every: CourseFilter
  none: CourseFilter
  some: CourseFilter
}

"Course relation input"
input CourseSchoolManyRelationInput {
  connect: SchoolKeyFilter
}

"Course relation input"
input CourseSchoolRelationInput {
  connect: SchoolKeyFilter
  create: Courses_SchoolCreateInput
}

"Course relation input"
input CourseSchoolUpdateRelationInput {
  connect: SchoolKeyFilter
  create: Courses_SchoolCreateInput
  disconnect: SchoolKeyFilter
  reconnect: SchoolKeyFilter
  update: Courses_SchoolUpdateInput
}

input CourseSort {
  createdAt: SortOrder
  createdBy: UserSort
  deletedAt: SortOrder
  duration: SortOrder
  id: SortOrder
  rating: SortOrder
  ratingUrl: SortOrder
  recommendationOrder: SortOrder
  school: SchoolSort
  title: SortOrder
  updatedAt: SortOrder
  yearUpdated: SortOrder
}

"Course subscription filter"
input CourseSubscriptionFilter {
  mutation_in: [MutationType]
  node: CourseFilter
  updatedFields: UpdatedFieldsFilter
}

"Course update input"
input CourseUpdateByFilterInput {
  duration: [UpdateByFilterFloatInput]
  rating: [UpdateByFilterIntInput]
  ratingUrl: [UpdateByFilterStringInput]
  recommendationOrder: [UpdateByFilterIntInput]
  title: [UpdateByFilterStringInput]
  yearUpdated: [UpdateByFilterIntInput]
}

"Course update input"
input CourseUpdateInput {
  courseUrls: CourseCourseUrlsUpdateRelationInput
  duration: Float
  id: ID
  instructors: CourseInstructorsUpdateRelationInput
  rating: Int
  ratingUrl: String
  recommendationOrder: Int
  school: CourseSchoolUpdateRelationInput
  title: String
  yearUpdated: Int
}

"CourseUrl relation input"
input CourseUrlCourseManyRelationInput {
  connect: CourseKeyFilter
}

"CourseUrl relation input"
input CourseUrlCourseRelationInput {
  connect: CourseKeyFilter
  create: CourseUrls_CourseCreateInput
}

"CourseUrl relation input"
input CourseUrlCourseUpdateRelationInput {
  connect: CourseKeyFilter
  create: CourseUrls_CourseCreateInput
  disconnect: CourseKeyFilter
  reconnect: CourseKeyFilter
  update: CourseUrls_CourseUpdateInput
}

"CourseUrl create input"
input CourseUrlCreateInput {
  course: CourseUrlCourseRelationInput
  school: CourseUrlSchoolRelationInput
  url: String!
}

"CourseUrl create many input"
input CourseUrlCreateManyInput {
  course: CourseUrlCourseManyRelationInput!
  school: CourseUrlSchoolManyRelationInput!
  url: String!
}

"CourseUrl delete input"
input CourseUrlDeleteInput {
  force: Boolean
  id: ID
}

"CourseUrlFieldsPermissions create input"
input CourseUrlFieldsPermissions {
  createdAt: Boolean
  updatedAt: Boolean
  url: Boolean
}

input CourseUrlFilter {
  AND: [CourseUrlFilter!]
  OR: [CourseUrlFilter!]
  _fullText: String
  course: CourseFilter
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  id: IDPredicate
  school: SchoolFilter
  updatedAt: DateTimePredicate
  url: StringPredicate
}

input CourseUrlGroupBy {
  first: Int
  having: Having
  last: Int
  query: CourseUrlGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input CourseUrlGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  course: CourseGroupByQuery
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  id: [GroupByField!]
  school: SchoolGroupByQuery
  updatedAt: [GroupByField!]
  url: [GroupByField!]
}

input CourseUrlKeyFilter {
  id: ID
  url: String
}

input CourseUrlRelationFilter {
  every: CourseUrlFilter
  none: CourseUrlFilter
  some: CourseUrlFilter
}

"CourseUrl relation input"
input CourseUrlSchoolManyRelationInput {
  connect: SchoolKeyFilter
}

"CourseUrl relation input"
input CourseUrlSchoolRelationInput {
  connect: SchoolKeyFilter
  create: CourseUrls_SchoolCreateInput
}

"CourseUrl relation input"
input CourseUrlSchoolUpdateRelationInput {
  connect: SchoolKeyFilter
  create: CourseUrls_SchoolCreateInput
  disconnect: SchoolKeyFilter
  reconnect: SchoolKeyFilter
  update: CourseUrls_SchoolUpdateInput
}

input CourseUrlSort {
  course: CourseSort
  createdAt: SortOrder
  createdBy: UserSort
  deletedAt: SortOrder
  id: SortOrder
  school: SchoolSort
  updatedAt: SortOrder
  url: SortOrder
}

"CourseUrl subscription filter"
input CourseUrlSubscriptionFilter {
  mutation_in: [MutationType]
  node: CourseUrlFilter
  updatedFields: UpdatedFieldsFilter
}

"CourseUrl update input"
input CourseUrlUpdateByFilterInput {
  url: [UpdateByFilterStringInput]
}

"CourseUrl update input"
input CourseUrlUpdateInput {
  course: CourseUrlCourseUpdateRelationInput
  id: ID
  school: CourseUrlSchoolUpdateRelationInput
  url: String
}

input CourseUrl_PermissionFilter {
  AND: [CourseUrl_PermissionFilter!]
  OR: [CourseUrl_PermissionFilter!]
  _fullText: String
  course: Course_PermissionFilter
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  deletedAt: IntPredicate
  id: IDPredicate
  school: School_PermissionFilter
  updatedAt: DateTimePredicate
  url: StringPredicate
}

input CourseUrl_PermissionRelationFilter {
  every: CourseUrl_PermissionFilter
  none: CourseUrl_PermissionFilter
  some: CourseUrl_PermissionFilter
}

"Course create input from courseUrls"
input CourseUrls_CourseCreateInput {
  courseUrls: CourseCourseUrlsRelationInput
  duration: Float
  instructors: CourseInstructorsRelationInput
  rating: Int!
  ratingUrl: String
  recommendationOrder: Int
  school: CourseSchoolRelationInput
  title: String!
  yearUpdated: Int
}

"Course update input from courseUrls"
input CourseUrls_CourseUpdateInput {
  courseUrls: CourseCourseUrlsUpdateRelationInput
  duration: Float
  instructors: CourseInstructorsUpdateRelationInput
  rating: Int
  ratingUrl: String
  recommendationOrder: Int
  school: CourseSchoolUpdateRelationInput
  title: String
  yearUpdated: Int
}

"School create input from courseUrls"
input CourseUrls_SchoolCreateInput {
  courseUrls: SchoolCourseUrlsRelationInput
  courses: SchoolCoursesRelationInput
  description: String
  image: SchoolImageRelationInput
  name: String!
  url: String!
}

"School update input from courseUrls"
input CourseUrls_SchoolUpdateInput {
  courseUrls: SchoolCourseUrlsUpdateRelationInput
  courses: SchoolCoursesUpdateRelationInput
  description: String
  image: SchoolImageUpdateRelationInput
  name: String
  url: String
}

"CourseUrl create input from course"
input Course_CourseUrlCreateInput {
  course: CourseUrlCourseRelationInput
  school: CourseUrlSchoolRelationInput
  url: String!
}

"CourseUrl update input from course"
input Course_CourseUrlUpdateInput {
  data: CourseUrlUpdateInput!
  filter: CourseUrlKeyFilter
}

input Course_PermissionFilter {
  AND: [Course_PermissionFilter!]
  OR: [Course_PermissionFilter!]
  _fullText: String
  courseUrls: CourseUrl_PermissionRelationFilter
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  deletedAt: IntPredicate
  duration: FloatPredicate
  id: IDPredicate
  instructors: Person_PermissionRelationFilter
  rating: IntPredicate
  ratingUrl: StringPredicate
  recommendationOrder: IntPredicate
  school: School_PermissionFilter
  title: StringPredicate
  updatedAt: DateTimePredicate
  yearUpdated: IntPredicate
}

input Course_PermissionRelationFilter {
  every: Course_PermissionFilter
  none: Course_PermissionFilter
  some: Course_PermissionFilter
}

"Person create input from courses"
input Courses_PersonCreateInput {
  birthday: Date
  blogs: PersonBlogsRelationInput
  courses: PersonCoursesRelationInput
  firstName: String!
  githubUrl: String
  heightIn: Float
  image: PersonImageRelationInput
  lastName: String!
  linkedinUrl: String
  summary: String
  websiteUrl: String
  weightLbs: Float
}

"Person update input from courses"
input Courses_PersonUpdateInput {
  data: PersonUpdateInput!
  filter: PersonKeyFilter
}

"School create input from courses"
input Courses_SchoolCreateInput {
  courseUrls: SchoolCourseUrlsRelationInput
  courses: SchoolCoursesRelationInput
  description: String
  image: SchoolImageRelationInput
  name: String!
  url: String!
}

"School update input from courses"
input Courses_SchoolUpdateInput {
  courseUrls: SchoolCourseUrlsUpdateRelationInput
  courses: SchoolCoursesUpdateRelationInput
  description: String
  image: SchoolImageUpdateRelationInput
  name: String
  url: String
}

input DatePredicate {
  equals: Date
  gt: Date
  gte: Date
  in: [Date!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: Date
  lte: Date
  not_equals: Date
  not_in: [Date!]
  relative: DateRelativePredicates
}

input DatePredicateHaving {
  AND: [DatePredicateHaving!]
  OR: [DatePredicateHaving!]
  equals: Date
  gt: Date
  gte: Date
  in: [Date!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: Date
  lte: Date
  not_equals: Date
  not_in: [Date!]
}

input DateRelativePredicateType {
  op: RelativePredicateOpEnum
  unit: RelativePredicateUnitEnum
  value: String!
}

input DateRelativePredicates {
  gt: DateRelativePredicateType
  gte: DateRelativePredicateType
  lt: DateRelativePredicateType
  lte: DateRelativePredicateType
}

input DateTimePredicate {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: DateTime
  lte: DateTime
  not_equals: DateTime
  not_in: [DateTime!]
  relative: DateRelativePredicates
}

input DateTimePredicateHaving {
  AND: [DateTimePredicateHaving!]
  OR: [DateTimePredicateHaving!]
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: DateTime
  lte: DateTime
  not_equals: DateTime
  not_in: [DateTime!]
}

"DeployOptions"
input DeployOptions {
  extensionNames: [String]
  mode: DeployModeEnum = ONLY_PROJECT
  pluginNames: [String]
}

"DeployingBuildInput"
input DeployingBuildInput {
  buildName: String!
  options: DeployOptions
}

"EnvironmentSetupInput"
input EnvironmentSetupInput {
  deleteLock: Boolean
}

"EnvironmentVariables create input"
input EnvironmentVariableCreateInput {
  name: String!
  value: String!
}

"EnvironmentVariables create many input"
input EnvironmentVariableCreateManyInput {
  name: String!
  value: String!
}

"EnvironmentVariables delete input"
input EnvironmentVariableDeleteInput {
  force: Boolean
  id: ID
}

input EnvironmentVariableFilter {
  AND: [EnvironmentVariableFilter!]
  OR: [EnvironmentVariableFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  id: IDPredicate
  name: StringPredicate
  updatedAt: DateTimePredicate
  value: StringPredicate
}

input EnvironmentVariableGroupBy {
  first: Int
  having: Having
  last: Int
  query: EnvironmentVariableGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input EnvironmentVariableGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  id: [GroupByField!]
  name: [GroupByField!]
  updatedAt: [GroupByField!]
  value: [GroupByField!]
}

input EnvironmentVariableKeyFilter {
  id: ID
  name: String
}

input EnvironmentVariableSort {
  createdAt: SortOrder
  createdBy: UserSort
  deletedAt: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
  value: SortOrder
}

"EnvironmentVariables subscription filter"
input EnvironmentVariableSubscriptionFilter {
  mutation_in: [MutationType]
  node: EnvironmentVariableFilter
  updatedFields: UpdatedFieldsFilter
}

"EnvironmentVariables update input"
input EnvironmentVariableUpdateByFilterInput {
  name: [UpdateByFilterStringInput]
  value: [UpdateByFilterStringInput]
}

"EnvironmentVariables update input"
input EnvironmentVariableUpdateInput {
  id: ID
  name: String
  value: String
}

"Facebook connection params input"
input FacebookOptionsInput {
  app_id: String!
  app_secret: String!
  enabled: Boolean!
}

"Blog create input from featuredImage"
input FeaturedImage_BlogCreateInput {
  authors: BlogAuthorsRelationInput
  description: String!
  featuredImage: BlogFeaturedImageRelationInput
  "The date that determines which order blogs will display in. Change this on update if it needs to go to the top of the list. Or use it to schedule posts for the future."
  orderDate: DateTime!
  slug: String
  title: String!
}

"Blog update input from featuredImage"
input FeaturedImage_BlogUpdateInput {
  data: BlogUpdateInput!
  filter: BlogKeyFilter
}

"Field Type Attributes Input"
input FieldTypeAttributesInput {
  autoIncrement: Boolean
  currency: String
  expiration: Int
  fieldSize: Int
  format: String
  isBigInt: Boolean
  listOptions: [String!]
  maxSize: Int
  maxValue: Float
  minValue: Float
  precision: Int
  srid: Int
  typeRestrictions: [String!]
}

"Files create input"
input FileCreateInput {
  fileId: String
  filename: String
  image_image: FilesImage_imageRelationInput
  meta: JSON
  mods: JSON
  public: Boolean = false
  users_avatar: FilesUsers_avatarRelationInput
}

"Files create many input"
input FileCreateManyInput {
  fileId: String
  filename: String
  image_image: FilesImage_imageManyRelationInput
  meta: JSON
  mods: JSON
  public: Boolean = false
  users_avatar: FilesUsers_avatarManyRelationInput
}

"Files delete input"
input FileDeleteInput {
  force: Boolean
  id: ID
}

"FileFieldsPermissions create input"
input FileFieldsPermissions {
  createdAt: Boolean
  downloadUrl: Boolean
  fields: Boolean
  fileId: Boolean
  filename: Boolean
  meta: Boolean
  mods: Boolean
  provider: Boolean
  public: Boolean
  shareUrl: Boolean
  updatedAt: Boolean
  uploadUrl: Boolean
  uploaded: Boolean
}

input FileFilter {
  AND: [FileFilter!]
  OR: [FileFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  downloadUrl: StringPredicate
  fileId: StringPredicate
  filename: StringPredicate
  id: IDPredicate
  image_image: ImageRelationFilter
  provider: StringPredicate
  public: BoolPredicate
  settings_landingPageImage: SettingRelationFilter
  settings_menuBarLogo: SettingRelationFilter
  shareUrl: StringPredicate
  updatedAt: DateTimePredicate
  uploadUrl: StringPredicate
  uploaded: BoolPredicate
  users_avatar: UserRelationFilter
}

input FileGroupBy {
  first: Int
  having: Having
  last: Int
  query: FileGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input FileGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  downloadUrl: [GroupByField!]
  fields: [GroupByField!]
  fileId: [GroupByField!]
  filename: [GroupByField!]
  id: [GroupByField!]
  image_image: ImageGroupByQuery
  meta: [GroupByField!]
  mods: [GroupByField!]
  provider: [GroupByField!]
  public: [GroupByField!]
  settings_landingPageImage: SettingGroupByQuery
  settings_menuBarLogo: SettingGroupByQuery
  shareUrl: [GroupByField!]
  updatedAt: [GroupByField!]
  uploadUrl: [GroupByField!]
  uploaded: [GroupByField!]
  users_avatar: UserGroupByQuery
}

input FileKeyFilter {
  fileId: String
  id: ID
}

input FileSort {
  createdAt: SortOrder
  createdBy: UserSort
  deletedAt: SortOrder
  downloadUrl: SortOrder
  fileId: SortOrder
  filename: SortOrder
  id: SortOrder
  provider: SortOrder
  public: SortOrder
  shareUrl: SortOrder
  updatedAt: SortOrder
  uploadUrl: SortOrder
  uploaded: SortOrder
}

"Files subscription filter"
input FileSubscriptionFilter {
  mutation_in: [MutationType]
  node: FileFilter
  updatedFields: UpdatedFieldsFilter
}

"Files update input"
input FileUpdateByFilterInput {
  downloadUrl: [UpdateByFilterStringInput]
  fields: [UpdateByFilterJsonInput]
  filename: [UpdateByFilterStringInput]
  meta: [UpdateByFilterJsonInput]
  mods: [UpdateByFilterJsonInput]
  provider: [UpdateByFilterStringInput]
  public: [UpdateByFilterBooleanSwitchInput]
  shareUrl: [UpdateByFilterStringInput]
  uploadUrl: [UpdateByFilterStringInput]
  uploaded: [UpdateByFilterBooleanSwitchInput]
}

"Files update input"
input FileUpdateInput {
  fileId: String
  filename: String
  id: ID
  image_image: FilesImage_imageUpdateRelationInput
  meta: JSON
  mods: JSON
  public: Boolean
  users_avatar: FilesUsers_avatarUpdateRelationInput
}

input File_PermissionFilter {
  AND: [File_PermissionFilter!]
  OR: [File_PermissionFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  deletedAt: IntPredicate
  downloadUrl: StringPredicate
  fileId: StringPredicate
  filename: StringPredicate
  id: IDPredicate
  image_image: Image_PermissionRelationFilter
  provider: StringPredicate
  public: BoolPredicate
  settings_landingPageImage: Setting_PermissionRelationFilter
  settings_menuBarLogo: Setting_PermissionRelationFilter
  shareUrl: StringPredicate
  updatedAt: DateTimePredicate
  uploadUrl: StringPredicate
  uploaded: BoolPredicate
  users_avatar: User_PermissionRelationFilter
}

"Files relation input"
input FilesImage_imageManyRelationInput {
  connect: [ImageKeyFilter!]
}

"Files relation input"
input FilesImage_imageRelationInput {
  connect: [ImageKeyFilter!]
  create: [Image_ImageCreateInput]
}

"Files relation input"
input FilesImage_imageUpdateRelationInput {
  connect: [ImageKeyFilter!]
  create: [Image_ImageCreateInput]
  disconnect: [ImageKeyFilter!]
  reconnect: [ImageKeyFilter!]
  update: [Image_ImageUpdateInput]
}

"Files relation input"
input FilesUsers_avatarManyRelationInput {
  connect: [UserKeyFilter!]
}

"Files relation input"
input FilesUsers_avatarRelationInput {
  connect: [UserKeyFilter!]
  create: [Avatar_UserCreateInput]
}

"Files relation input"
input FilesUsers_avatarUpdateRelationInput {
  connect: [UserKeyFilter!]
  create: [Avatar_UserCreateInput]
  disconnect: [UserKeyFilter!]
  reconnect: [UserKeyFilter!]
  update: [Avatar_UserUpdateInput]
}

"FinanceRecord create input"
input FinanceRecordCreateInput {
  accountName: String!
  currentValue: Float!
  recordedDate: Date!
}

"FinanceRecord create many input"
input FinanceRecordCreateManyInput {
  accountName: String!
  currentValue: Float!
  recordedDate: Date!
}

"FinanceRecord delete input"
input FinanceRecordDeleteInput {
  force: Boolean
  id: ID
}

"FinanceRecordFieldsPermissions create input"
input FinanceRecordFieldsPermissions {
  accountName: Boolean
  createdAt: Boolean
  currentValue: Boolean
  recordedDate: Boolean
  updatedAt: Boolean
}

input FinanceRecordFilter {
  AND: [FinanceRecordFilter!]
  OR: [FinanceRecordFilter!]
  _fullText: String
  accountName: StringPredicate
  createdAt: DateTimePredicate
  createdBy: UserFilter
  currentValue: FloatPredicate
  deletedAt: IntPredicate
  id: IDPredicate
  recordedDate: DatePredicate
  updatedAt: DateTimePredicate
}

input FinanceRecordGroupBy {
  first: Int
  having: Having
  last: Int
  query: FinanceRecordGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input FinanceRecordGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  accountName: [GroupByField!]
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  currentValue: [GroupByField!]
  id: [GroupByField!]
  recordedDate: [GroupByField!]
  updatedAt: [GroupByField!]
}

input FinanceRecordKeyFilter {
  id: ID
}

input FinanceRecordSort {
  accountName: SortOrder
  createdAt: SortOrder
  createdBy: UserSort
  currentValue: SortOrder
  deletedAt: SortOrder
  id: SortOrder
  recordedDate: SortOrder
  updatedAt: SortOrder
}

"FinanceRecord subscription filter"
input FinanceRecordSubscriptionFilter {
  mutation_in: [MutationType]
  node: FinanceRecordFilter
  updatedFields: UpdatedFieldsFilter
}

"FinanceRecord update input"
input FinanceRecordUpdateByFilterInput {
  accountName: [UpdateByFilterStringInput]
  currentValue: [UpdateByFilterFloatInput]
  recordedDate: [UpdateByFilterDateInput]
}

"FinanceRecord update input"
input FinanceRecordUpdateInput {
  accountName: String
  currentValue: Float
  id: ID
  recordedDate: Date
}

input FinanceRecord_PermissionFilter {
  AND: [FinanceRecord_PermissionFilter!]
  OR: [FinanceRecord_PermissionFilter!]
  _fullText: String
  accountName: StringPredicate
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  currentValue: FloatPredicate
  deletedAt: IntPredicate
  id: IDPredicate
  recordedDate: DatePredicate
  updatedAt: DateTimePredicate
}

input FloatPredicate {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: Float
  lte: Float
  not_equals: Float
  not_in: [Float!]
}

input FloatPredicateHaving {
  AND: [FloatPredicateHaving!]
  OR: [FloatPredicateHaving!]
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: Float
  lte: Float
  not_equals: Float
  not_in: [Float!]
}

"FunctionInfoFilter"
input FunctionInfoFilter {
  description: String
  functionType: FunctionType
  name: String
}

"Github connection params input"
input GithubOptionsInput {
  client_id: String!
  client_secret: String!
  enabled: Boolean!
}

"Google connection params input"
input GoogleOptionsInput {
  client_id: String!
  client_secret: String!
  enabled: Boolean!
}

"GraphQLCreateFileCustomInput"
input GraphQLCreateFileCustomInput {
  fileId: String
  filename: String
  public: Boolean
}

"GraphQLCreateFileItemInput"
input GraphQLCreateFileItemInput {
  create: GraphQLCreateFileCustomInput
}

input GroupByField {
  as: String
  fn: [GroupByFieldFunction]
}

input GroupByFieldFunction {
  abs: Boolean
  aggregate: AggregationFunctionType
  ascii: Boolean
  bitLength: Boolean
  ceil: Boolean
  charLength: Boolean
  crc32: Boolean
  datePart: DatePartFunctionType
  distinct: Boolean
  floor: Boolean
  hex: Boolean
  ifNull: String
  isNull: Boolean
  left: Int
  length: Boolean
  like: PatternFunctionArguments
  locate: LocateFunctionArguments
  lower: Boolean
  lpad: StringPadFunctionArguments
  ltrim: Boolean
  mod: Int
  notLike: PatternFunctionArguments
  nullIf: String
  replace: ReplaceFunctionArguments
  reverse: Boolean
  right: Int
  round: Int
  rpad: StringPadFunctionArguments
  rtrim: Boolean
  sign: Boolean
  substring: SubstringFunctionArguments
  trim: TrimFunctionArguments
  truncate: Int
  upper: Boolean
}

input GroupBySort {
  alias: String!
  direction: SortOrder!
}

input GroupIdentifiersGroupByField {
  as: String!
}

"Habit create input"
input HabitCreateInput {
  dueDate: Date!
  name: String!
  recurInterval: String!
}

"Habit create many input"
input HabitCreateManyInput {
  dueDate: Date!
  name: String!
  recurInterval: String!
}

"Habit delete input"
input HabitDeleteInput {
  force: Boolean
  id: ID
}

"HabitFieldsPermissions create input"
input HabitFieldsPermissions {
  createdAt: Boolean
  dueDate: Boolean
  name: Boolean
  recurInterval: Boolean
  updatedAt: Boolean
}

input HabitFilter {
  AND: [HabitFilter!]
  OR: [HabitFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  dueDate: DatePredicate
  id: IDPredicate
  name: StringPredicate
  recurInterval: StringPredicate
  updatedAt: DateTimePredicate
}

input HabitGroupBy {
  first: Int
  having: Having
  last: Int
  query: HabitGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input HabitGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  dueDate: [GroupByField!]
  id: [GroupByField!]
  name: [GroupByField!]
  recurInterval: [GroupByField!]
  updatedAt: [GroupByField!]
}

input HabitKeyFilter {
  id: ID
  name: String
}

input HabitSort {
  createdAt: SortOrder
  createdBy: UserSort
  deletedAt: SortOrder
  dueDate: SortOrder
  id: SortOrder
  name: SortOrder
  recurInterval: SortOrder
  updatedAt: SortOrder
}

"Habit subscription filter"
input HabitSubscriptionFilter {
  mutation_in: [MutationType]
  node: HabitFilter
  updatedFields: UpdatedFieldsFilter
}

"Habit update input"
input HabitUpdateByFilterInput {
  dueDate: [UpdateByFilterDateInput]
  name: [UpdateByFilterStringInput]
  recurInterval: [UpdateByFilterStringInput]
}

"Habit update input"
input HabitUpdateInput {
  dueDate: Date
  id: ID
  name: String
  recurInterval: String
}

input Habit_PermissionFilter {
  AND: [Habit_PermissionFilter!]
  OR: [Habit_PermissionFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  deletedAt: IntPredicate
  dueDate: DatePredicate
  id: IDPredicate
  name: StringPredicate
  recurInterval: StringPredicate
  updatedAt: DateTimePredicate
}

input Having {
  AND: [Having!]
  OR: [Having!]
  alias: String
  bigint: BigIntPredicateHaving
  bool: BoolPredicateHaving
  date: DatePredicateHaving
  datetime: DateTimePredicateHaving
  float: FloatPredicateHaving
  id: IDPredicateHaving
  int: IntPredicateHaving
  string: StringPredicateHaving
}

input IDPredicate {
  contains: ID
  ends_with: ID
  equals: ID
  gt: ID
  gte: ID
  in: [ID!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: ID
  lte: ID
  not_contains: ID
  not_ends_with: ID
  not_equals: ID
  not_in: [ID!]
  not_starts_with: ID
  starts_with: ID
}

input IDPredicateHaving {
  AND: [IDPredicateHaving!]
  OR: [IDPredicateHaving!]
  contains: ID
  ends_with: ID
  equals: ID
  gt: ID
  gte: ID
  in: [ID!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: ID
  lte: ID
  not_contains: ID
  not_ends_with: ID
  not_equals: ID
  not_in: [ID!]
  not_starts_with: ID
  starts_with: ID
}

"Image relation input"
input ImageBlogsManyRelationInput {
  connect: [BlogKeyFilter!]
}

"Image relation input"
input ImageBlogsRelationInput {
  connect: [BlogKeyFilter!]
  create: [FeaturedImage_BlogCreateInput]
}

"Image relation input"
input ImageBlogsUpdateRelationInput {
  connect: [BlogKeyFilter!]
  create: [FeaturedImage_BlogCreateInput]
  disconnect: [BlogKeyFilter!]
  reconnect: [BlogKeyFilter!]
  update: [FeaturedImage_BlogUpdateInput]
}

"Image create input"
input ImageCreateInput {
  altText: String!
  blogs: ImageBlogsRelationInput
  height: Int!
  image: ImageImageRelationInput
  person: ImagePersonRelationInput
  schools: ImageSchoolsRelationInput
  technologyLogos: ImageTechnologyLogosRelationInput
  width: Int!
}

"Image create many input"
input ImageCreateManyInput {
  altText: String!
  blogs: ImageBlogsManyRelationInput
  height: Int!
  image: ImageImageManyRelationInput!
  person: ImagePersonManyRelationInput
  schools: ImageSchoolsManyRelationInput
  technologyLogos: ImageTechnologyLogosManyRelationInput
  width: Int!
}

"Image delete input"
input ImageDeleteInput {
  force: Boolean
  id: ID
}

"ImageFieldsPermissions create input"
input ImageFieldsPermissions {
  altText: Boolean
  createdAt: Boolean
  height: Boolean
  updatedAt: Boolean
  width: Boolean
}

input ImageFilter {
  AND: [ImageFilter!]
  OR: [ImageFilter!]
  _fullText: String
  altText: StringPredicate
  blogs: BlogRelationFilter
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  height: IntPredicate
  id: IDPredicate
  image: FileFilter
  person: PersonFilter
  schools: SchoolFilter
  technologyLogos: TechnologyLogoFilter
  updatedAt: DateTimePredicate
  width: IntPredicate
}

input ImageGroupBy {
  first: Int
  having: Having
  last: Int
  query: ImageGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input ImageGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  altText: [GroupByField!]
  blogs: BlogGroupByQuery
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  height: [GroupByField!]
  id: [GroupByField!]
  image: FileGroupByQuery
  person: PersonGroupByQuery
  schools: SchoolGroupByQuery
  technologyLogos: TechnologyLogoGroupByQuery
  updatedAt: [GroupByField!]
  width: [GroupByField!]
}

"Image relation input"
input ImageImageManyRelationInput {
  connect: FileKeyFilter
}

"Image relation input"
input ImageImageRelationInput {
  connect: FileKeyFilter
  create: Image_image_FileCreateInput
}

"Image relation input"
input ImageImageUpdateRelationInput {
  connect: FileKeyFilter
  create: Image_image_FileCreateInput
  disconnect: FileKeyFilter
  reconnect: FileKeyFilter
  update: Image_image_FileUpdateInput
}

input ImageKeyFilter {
  id: ID
}

"Image relation input"
input ImagePersonManyRelationInput {
  connect: PersonKeyFilter
}

"Image relation input"
input ImagePersonRelationInput {
  connect: PersonKeyFilter
  create: Image_PersonCreateInput
}

"Image relation input"
input ImagePersonUpdateRelationInput {
  connect: PersonKeyFilter
  create: Image_PersonCreateInput
  disconnect: PersonKeyFilter
  reconnect: PersonKeyFilter
  update: Image_PersonUpdateInput
}

input ImageRelationFilter {
  every: ImageFilter
  none: ImageFilter
  some: ImageFilter
}

"Image relation input"
input ImageSchoolsManyRelationInput {
  connect: SchoolKeyFilter
}

"Image relation input"
input ImageSchoolsRelationInput {
  connect: SchoolKeyFilter
  create: Image_SchoolCreateInput
}

"Image relation input"
input ImageSchoolsUpdateRelationInput {
  connect: SchoolKeyFilter
  create: Image_SchoolCreateInput
  disconnect: SchoolKeyFilter
  reconnect: SchoolKeyFilter
  update: Image_SchoolUpdateInput
}

input ImageSort {
  altText: SortOrder
  createdAt: SortOrder
  createdBy: UserSort
  deletedAt: SortOrder
  height: SortOrder
  id: SortOrder
  image: FileSort
  person: PersonSort
  schools: SchoolSort
  technologyLogos: TechnologyLogoSort
  updatedAt: SortOrder
  width: SortOrder
}

"Image subscription filter"
input ImageSubscriptionFilter {
  mutation_in: [MutationType]
  node: ImageFilter
  updatedFields: UpdatedFieldsFilter
}

"Image relation input"
input ImageTechnologyLogosManyRelationInput {
  connect: TechnologyLogoKeyFilter
}

"Image relation input"
input ImageTechnologyLogosRelationInput {
  connect: TechnologyLogoKeyFilter
  create: Image_TechnologyLogoCreateInput
}

"Image relation input"
input ImageTechnologyLogosUpdateRelationInput {
  connect: TechnologyLogoKeyFilter
  create: Image_TechnologyLogoCreateInput
  disconnect: TechnologyLogoKeyFilter
  reconnect: TechnologyLogoKeyFilter
  update: Image_TechnologyLogoUpdateInput
}

"Image update input"
input ImageUpdateByFilterInput {
  altText: [UpdateByFilterStringInput]
  height: [UpdateByFilterIntInput]
  width: [UpdateByFilterIntInput]
}

"Image update input"
input ImageUpdateInput {
  altText: String
  blogs: ImageBlogsUpdateRelationInput
  height: Int
  id: ID
  image: ImageImageUpdateRelationInput
  person: ImagePersonUpdateRelationInput
  schools: ImageSchoolsUpdateRelationInput
  technologyLogos: ImageTechnologyLogosUpdateRelationInput
  width: Int
}

"Image create input from image"
input Image_ImageCreateInput {
  altText: String!
  blogs: ImageBlogsRelationInput
  height: Int!
  image: ImageImageRelationInput
  person: ImagePersonRelationInput
  schools: ImageSchoolsRelationInput
  technologyLogos: ImageTechnologyLogosRelationInput
  width: Int!
}

"Image update input from image"
input Image_ImageUpdateInput {
  data: ImageUpdateInput!
  filter: ImageKeyFilter
}

input Image_PermissionFilter {
  AND: [Image_PermissionFilter!]
  OR: [Image_PermissionFilter!]
  _fullText: String
  altText: StringPredicate
  blogs: Blog_PermissionRelationFilter
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  deletedAt: IntPredicate
  height: IntPredicate
  id: IDPredicate
  image: File_PermissionFilter
  person: Person_PermissionFilter
  schools: School_PermissionFilter
  technologyLogos: TechnologyLogo_PermissionFilter
  updatedAt: DateTimePredicate
  width: IntPredicate
}

input Image_PermissionRelationFilter {
  every: Image_PermissionFilter
  none: Image_PermissionFilter
  some: Image_PermissionFilter
}

"Person create input from image"
input Image_PersonCreateInput {
  birthday: Date
  blogs: PersonBlogsRelationInput
  courses: PersonCoursesRelationInput
  firstName: String!
  githubUrl: String
  heightIn: Float
  image: PersonImageRelationInput
  lastName: String!
  linkedinUrl: String
  summary: String
  websiteUrl: String
  weightLbs: Float
}

"Person update input from image"
input Image_PersonUpdateInput {
  birthday: Date
  blogs: PersonBlogsUpdateRelationInput
  courses: PersonCoursesUpdateRelationInput
  firstName: String
  githubUrl: String
  heightIn: Float
  image: PersonImageUpdateRelationInput
  lastName: String
  linkedinUrl: String
  summary: String
  websiteUrl: String
  weightLbs: Float
}

"School create input from image"
input Image_SchoolCreateInput {
  courseUrls: SchoolCourseUrlsRelationInput
  courses: SchoolCoursesRelationInput
  description: String
  image: SchoolImageRelationInput
  name: String!
  url: String!
}

"School update input from image"
input Image_SchoolUpdateInput {
  courseUrls: SchoolCourseUrlsUpdateRelationInput
  courses: SchoolCoursesUpdateRelationInput
  description: String
  image: SchoolImageUpdateRelationInput
  name: String
  url: String
}

"TechnologyLogo create input from image"
input Image_TechnologyLogoCreateInput {
  image: TechnologyLogoImageRelationInput
}

"TechnologyLogo update input from image"
input Image_TechnologyLogoUpdateInput {
  image: TechnologyLogoImageUpdateRelationInput
}

"Files create input from image_image"
input Image_image_FileCreateInput {
  fileId: String
  filename: String
  image_image: FilesImage_imageRelationInput
  meta: JSON
  mods: JSON
  public: Boolean = false
  users_avatar: FilesUsers_avatarRelationInput
}

"Files update input from image_image"
input Image_image_FileUpdateInput {
  fileId: String
  filename: String
  image_image: FilesImage_imageUpdateRelationInput
  meta: JSON
  mods: JSON
  public: Boolean
  users_avatar: FilesUsers_avatarUpdateRelationInput
}

"Inbox Events List Filter"
input InboxEventsListFilter {
  isCompleted: IntPredicate
}

"Table Create Index Input"
input IndexCreateInput {
  columns: [TableIndexColumnInput!]!
  force: Boolean
  name: String
  tableId: ID!
  type: TableIndexType!
}

"Table Delete Index Input"
input IndexDeleteInput {
  id: ID!
}

"Table Update Index Input"
input IndexUpdateInput {
  columns: [TableIndexColumnInput!]
  force: Boolean
  id: ID!
  name: String
  type: TableIndexType
}

"Course create input from instructors"
input Instructors_CourseCreateInput {
  courseUrls: CourseCourseUrlsRelationInput
  duration: Float
  instructors: CourseInstructorsRelationInput
  rating: Int!
  ratingUrl: String
  recommendationOrder: Int
  school: CourseSchoolRelationInput
  title: String!
  yearUpdated: Int
}

"Course update input from instructors"
input Instructors_CourseUpdateInput {
  data: CourseUpdateInput!
  filter: CourseKeyFilter
}

input IntPredicate {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: Int
  lte: Int
  not_equals: Int
  not_in: [Int!]
}

input IntPredicateHaving {
  AND: [IntPredicateHaving!]
  OR: [IntPredicateHaving!]
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  is_empty: Boolean
  is_not_empty: Boolean
  lt: Int
  lte: Int
  not_equals: Int
  not_in: [Int!]
}

"InvokeData"
input InvokeData {
  functionName: String!
  inputArgs: String
}

input LocateFunctionArguments {
  pos: Int
  str: String!
}

"PasswordForgotConfirmInput"
input PasswordForgotConfirmInput {
  authProfileId: ID!
  code: String!
  email: String!
  newPassword: String!
}

"PasswordForgotInput"
input PasswordForgotInput {
  authProfileId: ID!
  email: String!
}

input PatternFunctionArguments {
  escape: String
  pattern: String!
}

input PermissionFilter {
  AND: [PermissionFilter!]
  OR: [PermissionFilter!]
  _fullText: String
  appId: StringPredicate
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  resource: StringPredicate
  resourceType: StringPredicate
  role: RoleFilter
  updatedAt: DateTimePredicate
}

input PermissionGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  appId: [GroupByField!]
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  permission: [GroupByField!]
  resource: [GroupByField!]
  resourceType: [GroupByField!]
  role: RoleGroupByQuery
  updatedAt: [GroupByField!]
}

"Permission Filter"
input PermissionInputFilter {
  action: String
  applicationName: String
  resource: String
  resourceType: PermissionResourceTypeEnum
}

input PermissionRelationFilter {
  every: PermissionFilter
  none: PermissionFilter
  some: PermissionFilter
}

"Permissions subscription filter"
input PermissionSubscriptionFilter {
  mutation_in: [MutationType]
  node: PermissionFilter
  updatedFields: UpdatedFieldsFilter
}

input Permission_PermissionFilter {
  AND: [Permission_PermissionFilter!]
  OR: [Permission_PermissionFilter!]
  _fullText: String
  appId: StringPredicate
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  deletedAt: IntPredicate
  resource: StringPredicate
  resourceType: StringPredicate
  role: Role_PermissionFilter
  updatedAt: DateTimePredicate
}

input Permission_PermissionRelationFilter {
  every: Permission_PermissionFilter
  none: Permission_PermissionFilter
  some: Permission_PermissionFilter
}

"custom permissions input"
input PermissionsCustom {
  data: PermissionsCustomData
  logic: PermissionsCustomLogic
  settings: PermissionsCustomSettings
  users: PermissionsCustomUsers
}

input PermissionsCustomData {
  schemaManagement: PermissionsCustomDataSchemaManagement
  viewerAccess: PermissionsCustomDataViewerAccess
}

input PermissionsCustomDataSchemaManagement {
  allow: Boolean!
}

input PermissionsCustomDataViewerAccess {
  allow: Boolean!
}

input PermissionsCustomLogic {
  deploy: PermissionsCustomLogicDeploy
  invoke: PermissionsCustomLogicInvoke
  logs: PermissionsCustomLogicLogs
  view: PermissionsCustomLogicView
}

input PermissionsCustomLogicDeploy {
  allow: Boolean!
}

input PermissionsCustomLogicInvoke {
  allow: Boolean!
}

input PermissionsCustomLogicLogs {
  allow: Boolean!
}

input PermissionsCustomLogicView {
  allow: Boolean!
}

input PermissionsCustomSettings {
  workspaceAdministration: PermissionsCustomSettingsWorkspaceAdministration
}

input PermissionsCustomSettingsWorkspaceAdministration {
  allow: Boolean!
}

input PermissionsCustomUsers {
  teamAdministration: PermissionsCustomUsersTeamAdministration
}

input PermissionsCustomUsersTeamAdministration {
  allow: Boolean!
}

"Schema tables permissions input"
input PermissionsData {
  Blog: PermissionsDataBlog
  Course: PermissionsDataCourse
  CourseUrl: PermissionsDataCourseUrl
  Files: PermissionsDataFiles
  FinanceRecord: PermissionsDataFinanceRecord
  Habit: PermissionsDataHabit
  Image: PermissionsDataImage
  Person: PermissionsDataPerson
  Roles: PermissionsDataRoles
  School: PermissionsDataSchool
  TechnologyLogo: PermissionsDataTechnologyLogo
  Users: PermissionsDataUsers
}

input PermissionsDataBlog {
  create: PermissionsDataBlogCreate
  delete: PermissionsDataBlogDelete
  destroy: PermissionsDataBlogDestroy
  read: PermissionsDataBlogRead
  update: PermissionsDataBlogUpdate
}

input PermissionsDataBlogCreate {
  allow: Boolean!
}

input PermissionsDataBlogDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataBlogDestroy {
  allow: Boolean!
}

input PermissionsDataBlogRead {
  allow: Boolean!
  fields: BlogFieldsPermissions
  filter: Blog_PermissionFilter
}

input PermissionsDataBlogUpdate {
  allow: Boolean!
  fields: BlogFieldsPermissions
  filter: Blog_PermissionFilter
}

input PermissionsDataCourse {
  create: PermissionsDataCourseCreate
  delete: PermissionsDataCourseDelete
  destroy: PermissionsDataCourseDestroy
  read: PermissionsDataCourseRead
  update: PermissionsDataCourseUpdate
}

input PermissionsDataCourseCreate {
  allow: Boolean!
}

input PermissionsDataCourseDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataCourseDestroy {
  allow: Boolean!
}

input PermissionsDataCourseRead {
  allow: Boolean!
  fields: CourseFieldsPermissions
  filter: Course_PermissionFilter
}

input PermissionsDataCourseUpdate {
  allow: Boolean!
  fields: CourseFieldsPermissions
  filter: Course_PermissionFilter
}

input PermissionsDataCourseUrl {
  create: PermissionsDataCourseUrlCreate
  delete: PermissionsDataCourseUrlDelete
  destroy: PermissionsDataCourseUrlDestroy
  read: PermissionsDataCourseUrlRead
  update: PermissionsDataCourseUrlUpdate
}

input PermissionsDataCourseUrlCreate {
  allow: Boolean!
}

input PermissionsDataCourseUrlDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataCourseUrlDestroy {
  allow: Boolean!
}

input PermissionsDataCourseUrlRead {
  allow: Boolean!
  fields: CourseUrlFieldsPermissions
  filter: CourseUrl_PermissionFilter
}

input PermissionsDataCourseUrlUpdate {
  allow: Boolean!
  fields: CourseUrlFieldsPermissions
  filter: CourseUrl_PermissionFilter
}

input PermissionsDataFiles {
  create: PermissionsDataFilesCreate
  delete: PermissionsDataFilesDelete
  destroy: PermissionsDataFilesDestroy
  read: PermissionsDataFilesRead
  update: PermissionsDataFilesUpdate
}

input PermissionsDataFilesCreate {
  allow: Boolean!
}

input PermissionsDataFilesDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataFilesDestroy {
  allow: Boolean!
}

input PermissionsDataFilesRead {
  allow: Boolean!
  fields: FileFieldsPermissions
  filter: File_PermissionFilter
}

input PermissionsDataFilesUpdate {
  allow: Boolean!
  fields: FileFieldsPermissions
  filter: File_PermissionFilter
}

input PermissionsDataFinanceRecord {
  create: PermissionsDataFinanceRecordCreate
  delete: PermissionsDataFinanceRecordDelete
  destroy: PermissionsDataFinanceRecordDestroy
  read: PermissionsDataFinanceRecordRead
  update: PermissionsDataFinanceRecordUpdate
}

input PermissionsDataFinanceRecordCreate {
  allow: Boolean!
}

input PermissionsDataFinanceRecordDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataFinanceRecordDestroy {
  allow: Boolean!
}

input PermissionsDataFinanceRecordRead {
  allow: Boolean!
  fields: FinanceRecordFieldsPermissions
  filter: FinanceRecord_PermissionFilter
}

input PermissionsDataFinanceRecordUpdate {
  allow: Boolean!
  fields: FinanceRecordFieldsPermissions
  filter: FinanceRecord_PermissionFilter
}

input PermissionsDataHabit {
  create: PermissionsDataHabitCreate
  delete: PermissionsDataHabitDelete
  destroy: PermissionsDataHabitDestroy
  read: PermissionsDataHabitRead
  update: PermissionsDataHabitUpdate
}

input PermissionsDataHabitCreate {
  allow: Boolean!
}

input PermissionsDataHabitDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataHabitDestroy {
  allow: Boolean!
}

input PermissionsDataHabitRead {
  allow: Boolean!
  fields: HabitFieldsPermissions
  filter: Habit_PermissionFilter
}

input PermissionsDataHabitUpdate {
  allow: Boolean!
  fields: HabitFieldsPermissions
  filter: Habit_PermissionFilter
}

input PermissionsDataImage {
  create: PermissionsDataImageCreate
  delete: PermissionsDataImageDelete
  destroy: PermissionsDataImageDestroy
  read: PermissionsDataImageRead
  update: PermissionsDataImageUpdate
}

input PermissionsDataImageCreate {
  allow: Boolean!
}

input PermissionsDataImageDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataImageDestroy {
  allow: Boolean!
}

input PermissionsDataImageRead {
  allow: Boolean!
  fields: ImageFieldsPermissions
  filter: Image_PermissionFilter
}

input PermissionsDataImageUpdate {
  allow: Boolean!
  fields: ImageFieldsPermissions
  filter: Image_PermissionFilter
}

input PermissionsDataPerson {
  create: PermissionsDataPersonCreate
  delete: PermissionsDataPersonDelete
  destroy: PermissionsDataPersonDestroy
  read: PermissionsDataPersonRead
  update: PermissionsDataPersonUpdate
}

input PermissionsDataPersonCreate {
  allow: Boolean!
}

input PermissionsDataPersonDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataPersonDestroy {
  allow: Boolean!
}

input PermissionsDataPersonRead {
  allow: Boolean!
  fields: PersonFieldsPermissions
  filter: Person_PermissionFilter
}

input PermissionsDataPersonUpdate {
  allow: Boolean!
  fields: PersonFieldsPermissions
  filter: Person_PermissionFilter
}

input PermissionsDataRoles {
  create: PermissionsDataRolesCreate
  delete: PermissionsDataRolesDelete
  destroy: PermissionsDataRolesDestroy
  read: PermissionsDataRolesRead
  update: PermissionsDataRolesUpdate
}

input PermissionsDataRolesCreate {
  allow: Boolean!
}

input PermissionsDataRolesDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataRolesDestroy {
  allow: Boolean!
}

input PermissionsDataRolesRead {
  allow: Boolean!
  fields: RoleFieldsPermissions
  filter: Role_PermissionFilter
}

input PermissionsDataRolesUpdate {
  allow: Boolean!
  fields: RoleFieldsPermissions
  filter: Role_PermissionFilter
}

input PermissionsDataSchool {
  create: PermissionsDataSchoolCreate
  delete: PermissionsDataSchoolDelete
  destroy: PermissionsDataSchoolDestroy
  read: PermissionsDataSchoolRead
  update: PermissionsDataSchoolUpdate
}

input PermissionsDataSchoolCreate {
  allow: Boolean!
}

input PermissionsDataSchoolDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataSchoolDestroy {
  allow: Boolean!
}

input PermissionsDataSchoolRead {
  allow: Boolean!
  fields: SchoolFieldsPermissions
  filter: School_PermissionFilter
}

input PermissionsDataSchoolUpdate {
  allow: Boolean!
  fields: SchoolFieldsPermissions
  filter: School_PermissionFilter
}

input PermissionsDataTechnologyLogo {
  create: PermissionsDataTechnologyLogoCreate
  delete: PermissionsDataTechnologyLogoDelete
  destroy: PermissionsDataTechnologyLogoDestroy
  read: PermissionsDataTechnologyLogoRead
  update: PermissionsDataTechnologyLogoUpdate
}

input PermissionsDataTechnologyLogoCreate {
  allow: Boolean!
}

input PermissionsDataTechnologyLogoDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataTechnologyLogoDestroy {
  allow: Boolean!
}

input PermissionsDataTechnologyLogoRead {
  allow: Boolean!
  fields: TechnologyLogoFieldsPermissions
  filter: TechnologyLogo_PermissionFilter
}

input PermissionsDataTechnologyLogoUpdate {
  allow: Boolean!
  fields: TechnologyLogoFieldsPermissions
  filter: TechnologyLogo_PermissionFilter
}

input PermissionsDataUsers {
  create: PermissionsDataUsersCreate
  delete: PermissionsDataUsersDelete
  destroy: PermissionsDataUsersDestroy
  read: PermissionsDataUsersRead
  update: PermissionsDataUsersUpdate
}

input PermissionsDataUsersCreate {
  allow: Boolean!
}

input PermissionsDataUsersDelete {
  allow: Boolean!
  restore: Boolean
  review: Boolean
}

input PermissionsDataUsersDestroy {
  allow: Boolean!
}

input PermissionsDataUsersRead {
  allow: Boolean!
  fields: UserFieldsPermissions
  filter: User_PermissionFilter
}

input PermissionsDataUsersUpdate {
  allow: Boolean!
  fields: UserFieldsPermissions
  filter: User_PermissionFilter
}

"PermissionsInput create input"
input PermissionsInput {
  custom: PermissionsCustom
  data: PermissionsData
}

"Person relation input"
input PersonBlogsManyRelationInput {
  connect: [BlogKeyFilter!]
}

"Person relation input"
input PersonBlogsRelationInput {
  connect: [BlogKeyFilter!]
  create: [Authors_BlogCreateInput]
}

"Person relation input"
input PersonBlogsUpdateRelationInput {
  connect: [BlogKeyFilter!]
  create: [Authors_BlogCreateInput]
  disconnect: [BlogKeyFilter!]
  reconnect: [BlogKeyFilter!]
  update: [Authors_BlogUpdateInput]
}

"Person relation input"
input PersonCoursesManyRelationInput {
  connect: [CourseKeyFilter!]
}

"Person relation input"
input PersonCoursesRelationInput {
  connect: [CourseKeyFilter!]
  create: [Instructors_CourseCreateInput]
}

"Person relation input"
input PersonCoursesUpdateRelationInput {
  connect: [CourseKeyFilter!]
  create: [Instructors_CourseCreateInput]
  disconnect: [CourseKeyFilter!]
  reconnect: [CourseKeyFilter!]
  update: [Instructors_CourseUpdateInput]
}

"Person create input"
input PersonCreateInput {
  birthday: Date
  blogs: PersonBlogsRelationInput
  courses: PersonCoursesRelationInput
  firstName: String!
  githubUrl: String
  heightIn: Float
  image: PersonImageRelationInput
  lastName: String!
  linkedinUrl: String
  summary: String
  websiteUrl: String
  weightLbs: Float
}

"Person create many input"
input PersonCreateManyInput {
  birthday: Date
  blogs: PersonBlogsManyRelationInput
  courses: PersonCoursesManyRelationInput
  firstName: String!
  githubUrl: String
  heightIn: Float
  image: PersonImageManyRelationInput
  lastName: String!
  linkedinUrl: String
  summary: String
  websiteUrl: String
  weightLbs: Float
}

"Person delete input"
input PersonDeleteInput {
  force: Boolean
  id: ID
}

"PersonFieldsPermissions create input"
input PersonFieldsPermissions {
  birthday: Boolean
  createdAt: Boolean
  firstName: Boolean
  githubUrl: Boolean
  heightIn: Boolean
  lastName: Boolean
  linkedinUrl: Boolean
  summary: Boolean
  updatedAt: Boolean
  websiteUrl: Boolean
  weightLbs: Boolean
}

input PersonFilter {
  AND: [PersonFilter!]
  OR: [PersonFilter!]
  _fullText: String
  birthday: DatePredicate
  blogs: BlogRelationFilter
  courses: CourseRelationFilter
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  firstName: StringPredicate
  githubUrl: StringPredicate
  heightIn: FloatPredicate
  id: IDPredicate
  image: ImageFilter
  lastName: StringPredicate
  linkedinUrl: StringPredicate
  summary: StringPredicate
  updatedAt: DateTimePredicate
  websiteUrl: StringPredicate
  weightLbs: FloatPredicate
}

input PersonGroupBy {
  first: Int
  having: Having
  last: Int
  query: PersonGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input PersonGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  birthday: [GroupByField!]
  blogs: BlogGroupByQuery
  courses: CourseGroupByQuery
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  firstName: [GroupByField!]
  githubUrl: [GroupByField!]
  heightIn: [GroupByField!]
  id: [GroupByField!]
  image: ImageGroupByQuery
  lastName: [GroupByField!]
  linkedinUrl: [GroupByField!]
  summary: [GroupByField!]
  updatedAt: [GroupByField!]
  websiteUrl: [GroupByField!]
  weightLbs: [GroupByField!]
}

"Person relation input"
input PersonImageManyRelationInput {
  connect: ImageKeyFilter
}

"Person relation input"
input PersonImageRelationInput {
  connect: ImageKeyFilter
  create: Person_ImageCreateInput
}

"Person relation input"
input PersonImageUpdateRelationInput {
  connect: ImageKeyFilter
  create: Person_ImageCreateInput
  disconnect: ImageKeyFilter
  reconnect: ImageKeyFilter
  update: Person_ImageUpdateInput
}

input PersonKeyFilter {
  id: ID
}

input PersonRelationFilter {
  every: PersonFilter
  none: PersonFilter
  some: PersonFilter
}

input PersonSort {
  birthday: SortOrder
  createdAt: SortOrder
  createdBy: UserSort
  deletedAt: SortOrder
  firstName: SortOrder
  githubUrl: SortOrder
  heightIn: SortOrder
  id: SortOrder
  image: ImageSort
  lastName: SortOrder
  linkedinUrl: SortOrder
  summary: SortOrder
  updatedAt: SortOrder
  websiteUrl: SortOrder
  weightLbs: SortOrder
}

"Person subscription filter"
input PersonSubscriptionFilter {
  mutation_in: [MutationType]
  node: PersonFilter
  updatedFields: UpdatedFieldsFilter
}

"Person update input"
input PersonUpdateByFilterInput {
  birthday: [UpdateByFilterDateInput]
  firstName: [UpdateByFilterStringInput]
  githubUrl: [UpdateByFilterStringInput]
  heightIn: [UpdateByFilterFloatInput]
  lastName: [UpdateByFilterStringInput]
  linkedinUrl: [UpdateByFilterStringInput]
  summary: [UpdateByFilterStringInput]
  websiteUrl: [UpdateByFilterStringInput]
  weightLbs: [UpdateByFilterFloatInput]
}

"Person update input"
input PersonUpdateInput {
  birthday: Date
  blogs: PersonBlogsUpdateRelationInput
  courses: PersonCoursesUpdateRelationInput
  firstName: String
  githubUrl: String
  heightIn: Float
  id: ID
  image: PersonImageUpdateRelationInput
  lastName: String
  linkedinUrl: String
  summary: String
  websiteUrl: String
  weightLbs: Float
}

"Image create input from person"
input Person_ImageCreateInput {
  altText: String!
  blogs: ImageBlogsRelationInput
  height: Int!
  image: ImageImageRelationInput
  person: ImagePersonRelationInput
  schools: ImageSchoolsRelationInput
  technologyLogos: ImageTechnologyLogosRelationInput
  width: Int!
}

"Image update input from person"
input Person_ImageUpdateInput {
  altText: String
  blogs: ImageBlogsUpdateRelationInput
  height: Int
  image: ImageImageUpdateRelationInput
  person: ImagePersonUpdateRelationInput
  schools: ImageSchoolsUpdateRelationInput
  technologyLogos: ImageTechnologyLogosUpdateRelationInput
  width: Int
}

input Person_PermissionFilter {
  AND: [Person_PermissionFilter!]
  OR: [Person_PermissionFilter!]
  _fullText: String
  birthday: DatePredicate
  blogs: Blog_PermissionRelationFilter
  courses: Course_PermissionRelationFilter
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  deletedAt: IntPredicate
  firstName: StringPredicate
  githubUrl: StringPredicate
  heightIn: FloatPredicate
  id: IDPredicate
  image: Image_PermissionFilter
  lastName: StringPredicate
  linkedinUrl: StringPredicate
  summary: StringPredicate
  updatedAt: DateTimePredicate
  websiteUrl: StringPredicate
  weightLbs: FloatPredicate
}

input Person_PermissionRelationFilter {
  every: Person_PermissionFilter
  none: Person_PermissionFilter
  some: Person_PermissionFilter
}

"RefreshTokenInput"
input RefreshTokenInput {
  authProfileId: ID
  email: String
  refreshToken: String!
}

"Relation Create Input"
input RelationCreateInput {
  refFieldDisplayName: String
  refFieldIsList: Boolean!
  refFieldIsRequired: Boolean!
  refFieldName: String
  refTableId: ID!
}

"Relation Update Input"
input RelationUpdateInput {
  refFieldDisplayName: String
  refFieldIsList: Boolean
  refFieldIsRequired: Boolean
  refFieldName: String
  refTableId: ID
}

input ReplaceFunctionArguments {
  from: String!
  to: String!
}

"Roles create input"
input RoleCreateInput {
  apiTokens: RolesApiTokensRelationInput
  authenticationProfiles: RolesAuthenticationProfilesRelationInput
  description: String
  name: String!
  permissions: PermissionsInput
  users: RolesUsersRelationInput
}

"Roles create many input"
input RoleCreateManyInput {
  apiTokens: RolesApiTokensManyRelationInput
  authenticationProfiles: RolesAuthenticationProfilesManyRelationInput
  description: String
  name: String!
  users: RolesUsersManyRelationInput
}

"Roles delete input"
input RoleDeleteInput {
  force: Boolean
  id: ID
}

"RoleFieldsPermissions create input"
input RoleFieldsPermissions {
  createdAt: Boolean
  description: Boolean
  name: Boolean
  updatedAt: Boolean
}

input RoleFilter {
  AND: [RoleFilter!]
  OR: [RoleFilter!]
  _fullText: String
  apiTokens: ApiTokenRelationFilter
  authenticationProfiles: AuthenticationProfileRelationFilter
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  description: StringPredicate
  id: IDPredicate
  name: StringPredicate
  permissions: PermissionRelationFilter
  updatedAt: DateTimePredicate
  users: UserRelationFilter
}

input RoleGroupBy {
  first: Int
  having: Having
  last: Int
  query: RoleGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input RoleGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  apiTokens: ApiTokenGroupByQuery
  authenticationProfiles: AuthenticationProfileGroupByQuery
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  description: [GroupByField!]
  id: [GroupByField!]
  name: [GroupByField!]
  permissions: PermissionGroupByQuery
  updatedAt: [GroupByField!]
  users: UserGroupByQuery
}

input RoleKeyFilter {
  id: ID
  name: String
}

input RoleRelationFilter {
  every: RoleFilter
  none: RoleFilter
  some: RoleFilter
}

input RoleSort {
  createdAt: SortOrder
  createdBy: UserSort
  deletedAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

"Roles subscription filter"
input RoleSubscriptionFilter {
  mutation_in: [MutationType]
  node: RoleFilter
  updatedFields: UpdatedFieldsFilter
}

"Roles update input"
input RoleUpdateByFilterInput {
  description: [UpdateByFilterStringInput]
  name: [UpdateByFilterStringInput]
  systemType: [UpdateByFilterStringInput]
}

"Roles update input"
input RoleUpdateInput {
  apiTokens: RolesApiTokensUpdateRelationInput
  authenticationProfiles: RolesAuthenticationProfilesUpdateRelationInput
  description: String
  id: ID
  name: String
  permissions: PermissionsInput
  users: RolesUsersUpdateRelationInput
}

input Role_PermissionFilter {
  AND: [Role_PermissionFilter!]
  OR: [Role_PermissionFilter!]
  _fullText: String
  apiTokens: ApiToken_PermissionRelationFilter
  authenticationProfiles: AuthenticationProfile_PermissionRelationFilter
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  deletedAt: IntPredicate
  description: StringPredicate
  id: IDPredicate
  name: StringPredicate
  permissions: Permission_PermissionRelationFilter
  updatedAt: DateTimePredicate
  users: User_PermissionRelationFilter
}

input Role_PermissionRelationFilter {
  every: Role_PermissionFilter
  none: Role_PermissionFilter
  some: Role_PermissionFilter
}

"Roles relation input"
input RolesApiTokensManyRelationInput {
  connect: [ApiTokenKeyFilter!]
}

"Roles relation input"
input RolesApiTokensRelationInput {
  connect: [ApiTokenKeyFilter!]
}

"Roles relation input"
input RolesApiTokensUpdateRelationInput {
  connect: [ApiTokenKeyFilter!]
  disconnect: [ApiTokenKeyFilter!]
  reconnect: [ApiTokenKeyFilter!]
  update: [Roles_ApiTokenUpdateInput]
}

"Roles relation input"
input RolesAuthenticationProfilesManyRelationInput {
  connect: [AuthenticationProfileKeyFilter!]
}

"Roles relation input"
input RolesAuthenticationProfilesRelationInput {
  connect: [AuthenticationProfileKeyFilter!]
  create: [Roles_AuthenticationProfileCreateInput]
}

"Roles relation input"
input RolesAuthenticationProfilesUpdateRelationInput {
  connect: [AuthenticationProfileKeyFilter!]
  create: [Roles_AuthenticationProfileCreateInput]
  disconnect: [AuthenticationProfileKeyFilter!]
  reconnect: [AuthenticationProfileKeyFilter!]
  update: [Roles_AuthenticationProfileUpdateInput]
}

"Roles relation input"
input RolesUsersManyRelationInput {
  connect: [UserKeyFilter!]
}

"Roles relation input"
input RolesUsersRelationInput {
  connect: [UserKeyFilter!]
  create: [Roles_UserCreateInput]
}

"Roles relation input"
input RolesUsersUpdateRelationInput {
  connect: [UserKeyFilter!]
  create: [Roles_UserCreateInput]
  disconnect: [UserKeyFilter!]
  reconnect: [UserKeyFilter!]
  update: [Roles_UserUpdateInput]
}

"ApiTokens update input from roles"
input Roles_ApiTokenUpdateInput {
  data: ApiTokenUpdateInput!
  filter: ApiTokenKeyFilter
}

"AuthenticationProfiles create input from roles"
input Roles_AuthenticationProfileCreateInput {
  audiences: [String]
  clientId: String
  databaseName: String
  domain: String
  managementDomain: String
  name: String!
  roles: AuthenticationProfilesRolesRelationInput
  secret: String
  selfSignUpEmailDomains: [String]
  selfSignUpEnabled: Boolean = false
  type: String = "8BASE"
}

"AuthenticationProfiles update input from roles"
input Roles_AuthenticationProfileUpdateInput {
  data: AuthenticationProfileUpdateInput!
  filter: AuthenticationProfileKeyFilter
}

"Users create input from roles"
input Roles_UserCreateInput {
  avatar: UsersAvatarRelationInput
  email: String!
  firstName: String
  lastName: String
  roles: UsersRolesRelationInput
  status: String = "inactive"
  timezone: String
}

"Users update input from roles"
input Roles_UserUpdateInput {
  data: UserUpdateInput!
  filter: UserKeyFilter
}

"School relation input"
input SchoolCourseUrlsManyRelationInput {
  connect: [CourseUrlKeyFilter!]
}

"School relation input"
input SchoolCourseUrlsRelationInput {
  connect: [CourseUrlKeyFilter!]
  create: [School_CourseUrlCreateInput]
}

"School relation input"
input SchoolCourseUrlsUpdateRelationInput {
  connect: [CourseUrlKeyFilter!]
  create: [School_CourseUrlCreateInput]
  disconnect: [CourseUrlKeyFilter!]
  reconnect: [CourseUrlKeyFilter!]
  update: [School_CourseUrlUpdateInput]
}

"School relation input"
input SchoolCoursesManyRelationInput {
  connect: [CourseKeyFilter!]
}

"School relation input"
input SchoolCoursesRelationInput {
  connect: [CourseKeyFilter!]
  create: [School_CourseCreateInput]
}

"School relation input"
input SchoolCoursesUpdateRelationInput {
  connect: [CourseKeyFilter!]
  create: [School_CourseCreateInput]
  disconnect: [CourseKeyFilter!]
  reconnect: [CourseKeyFilter!]
  update: [School_CourseUpdateInput]
}

"School create input"
input SchoolCreateInput {
  courseUrls: SchoolCourseUrlsRelationInput
  courses: SchoolCoursesRelationInput
  description: String
  image: SchoolImageRelationInput
  name: String!
  url: String!
}

"School create many input"
input SchoolCreateManyInput {
  courseUrls: SchoolCourseUrlsManyRelationInput
  courses: SchoolCoursesManyRelationInput
  description: String
  image: SchoolImageManyRelationInput!
  name: String!
  url: String!
}

"School delete input"
input SchoolDeleteInput {
  force: Boolean
  id: ID
}

"SchoolFieldsPermissions create input"
input SchoolFieldsPermissions {
  createdAt: Boolean
  description: Boolean
  name: Boolean
  updatedAt: Boolean
  url: Boolean
}

input SchoolFilter {
  AND: [SchoolFilter!]
  OR: [SchoolFilter!]
  _fullText: String
  courseUrls: CourseUrlRelationFilter
  courses: CourseRelationFilter
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  description: StringPredicate
  id: IDPredicate
  image: ImageFilter
  name: StringPredicate
  updatedAt: DateTimePredicate
  url: StringPredicate
}

input SchoolGroupBy {
  first: Int
  having: Having
  last: Int
  query: SchoolGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input SchoolGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  courseUrls: CourseUrlGroupByQuery
  courses: CourseGroupByQuery
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  description: [GroupByField!]
  id: [GroupByField!]
  image: ImageGroupByQuery
  name: [GroupByField!]
  updatedAt: [GroupByField!]
  url: [GroupByField!]
}

"School relation input"
input SchoolImageManyRelationInput {
  connect: ImageKeyFilter
}

"School relation input"
input SchoolImageRelationInput {
  connect: ImageKeyFilter
  create: Schools_ImageCreateInput
}

"School relation input"
input SchoolImageUpdateRelationInput {
  connect: ImageKeyFilter
  create: Schools_ImageCreateInput
  disconnect: ImageKeyFilter
  reconnect: ImageKeyFilter
  update: Schools_ImageUpdateInput
}

input SchoolKeyFilter {
  id: ID
  name: String
  url: String
}

input SchoolSort {
  createdAt: SortOrder
  createdBy: UserSort
  deletedAt: SortOrder
  description: SortOrder
  id: SortOrder
  image: ImageSort
  name: SortOrder
  updatedAt: SortOrder
  url: SortOrder
}

"School subscription filter"
input SchoolSubscriptionFilter {
  mutation_in: [MutationType]
  node: SchoolFilter
  updatedFields: UpdatedFieldsFilter
}

"School update input"
input SchoolUpdateByFilterInput {
  description: [UpdateByFilterStringInput]
  name: [UpdateByFilterStringInput]
  url: [UpdateByFilterStringInput]
}

"School update input"
input SchoolUpdateInput {
  courseUrls: SchoolCourseUrlsUpdateRelationInput
  courses: SchoolCoursesUpdateRelationInput
  description: String
  id: ID
  image: SchoolImageUpdateRelationInput
  name: String
  url: String
}

"Course create input from school"
input School_CourseCreateInput {
  courseUrls: CourseCourseUrlsRelationInput
  duration: Float
  instructors: CourseInstructorsRelationInput
  rating: Int!
  ratingUrl: String
  recommendationOrder: Int
  school: CourseSchoolRelationInput
  title: String!
  yearUpdated: Int
}

"Course update input from school"
input School_CourseUpdateInput {
  data: CourseUpdateInput!
  filter: CourseKeyFilter
}

"CourseUrl create input from school"
input School_CourseUrlCreateInput {
  course: CourseUrlCourseRelationInput!
  school: CourseUrlSchoolRelationInput
  url: String!
}

"CourseUrl update input from school"
input School_CourseUrlUpdateInput {
  data: CourseUrlUpdateInput!
  filter: CourseUrlKeyFilter
}

input School_PermissionFilter {
  AND: [School_PermissionFilter!]
  OR: [School_PermissionFilter!]
  _fullText: String
  courseUrls: CourseUrl_PermissionRelationFilter
  courses: Course_PermissionRelationFilter
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  deletedAt: IntPredicate
  description: StringPredicate
  id: IDPredicate
  image: Image_PermissionFilter
  name: StringPredicate
  updatedAt: DateTimePredicate
  url: StringPredicate
}

"Image create input from schools"
input Schools_ImageCreateInput {
  altText: String!
  blogs: ImageBlogsRelationInput
  height: Int!
  image: ImageImageRelationInput
  person: ImagePersonRelationInput
  schools: ImageSchoolsRelationInput
  technologyLogos: ImageTechnologyLogosRelationInput
  width: Int!
}

"Image update input from schools"
input Schools_ImageUpdateInput {
  altText: String
  blogs: ImageBlogsUpdateRelationInput
  height: Int
  image: ImageImageUpdateRelationInput
  person: ImagePersonUpdateRelationInput
  schools: ImageSchoolsUpdateRelationInput
  technologyLogos: ImageTechnologyLogosUpdateRelationInput
  width: Int
}

input SettingFilter {
  AND: [SettingFilter!]
  OR: [SettingFilter!]
  _fullText: String
  bgColor: StringPredicate
  buttonLinkColor: StringPredicate
  containerColor: StringPredicate
  createdAt: DateTimePredicate
  createdBy: UserFilter
  currency: StringPredicate
  dateFormat: StringPredicate
  deletedAt: IntPredicate
  landingPageImage: FileFilter
  language: StringPredicate
  leftNavColor: StringPredicate
  menuBarBGColor: StringPredicate
  menuBarIconsColor: StringPredicate
  menuBarLogo: FileFilter
  passwordMinLength: IntPredicate
  passwordRequireLowercase: BoolPredicate
  passwordRequireNumbers: BoolPredicate
  passwordRequireSpecial: BoolPredicate
  passwordRequireUppercase: BoolPredicate
  passwordUpdateInterval: IntPredicate
  rememberDevice: StringPredicate
  timezone: StringPredicate
  updatedAt: DateTimePredicate
  userInterfaceStyle: StringPredicate
  vanityUrl: StringPredicate
}

input SettingGroupBy {
  first: Int
  having: Having
  last: Int
  query: SettingGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input SettingGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  bgColor: [GroupByField!]
  buttonLinkColor: [GroupByField!]
  containerColor: [GroupByField!]
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  currency: [GroupByField!]
  dateFormat: [GroupByField!]
  landingPageImage: FileGroupByQuery
  language: [GroupByField!]
  leftNavColor: [GroupByField!]
  menuBarBGColor: [GroupByField!]
  menuBarIconsColor: [GroupByField!]
  menuBarLogo: FileGroupByQuery
  passwordMinLength: [GroupByField!]
  passwordRequireLowercase: [GroupByField!]
  passwordRequireNumbers: [GroupByField!]
  passwordRequireSpecial: [GroupByField!]
  passwordRequireUppercase: [GroupByField!]
  passwordUpdateInterval: [GroupByField!]
  rememberDevice: [GroupByField!]
  timezone: [GroupByField!]
  updatedAt: [GroupByField!]
  userInterfaceStyle: [GroupByField!]
  vanityUrl: [GroupByField!]
}

input SettingRelationFilter {
  every: SettingFilter
  none: SettingFilter
  some: SettingFilter
}

input SettingSort {
  bgColor: SortOrder
  buttonLinkColor: SortOrder
  containerColor: SortOrder
  createdAt: SortOrder
  createdBy: UserSort
  currency: SortOrder
  dateFormat: SortOrder
  deletedAt: SortOrder
  landingPageImage: FileSort
  language: SortOrder
  leftNavColor: SortOrder
  menuBarBGColor: SortOrder
  menuBarIconsColor: SortOrder
  menuBarLogo: FileSort
  passwordMinLength: SortOrder
  passwordRequireLowercase: SortOrder
  passwordRequireNumbers: SortOrder
  passwordRequireSpecial: SortOrder
  passwordRequireUppercase: SortOrder
  passwordUpdateInterval: SortOrder
  rememberDevice: SortOrder
  timezone: SortOrder
  updatedAt: SortOrder
  userInterfaceStyle: SortOrder
  vanityUrl: SortOrder
}

"Settings subscription filter"
input SettingSubscriptionFilter {
  mutation_in: [MutationType]
  node: SettingFilter
  updatedFields: UpdatedFieldsFilter
}

"Settings update input"
input SettingUpdateInput {
  bgColor: String
  buttonLinkColor: String
  containerColor: String
  currency: String
  dateFormat: String
  language: String
  leftNavColor: String
  menuBarBGColor: String
  menuBarIconsColor: String
  passwordMinLength: Int
  passwordRequireLowercase: Boolean
  passwordRequireNumbers: Boolean
  passwordRequireSpecial: Boolean
  passwordRequireUppercase: Boolean
  passwordUpdateInterval: Int
  rememberDevice: String
  timezone: String
  userInterfaceStyle: String
  vanityUrl: String
}

input Setting_PermissionFilter {
  AND: [Setting_PermissionFilter!]
  OR: [Setting_PermissionFilter!]
  _fullText: String
  bgColor: StringPredicate
  buttonLinkColor: StringPredicate
  containerColor: StringPredicate
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  currency: StringPredicate
  dateFormat: StringPredicate
  deletedAt: IntPredicate
  landingPageImage: File_PermissionFilter
  language: StringPredicate
  leftNavColor: StringPredicate
  menuBarBGColor: StringPredicate
  menuBarIconsColor: StringPredicate
  menuBarLogo: File_PermissionFilter
  passwordMinLength: IntPredicate
  passwordRequireLowercase: BoolPredicate
  passwordRequireNumbers: BoolPredicate
  passwordRequireSpecial: BoolPredicate
  passwordRequireUppercase: BoolPredicate
  passwordUpdateInterval: IntPredicate
  rememberDevice: StringPredicate
  timezone: StringPredicate
  updatedAt: DateTimePredicate
  userInterfaceStyle: StringPredicate
  vanityUrl: StringPredicate
}

input Setting_PermissionRelationFilter {
  every: Setting_PermissionFilter
  none: Setting_PermissionFilter
  some: Setting_PermissionFilter
}

"SignUpResendInput"
input SignUpResendInput {
  email: String!
}

input StringPadFunctionArguments {
  len: Int!
  str: String!
}

input StringPredicate {
  contains: String
  ends_with: String
  equals: String
  in: [String!]
  is_empty: Boolean
  is_not_empty: Boolean
  not_contains: String
  not_ends_with: String
  not_equals: String
  not_in: [String!]
  not_starts_with: String
  starts_with: String
}

input StringPredicateHaving {
  AND: [StringPredicateHaving!]
  OR: [StringPredicateHaving!]
  contains: String
  ends_with: String
  equals: String
  in: [String!]
  is_empty: Boolean
  is_not_empty: Boolean
  not_contains: String
  not_ends_with: String
  not_equals: String
  not_in: [String!]
  not_starts_with: String
  starts_with: String
}

input SubstringFunctionArguments {
  len: Int
  pos: Int!
}

"ApplicationDeleteMutationInput"
input SystemApplicationDeleteMutationInput {
  force: Boolean
  id: String!
}

"Application install input"
input SystemApplicationInstallInput {
  appType: String!
  description: String
  displayName: String
  name: String!
  status: SystemApplicationStatusEnum = INACTIVE
}

"Application update input"
input SystemApplicationUpdateInput {
  description: String
  displayName: String
  id: String!
  name: String
  status: SystemApplicationStatusEnum
}

"BillingDetailsUpdateMutationInput"
input SystemBillingDetailsUpdateMutationInput {
  cardToken: String!
}

input SystemBillingMetricUsagesListFilter {
  entryDate: DateTimePredicate!
}

"BillingPlanUpdateMutationInput"
input SystemBillingPlanUpdateMutationInput {
  planId: ID!
}

"DeployOptions"
input SystemDeployOptions {
  extensionNames: [String]
  mode: SystemDeployModeEnum = ONLY_PROJECT
  pluginNames: [String]
}

"DeployingBuildInput"
input SystemDeployingBuildInput {
  buildName: String!
  options: SystemDeployOptions
}

input SystemEnvironmentMemberFilter {
  email: String!
}

input SystemEnvironmentMemberRoleIdFilterPredicate {
  equals: ID
  not_equals: ID
}

input SystemEnvironmentMemberUpdateData {
  roles: [String]
}

input SystemEnvironmentMembersFilter {
  email: String!
}

input SystemEnvironmentMembersListFilter {
  email: String
  firstName: String
  lastName: String
  roleId: SystemEnvironmentMemberRoleIdFilterPredicate
}

input SystemEnvironmentMembersListSort {
  email: SortOrder
  firstName: SortOrder
  isOwner: SortOrder
  lastName: SortOrder
  status: SortOrder
}

"Field Type Attributes Input"
input SystemFieldTypeAttributesInput {
  autoIncrement: Boolean
  currency: String
  expiration: Int
  fieldSize: Int
  format: String
  isBigInt: Boolean
  listOptions: [String!]
  maxSize: Int
  maxValue: Float
  minValue: Float
  precision: Int
  srid: Int
  typeRestrictions: [String!]
}

"FunctionInfoFilter"
input SystemFunctionInfoFilter {
  description: String
  functionType: SystemFunctionType
  name: String
}

"Table Create Index Input"
input SystemIndexCreateInput {
  columns: [SystemTableIndexColumnInput!]!
  force: Boolean
  name: String
  tableId: ID!
  type: TableIndexType!
}

"Table Delete Index Input"
input SystemIndexDeleteInput {
  id: ID!
}

"Table Update Index Input"
input SystemIndexUpdateInput {
  columns: [SystemTableIndexColumnInput!]
  force: Boolean
  id: ID!
  name: String
  type: TableIndexType
}

"Invite members input"
input SystemInviteMembersInput {
  recipients: [SystemInviteRecipientInput!]!
}

"Invite recipient input"
input SystemInviteRecipientInput {
  email: String!
  firstName: String
  lastName: String
  roles: [ID!]
}

"InvokeData"
input SystemInvokeData {
  functionName: String!
  inputArgs: String
}

input SystemMemberAccountUpsertDataInput {
  aboutMe: String
  addressLine1: String
  addressLine2: String
  avatar: GraphQLCreateFileItemInput
  city: String
  companyName: String
  country: String
  firstName: String
  githubUsername: String
  isDeveloper: Boolean
  lastName: String
  learningMode: Boolean
  linkedInUsername: String
  projectDescription: String
  role: String
  state: String
  timezone: String
  twitterUsername: String
  type: SystemUserType
  website: String
  zipCode: String
}

"Member invitation accept input"
input SystemMemberInvitationAcceptInput {
  accepted: Boolean!
  id: String!
}

"Cancel members invitations input"
input SystemMemberInvitationCancelInput {
  email: String!
}

"Resend member invitation input"
input SystemMemberInvitationResendInput {
  email: ID!
}

"MemberPaymentDetailsUpdateMutationInput"
input SystemMemberPaymentDetailsUpdateMutationInput {
  cardToken: String
}

"OrganizationPaymentDetailsUpdateMutationInput"
input SystemOrganizationPaymentDetailsUpdateMutationInput {
  cardToken: String!
  organizationId: ID!
}

"environmentId to add to with roles (array of ids)."
input SystemOrganizationWorkspaceEnvironmentRolesInput {
  environmentId: String!
  roles: [ID]
}

input SystemOrganizationWorkspaceWithEnvironmentRolesInput {
  environmentRoles: [SystemOrganizationWorkspaceEnvironmentRolesInput]
  workspaceId: ID!
}

"Relation Create Input"
input SystemRelationCreateInput {
  refFieldDisplayName: String
  refFieldIsList: Boolean!
  refFieldIsRequired: Boolean!
  refFieldName: String
  refTableId: ID!
}

"Relation Update Input"
input SystemRelationUpdateInput {
  refFieldDisplayName: String
  refFieldIsList: Boolean
  refFieldIsRequired: Boolean
  refFieldName: String
  refTableId: ID
}

"Table Create Input"
input SystemTableCreateInput {
  applicationId: String
  description: String
  displayName: String
  name: String!
}

"Table Delete Input"
input SystemTableDeleteInput {
  id: ID!
}

"Table Field Create Input"
input SystemTableFieldCreateInput {
  computedMode: SystemComputedFieldMode
  defaultValue: String
  description: String
  displayName: String
  expression: String
  fieldType: SystemFieldType!
  fieldTypeAttributes: SystemFieldTypeAttributesInput
  force: Boolean
  initialValue: String
  isList: Boolean!
  isRequired: Boolean!
  isUnique: Boolean
  name: String!
  position: Int
  relation: SystemRelationCreateInput
  tableId: ID!
}

"Table Field Delete Input"
input SystemTableFieldDeleteInput {
  id: ID!
}

"Table Field Position Update Input"
input SystemTableFieldPositionUpdateInput {
  id: ID!
  newPosition: Int!
}

"Table Field Update Input"
input SystemTableFieldUpdateInput {
  computedMode: SystemComputedFieldMode
  defaultValue: String
  description: String
  displayName: String
  expression: String
  fieldType: SystemFieldType
  fieldTypeAttributes: SystemFieldTypeAttributesInput
  force: Boolean
  id: ID!
  initialValue: String
  isList: Boolean
  isRequired: Boolean
  isUnique: Boolean
  name: String
  position: Int
  relation: SystemRelationUpdateInput
}

"Table Index Column Input"
input SystemTableIndexColumnInput {
  name: String!
}

"Table List Application Filter"
input SystemTableListApplicationFilter {
  id: String
  name: String
}

"Table List Filter"
input SystemTableListFilter {
  applications: [SystemTableListApplicationFilter]
  onlyUserTables: Boolean
  tableNames: [String]
}

"Table Update Input"
input SystemTableUpdateInput {
  description: String
  displayName: String
  id: ID!
  name: String
}

"View Create Input"
input SystemViewCreateInput {
  description: String
  displayName: String
  name: String!
  query: String!
}

"View Update Input"
input SystemViewUpdateInput {
  description: String
  displayName: String
  id: ID!
  name: String
  query: String
}

"WorkspaceCreateMutationInput"
input SystemWorkspaceCreateMutationInput {
  billingPlanId: ID
  cardToken: String
  description: String
  image: GraphQLCreateFileItemInput
  kind: SystemWorkspaceKind
  name: String!
  organizationId: ID
}

"WorkspaceDeleteMutationInput"
input SystemWorkspaceDeleteMutationInput {
  id: ID!
}

"WorkspacePaymentDetailsUpdateMutationInput"
input SystemWorkspacePaymentDetailsUpdateMutationInput {
  cardToken: String
}

"WorkspaceUpdateMutationInput"
input SystemWorkspaceUpdateMutationInput {
  description: String
  id: ID!
  image: GraphQLCreateFileItemInput
  name: String
}

"Table Create Input"
input TableCreateInput {
  applicationId: String
  description: String
  displayName: String
  name: String!
}

"Table Delete Input"
input TableDeleteInput {
  id: ID!
}

"Table Field Create Input"
input TableFieldCreateInput {
  computedMode: ComputedFieldMode
  defaultValue: String
  description: String
  displayName: String
  expression: String
  fieldType: FieldType!
  fieldTypeAttributes: FieldTypeAttributesInput
  force: Boolean
  initialValue: String
  isList: Boolean!
  isRequired: Boolean!
  isUnique: Boolean
  name: String!
  position: Int
  relation: RelationCreateInput
  tableId: ID!
}

"Table Field Delete Input"
input TableFieldDeleteInput {
  id: ID!
}

"Table Field Position Update Input"
input TableFieldPositionUpdateInput {
  id: ID!
  newPosition: Int!
}

"Table Field Update Input"
input TableFieldUpdateInput {
  computedMode: ComputedFieldMode
  defaultValue: String
  description: String
  displayName: String
  expression: String
  fieldType: FieldType
  fieldTypeAttributes: FieldTypeAttributesInput
  force: Boolean
  id: ID!
  initialValue: String
  isList: Boolean
  isRequired: Boolean
  isUnique: Boolean
  name: String
  position: Int
  relation: RelationUpdateInput
}

"Table Index Column Input"
input TableIndexColumnInput {
  name: String!
}

"Table List Application Filter"
input TableListApplicationFilter {
  id: String
  name: String
}

"Table List Filter"
input TableListFilter {
  applications: [TableListApplicationFilter]
  onlyUserTables: Boolean
  tableNames: [String]
}

"Table Update Input"
input TableUpdateInput {
  description: String
  displayName: String
  id: ID!
  name: String
}

"TechnologyLogo create input"
input TechnologyLogoCreateInput {
  image: TechnologyLogoImageRelationInput
}

"TechnologyLogo create many input"
input TechnologyLogoCreateManyInput {
  image: TechnologyLogoImageManyRelationInput
}

"TechnologyLogo delete input"
input TechnologyLogoDeleteInput {
  force: Boolean
  id: ID
}

"TechnologyLogoFieldsPermissions create input"
input TechnologyLogoFieldsPermissions {
  createdAt: Boolean
  updatedAt: Boolean
}

input TechnologyLogoFilter {
  AND: [TechnologyLogoFilter!]
  OR: [TechnologyLogoFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  id: IDPredicate
  image: ImageFilter
  updatedAt: DateTimePredicate
}

input TechnologyLogoGroupBy {
  first: Int
  having: Having
  last: Int
  query: TechnologyLogoGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input TechnologyLogoGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  id: [GroupByField!]
  image: ImageGroupByQuery
  updatedAt: [GroupByField!]
}

"TechnologyLogo relation input"
input TechnologyLogoImageManyRelationInput {
  connect: ImageKeyFilter
}

"TechnologyLogo relation input"
input TechnologyLogoImageRelationInput {
  connect: ImageKeyFilter
  create: TechnologyLogos_ImageCreateInput
}

"TechnologyLogo relation input"
input TechnologyLogoImageUpdateRelationInput {
  connect: ImageKeyFilter
  create: TechnologyLogos_ImageCreateInput
  disconnect: ImageKeyFilter
  reconnect: ImageKeyFilter
  update: TechnologyLogos_ImageUpdateInput
}

input TechnologyLogoKeyFilter {
  id: ID
}

input TechnologyLogoSort {
  createdAt: SortOrder
  createdBy: UserSort
  deletedAt: SortOrder
  id: SortOrder
  image: ImageSort
  updatedAt: SortOrder
}

"TechnologyLogo subscription filter"
input TechnologyLogoSubscriptionFilter {
  mutation_in: [MutationType]
  node: TechnologyLogoFilter
  updatedFields: UpdatedFieldsFilter
}

"TechnologyLogo update input"
input TechnologyLogoUpdateInput {
  id: ID
  image: TechnologyLogoImageUpdateRelationInput
}

input TechnologyLogo_PermissionFilter {
  AND: [TechnologyLogo_PermissionFilter!]
  OR: [TechnologyLogo_PermissionFilter!]
  _fullText: String
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  deletedAt: IntPredicate
  id: IDPredicate
  image: Image_PermissionFilter
  updatedAt: DateTimePredicate
}

"Image create input from technologyLogos"
input TechnologyLogos_ImageCreateInput {
  altText: String!
  blogs: ImageBlogsRelationInput
  height: Int!
  image: ImageImageRelationInput
  person: ImagePersonRelationInput
  schools: ImageSchoolsRelationInput
  technologyLogos: ImageTechnologyLogosRelationInput
  width: Int!
}

"Image update input from technologyLogos"
input TechnologyLogos_ImageUpdateInput {
  altText: String
  blogs: ImageBlogsUpdateRelationInput
  height: Int
  image: ImageImageUpdateRelationInput
  person: ImagePersonUpdateRelationInput
  schools: ImageSchoolsUpdateRelationInput
  technologyLogos: ImageTechnologyLogosUpdateRelationInput
  width: Int
}

input TrimFunctionArguments {
  mode: StringTrimMode
  str: String!
}

input UpdateByFilterBooleanSwitchInput {
  invert: Boolean
  set: Boolean
}

input UpdateByFilterDateInput {
  add: UpdateByFilterDatePartsInput
  set: String
  sub: UpdateByFilterDatePartsInput
}

input UpdateByFilterDatePartsInput {
  days: Int
  months: Int
  years: Int
}

input UpdateByFilterDateTimeInput {
  add: UpdateByFilterDateTimePartsInput
  set: String
  sub: UpdateByFilterDateTimePartsInput
}

input UpdateByFilterDateTimePartsInput {
  days: Int
  hours: Int
  microseconds: Int
  minutes: Int
  months: Int
  seconds: Int
  years: Int
}

input UpdateByFilterFloatInput {
  add: Float
  div: Float
  mod: Float
  mult: Float
  pow: Float
  prec: Int
  set: Float
  sqrt: Boolean
  sub: Float
}

input UpdateByFilterIntInput {
  add: Int
  div: Int
  mod: Int
  mult: Int
  pow: Int
  prec: Int
  set: Int
  sqrt: Boolean
  sub: Int
}

input UpdateByFilterJsonInput {
  set: JSON
}

input UpdateByFilterListStringInput {
  insert: UpdateByFilterListStringInsertOperationInput
  push: [String]
  remove: [Int]
  removeValue: String
  set: [String]
  swap: [Int]
  unshift: [String]
}

input UpdateByFilterListStringInsertOperationInput {
  start: Int!
  values: [String!]!
}

input UpdateByFilterStringInput {
  postfix: String
  prefix: String
  set: String
}

input UpdateByFilterStringSwitchInput {
  set: String
}

"UpdatedFieldsFilter"
input UpdatedFieldsFilter {
  contains: [String]
  every: [String]
}

"Users create input"
input UserCreateInput {
  avatar: UsersAvatarRelationInput
  email: String!
  firstName: String
  lastName: String
  roles: UsersRolesRelationInput
  status: String = "inactive"
  timezone: String
}

"Users create many input"
input UserCreateManyInput {
  avatar: UsersAvatarManyRelationInput
  email: String!
  firstName: String
  lastName: String
  roles: UsersRolesManyRelationInput
  status: String = "inactive"
  timezone: String
}

"Users delete input"
input UserDeleteInput {
  force: Boolean
  id: ID
}

"UserFieldsPermissions create input"
input UserFieldsPermissions {
  createdAt: Boolean
  email: Boolean
  firstName: Boolean
  is8base: Boolean
  lastName: Boolean
  origin: Boolean
  status: Boolean
  timezone: Boolean
  updatedAt: Boolean
}

input UserFilter {
  AND: [UserFilter!]
  OR: [UserFilter!]
  _fullText: String
  avatar: FileFilter
  createdAt: DateTimePredicate
  createdBy: UserFilter
  deletedAt: IntPredicate
  email: StringPredicate
  firstName: StringPredicate
  id: IDPredicate
  is8base: BoolPredicate
  is_self: Boolean
  lastName: StringPredicate
  not_self: Boolean
  origin: StringPredicate
  roles: RoleRelationFilter
  status: StringPredicate
  timezone: StringPredicate
  updatedAt: DateTimePredicate
}

input UserGroupBy {
  first: Int
  having: Having
  last: Int
  query: UserGroupByQuery!
  skip: Int
  sort: [GroupBySort!]
}

input UserGroupByQuery {
  _group: [GroupIdentifiersGroupByField!]
  avatar: FileGroupByQuery
  createdAt: [GroupByField!]
  createdBy: UserGroupByQuery
  email: [GroupByField!]
  firstName: [GroupByField!]
  id: [GroupByField!]
  is8base: [GroupByField!]
  lastName: [GroupByField!]
  origin: [GroupByField!]
  roles: RoleGroupByQuery
  status: [GroupByField!]
  timezone: [GroupByField!]
  updatedAt: [GroupByField!]
}

input UserKeyFilter {
  email: String
  id: ID
}

"UserLoginInput"
input UserLoginInput {
  authProfileId: ID
  email: String!
  fromInvitation: String
  password: String!
}

input UserRelationFilter {
  every: UserFilter
  none: UserFilter
  some: UserFilter
}

input UserSort {
  avatar: FileSort
  createdAt: SortOrder
  createdBy: UserSort
  deletedAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  id: SortOrder
  is8base: SortOrder
  lastName: SortOrder
  origin: SortOrder
  status: SortOrder
  timezone: SortOrder
  updatedAt: SortOrder
}

"Users subscription filter"
input UserSubscriptionFilter {
  mutation_in: [MutationType]
  node: UserFilter
  updatedFields: UpdatedFieldsFilter
}

"Users update input"
input UserUpdateByFilterInput {
  email: [UpdateByFilterStringInput]
  firstName: [UpdateByFilterStringInput]
  is8base: [UpdateByFilterBooleanSwitchInput]
  isOwner: [UpdateByFilterBooleanSwitchInput]
  lastName: [UpdateByFilterStringInput]
  origin: [UpdateByFilterStringSwitchInput]
  status: [UpdateByFilterStringSwitchInput]
  timezone: [UpdateByFilterStringInput]
}

"Users update input"
input UserUpdateInput {
  avatar: UsersAvatarUpdateRelationInput
  email: String
  firstName: String
  id: ID
  lastName: String
  roles: UsersRolesUpdateRelationInput
  status: String
  timezone: String
}

input User_PermissionFilter {
  AND: [User_PermissionFilter!]
  OR: [User_PermissionFilter!]
  _fullText: String
  avatar: File_PermissionFilter
  createdAt: DateTimePredicate
  createdBy: User_PermissionFilter
  deletedAt: IntPredicate
  email: StringPredicate
  firstName: StringPredicate
  id: IDPredicate
  is8base: BoolPredicate
  is_self: Boolean
  lastName: StringPredicate
  not_self: Boolean
  origin: StringPredicate
  roles: Role_PermissionRelationFilter
  status: StringPredicate
  timezone: StringPredicate
  updatedAt: DateTimePredicate
}

input User_PermissionRelationFilter {
  every: User_PermissionFilter
  none: User_PermissionFilter
  some: User_PermissionFilter
}

"Users relation input"
input UsersAvatarManyRelationInput {
  connect: FileKeyFilter
}

"Users relation input"
input UsersAvatarRelationInput {
  connect: FileKeyFilter
  create: Users_avatar_FileCreateInput
}

"Users relation input"
input UsersAvatarUpdateRelationInput {
  connect: FileKeyFilter
  create: Users_avatar_FileCreateInput
  disconnect: FileKeyFilter
  reconnect: FileKeyFilter
  update: Users_avatar_FileUpdateInput
}

"Users relation input"
input UsersRolesManyRelationInput {
  connect: [RoleKeyFilter!]
}

"Users relation input"
input UsersRolesRelationInput {
  connect: [RoleKeyFilter!]
  create: [Users_RoleCreateInput]
}

"Users relation input"
input UsersRolesUpdateRelationInput {
  connect: [RoleKeyFilter!]
  create: [Users_RoleCreateInput]
  disconnect: [RoleKeyFilter!]
  reconnect: [RoleKeyFilter!]
  update: [Users_RoleUpdateInput]
}

"Roles create input from users"
input Users_RoleCreateInput {
  apiTokens: RolesApiTokensRelationInput
  authenticationProfiles: RolesAuthenticationProfilesRelationInput
  description: String
  name: String!
  permissions: PermissionsInput
  users: RolesUsersRelationInput
}

"Roles update input from users"
input Users_RoleUpdateInput {
  data: RoleUpdateInput!
  filter: RoleKeyFilter
}

"Files create input from users_avatar"
input Users_avatar_FileCreateInput {
  fileId: String
  filename: String
  image_image: FilesImage_imageRelationInput
  meta: JSON
  mods: JSON
  public: Boolean = false
  users_avatar: FilesUsers_avatarRelationInput
}

"Files update input from users_avatar"
input Users_avatar_FileUpdateInput {
  fileId: String
  filename: String
  image_image: FilesImage_imageUpdateRelationInput
  meta: JSON
  mods: JSON
  public: Boolean
  users_avatar: FilesUsers_avatarUpdateRelationInput
}

"VerificationEmailResendInput"
input VerificationEmailResendInput {
  email: String!
}

"View Create Input"
input ViewCreateInput {
  description: String
  displayName: String
  name: String!
  query: String!
}

"View Update Input"
input ViewUpdateInput {
  description: String
  displayName: String
  id: ID!
  name: String
  query: String
}

"WorkspaceCreateMutationInput"
input WorkspaceCreateMutationInput {
  billingPlanId: ID
  cardToken: String
  description: String
  image: GraphQLCreateFileItemInput
  kind: WorkspaceKind
  name: String!
  organizationId: ID
}

"WorkspaceDeleteMutationInput"
input WorkspaceDeleteMutationInput {
  id: ID!
}

"WorkspaceUpdateMutationInput"
input WorkspaceUpdateMutationInput {
  description: String
  id: ID!
  image: GraphQLCreateFileItemInput
  name: String
}
