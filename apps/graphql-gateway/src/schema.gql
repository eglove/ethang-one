# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: ID!
  email: String!
  password: String!
  role: String!
  Person: Person
}

type Person {
  id: ID!
  firstName: String!
  lastName: String!
  birthday: DateTime!
  weightLbs: Float!
  heightIn: Float!
  User: User!
  userId: String!
  Calorie: Calorie
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Calorie {
  id: ID!
  currentCount: Int!
  dailyCalories: Int!
  deficit: Int!
  Person: Person!
  personId: String!
}

type FinanceRecord {
  id: ID!
  accountName: String!
  currentValue: Float!
  recordedDate: DateTime!
}

type Habit {
  id: ID!
  name: String!
  recurInterval: String!
  dueDate: DateTime!
}

type AffectedRows {
  count: Int!
}

type TodaysCalories {
  id: ID!
  birthday: DateTime!
  currentCalories: Int!
  height: Int!
  weight: Float!
}

type UnusedKey {
  id: ID!
  key: String!
}

type ShortUrl {
  id: ID!
  originalUrl: String!
  usedKeyId: String!
  expirationDate: DateTime!
  shortUrlKey: UsedKey!
}

type UsedKey {
  id: ID!
  key: String!
  ShortUrl: ShortUrl
}

type Query {
  habit(where: HabitWhereUniqueInput!): Habit
  habits(where: HabitWhereInput, orderBy: [HabitOrderByWithRelationInput!], cursor: HabitWhereUniqueInput, take: Int, skip: Int, distinct: [HabitScalarFieldEnum!]): [Habit]!
  getUnusedKey: UnusedKey
  financeRecord(where: FinanceRecordWhereUniqueInput!): FinanceRecord
  financeRecords(where: FinanceRecordWhereInput, orderBy: [FinanceRecordOrderByWithRelationInput!], cursor: FinanceRecordWhereUniqueInput, take: Int, skip: Int, distinct: [FinanceRecordScalarFieldEnum!]): [FinanceRecord]!
  firstTodaysCalories(where: TodaysCaloriesWhereInput, orderBy: [TodaysCaloriesOrderByWithRelationInput!], cursor: TodaysCaloriesWhereUniqueInput, take: Int, skip: Int, distinct: [TodaysCaloriesScalarFieldEnum!]): TodaysCalories
  findUser(where: UserWhereUniqueInput!): User
  signin(email: String!, password: String!): String!
  validate(email: String!, encryptedPassword: String!, role: String): Boolean!
  persons(where: PersonWhereInput, orderBy: [PersonOrderByWithRelationInput!], cursor: PersonWhereUniqueInput, take: Int, skip: Int, distinct: [PersonScalarFieldEnum!]): [Person]!
  calories(where: CalorieWhereInput, orderBy: [CalorieOrderByWithRelationInput!], cursor: CalorieWhereUniqueInput, take: Int, skip: Int, distinct: [CalorieScalarFieldEnum!]): [Calorie!]!
}

input HabitWhereUniqueInput {
  id: String
  name: String
}

input HabitWhereInput {
  AND: [HabitWhereInput!]
  OR: [HabitWhereInput!]
  NOT: [HabitWhereInput!]
  id: StringFilter
  name: StringFilter
  recurInterval: StringFilter
  dueDate: DateTimeFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input HabitOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  recurInterval: SortOrder
  dueDate: SortOrder
}

enum SortOrder {
  asc
  desc
}

enum HabitScalarFieldEnum {
  id
  name
  recurInterval
  dueDate
}

input FinanceRecordWhereUniqueInput {
  id: String
}

input FinanceRecordWhereInput {
  AND: [FinanceRecordWhereInput!]
  OR: [FinanceRecordWhereInput!]
  NOT: [FinanceRecordWhereInput!]
  id: StringFilter
  accountName: StringFilter
  currentValue: FloatFilter
  recordedDate: DateTimeFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input FinanceRecordOrderByWithRelationInput {
  id: SortOrder
  accountName: SortOrder
  currentValue: SortOrder
  recordedDate: SortOrder
}

enum FinanceRecordScalarFieldEnum {
  id
  accountName
  currentValue
  recordedDate
}

input TodaysCaloriesWhereInput {
  AND: [TodaysCaloriesWhereInput!]
  OR: [TodaysCaloriesWhereInput!]
  NOT: [TodaysCaloriesWhereInput!]
  id: StringFilter
  birthday: DateTimeFilter
  currentCalories: IntFilter
  height: IntFilter
  weight: FloatFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input TodaysCaloriesOrderByWithRelationInput {
  id: SortOrder
  birthday: SortOrder
  currentCalories: SortOrder
  height: SortOrder
  weight: SortOrder
}

input TodaysCaloriesWhereUniqueInput {
  id: String
}

enum TodaysCaloriesScalarFieldEnum {
  id
  birthday
  currentCalories
  height
  weight
}

input UserWhereUniqueInput {
  id: String
  email: String
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: StringFilter
  firstName: StringFilter
  lastName: StringFilter
  birthday: DateTimeFilter
  weightLbs: FloatFilter
  heightIn: FloatFilter
  User: UserRelationFilter
  userId: StringFilter
  Calorie: CalorieRelationFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  email: StringFilter
  password: StringFilter
  role: StringFilter
  Person: PersonRelationFilter
}

input PersonRelationFilter {
  is: PersonWhereInput
  isNot: PersonWhereInput
}

input CalorieRelationFilter {
  is: CalorieWhereInput
  isNot: CalorieWhereInput
}

input CalorieWhereInput {
  AND: [CalorieWhereInput!]
  OR: [CalorieWhereInput!]
  NOT: [CalorieWhereInput!]
  id: StringFilter
  currentCount: IntFilter
  dailyCalories: IntFilter
  deficit: IntFilter
  Person: PersonRelationFilter
  personId: StringFilter
}

input PersonOrderByWithRelationInput {
  id: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  birthday: SortOrder
  weightLbs: SortOrder
  heightIn: SortOrder
  User: UserOrderByWithRelationInput
  userId: SortOrder
  Calorie: CalorieOrderByWithRelationInput
}

input UserOrderByWithRelationInput {
  id: SortOrder
  email: SortOrder
  password: SortOrder
  role: SortOrder
  Person: PersonOrderByWithRelationInput
}

input CalorieOrderByWithRelationInput {
  id: SortOrder
  currentCount: SortOrder
  dailyCalories: SortOrder
  deficit: SortOrder
  Person: PersonOrderByWithRelationInput
  personId: SortOrder
}

input PersonWhereUniqueInput {
  id: String
  userId: String
}

enum PersonScalarFieldEnum {
  id
  firstName
  lastName
  birthday
  weightLbs
  heightIn
  userId
}

input CalorieWhereUniqueInput {
  id: String
  personId: String
}

enum CalorieScalarFieldEnum {
  id
  currentCount
  dailyCalories
  deficit
  personId
}

type Mutation {
  createHabit(data: HabitCreateInput!): Habit!
  updateHabit(data: HabitUpdateInput!, where: HabitWhereUniqueInput!): Habit!
  deleteUsedKey(where: UsedKeyWhereUniqueInput!): UnusedKey!
  createFinanceRecords(data: [FinanceRecordCreateManyInput!]!): AffectedRows!
  signup(email: String!, password: String!): User!
  createPerson(data: PersonCreateInput!): Person!
  createCalorie(data: CalorieCreateInput!): Calorie!
}

input HabitCreateInput {
  id: String
  name: String!
  recurInterval: String!
  dueDate: DateTime!
}

input HabitUpdateInput {
  name: StringFieldUpdateOperationsInput
  recurInterval: StringFieldUpdateOperationsInput
  dueDate: DateTimeFieldUpdateOperationsInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input UsedKeyWhereUniqueInput {
  id: String
  key: String
}

input FinanceRecordCreateManyInput {
  id: String
  accountName: String!
  currentValue: Float!
  recordedDate: DateTime!
}

input PersonCreateInput {
  id: String
  firstName: String!
  lastName: String!
  birthday: DateTime!
  weightLbs: Float!
  heightIn: Float!
  User: UserCreateNestedOneWithoutPersonInput!
  Calorie: CalorieCreateNestedOneWithoutPersonInput
}

input UserCreateNestedOneWithoutPersonInput {
  create: UserCreateWithoutPersonInput
  connectOrCreate: UserCreateOrConnectWithoutPersonInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPersonInput {
  id: String
  email: String!
  password: String!
  role: String!
}

input UserCreateOrConnectWithoutPersonInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutPersonInput!
}

input CalorieCreateNestedOneWithoutPersonInput {
  create: CalorieCreateWithoutPersonInput
  connectOrCreate: CalorieCreateOrConnectWithoutPersonInput
  connect: CalorieWhereUniqueInput
}

input CalorieCreateWithoutPersonInput {
  id: String
  currentCount: Int
  dailyCalories: Int
  deficit: Int
}

input CalorieCreateOrConnectWithoutPersonInput {
  where: CalorieWhereUniqueInput!
  create: CalorieCreateWithoutPersonInput!
}

input CalorieCreateInput {
  id: String
  currentCount: Int
  dailyCalories: Int
  deficit: Int
  Person: PersonCreateNestedOneWithoutCalorieInput!
}

input PersonCreateNestedOneWithoutCalorieInput {
  create: PersonCreateWithoutCalorieInput
  connectOrCreate: PersonCreateOrConnectWithoutCalorieInput
  connect: PersonWhereUniqueInput
}

input PersonCreateWithoutCalorieInput {
  id: String
  firstName: String!
  lastName: String!
  birthday: DateTime!
  weightLbs: Float!
  heightIn: Float!
  User: UserCreateNestedOneWithoutPersonInput!
}

input PersonCreateOrConnectWithoutCalorieInput {
  where: PersonWhereUniqueInput!
  create: PersonCreateWithoutCalorieInput!
}