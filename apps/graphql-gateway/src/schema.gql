# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type FinanceRecord {
  id: ID!
  accountName: String!
  currentValue: Float!
  recordedDate: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Habit {
  id: ID!
  name: String!
  recurInterval: String!
  dueDate: DateTime!
}

type AffectedRows {
  count: Int!
}

type TodaysCalories {
  id: ID!
  birthday: DateTime!
  currentCalories: Int!
  height: Int!
  weight: Float!
}

type UnusedKey {
  id: ID!
  key: String!
}

type ShortUrl {
  id: ID!
  originalUrl: String!
  usedKeyId: String!
  expirationDate: DateTime!
  shortUrlKey: UsedKey!
}

type UsedKey {
  id: ID!
  key: String!
  ShortUrl: ShortUrl
}

type Query {
  habit(where: HabitWhereUniqueInput!): Habit
  habits(where: HabitWhereInput, orderBy: [HabitOrderByWithRelationInput!], cursor: HabitWhereUniqueInput, take: Int, skip: Int, distinct: [HabitScalarFieldEnum!]): [Habit]!
  getUnusedKey: UnusedKey
  financeRecord(where: FinanceRecordWhereUniqueInput!): FinanceRecord
  financeRecords(where: FinanceRecordWhereInput, orderBy: [FinanceRecordOrderByWithRelationInput!], cursor: FinanceRecordWhereUniqueInput, take: Int, skip: Int, distinct: [FinanceRecordScalarFieldEnum!]): [FinanceRecord]!
  firstTodaysCalories(where: TodaysCaloriesWhereInput, orderBy: [TodaysCaloriesOrderByWithRelationInput!], cursor: TodaysCaloriesWhereUniqueInput, take: Int, skip: Int, distinct: [TodaysCaloriesScalarFieldEnum!]): TodaysCalories
}

input HabitWhereUniqueInput {
  id: String
  name: String
}

input HabitWhereInput {
  AND: [HabitWhereInput!]
  OR: [HabitWhereInput!]
  NOT: [HabitWhereInput!]
  id: StringFilter
  name: StringFilter
  recurInterval: StringFilter
  dueDate: DateTimeFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input HabitOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  recurInterval: SortOrder
  dueDate: SortOrder
}

enum SortOrder {
  asc
  desc
}

enum HabitScalarFieldEnum {
  id
  name
  recurInterval
  dueDate
}

input FinanceRecordWhereUniqueInput {
  id: String
}

input FinanceRecordWhereInput {
  AND: [FinanceRecordWhereInput!]
  OR: [FinanceRecordWhereInput!]
  NOT: [FinanceRecordWhereInput!]
  id: StringFilter
  accountName: StringFilter
  currentValue: FloatFilter
  recordedDate: DateTimeFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input FinanceRecordOrderByWithRelationInput {
  id: SortOrder
  accountName: SortOrder
  currentValue: SortOrder
  recordedDate: SortOrder
}

enum FinanceRecordScalarFieldEnum {
  id
  accountName
  currentValue
  recordedDate
}

input TodaysCaloriesWhereInput {
  AND: [TodaysCaloriesWhereInput!]
  OR: [TodaysCaloriesWhereInput!]
  NOT: [TodaysCaloriesWhereInput!]
  id: StringFilter
  birthday: DateTimeFilter
  currentCalories: IntFilter
  height: IntFilter
  weight: FloatFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input TodaysCaloriesOrderByWithRelationInput {
  id: SortOrder
  birthday: SortOrder
  currentCalories: SortOrder
  height: SortOrder
  weight: SortOrder
}

input TodaysCaloriesWhereUniqueInput {
  id: String
}

enum TodaysCaloriesScalarFieldEnum {
  id
  birthday
  currentCalories
  height
  weight
}

type Mutation {
  createHabit(data: HabitCreateInput!): Habit!
  updateHabit(data: HabitUpdateInput!, where: HabitWhereUniqueInput!): Habit!
  deleteUsedKey(where: UsedKeyWhereUniqueInput!): UnusedKey!
  createFinanceRecords(data: [FinanceRecordCreateManyInput!]!): AffectedRows!
}

input HabitCreateInput {
  id: String
  name: String!
  recurInterval: String!
  dueDate: DateTime!
}

input HabitUpdateInput {
  name: StringFieldUpdateOperationsInput
  recurInterval: StringFieldUpdateOperationsInput
  dueDate: DateTimeFieldUpdateOperationsInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input UsedKeyWhereUniqueInput {
  id: String
  key: String
}

input FinanceRecordCreateManyInput {
  id: String
  accountName: String!
  currentValue: Float!
  recordedDate: DateTime!
}