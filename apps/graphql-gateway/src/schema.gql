# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CalorieRecordCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  calories: Int!
  leftForToday: Int!
  personId: Int!
  _all: Int!
}

type CalorieRecordAvgAggregate {
  calories: Float
  leftForToday: Float
}

type CalorieRecordSumAggregate {
  calories: Int
  leftForToday: Int
}

type CalorieRecordMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  calories: Int
  leftForToday: Int
  personId: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type CalorieRecordMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  calories: Int
  leftForToday: Int
  personId: String
}

type CompleteCourse {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  title: String!
  User: User!
  userId: String!
}

type UserCount {
  CompleteCourse: Int!
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  email: String!
  password: String!
  role: String!
  Person: Person
  CompleteCourse: [CompleteCourse!]
  _count: UserCount!
}

type PersonCount {
  Calorie: Int!
}

type Person {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  birthday: DateTime!
  weightLbs: Float!
  heightIn: Float!
  User: User!
  userId: String!
  Calorie: [CalorieRecord!]
  _count: PersonCount!
}

type CalorieRecord {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  calories: Int!
  leftForToday: Int
  Person: Person!
  personId: String!
}

type FinanceRecordCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  accountName: Int!
  currentValue: Int!
  recordedDate: Int!
  _all: Int!
}

type FinanceRecordAvgAggregate {
  currentValue: Float
}

type FinanceRecordSumAggregate {
  currentValue: Float
}

type FinanceRecordMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  accountName: String
  currentValue: Float
  recordedDate: DateTime
}

type FinanceRecordMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  accountName: String
  currentValue: Float
  recordedDate: DateTime
}

type FinanceRecord {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  accountName: String!
  currentValue: Float!
  recordedDate: DateTime!
}

type HabitCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  name: Int!
  recurInterval: Int!
  dueDate: Int!
  _all: Int!
}

type HabitMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  recurInterval: String
  dueDate: DateTime
}

type HabitMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  recurInterval: String
  dueDate: DateTime
}

type Habit {
  id: ID!
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  recurInterval: String!
  dueDate: DateTime!
}

type PersonCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  firstName: Int!
  lastName: Int!
  birthday: Int!
  weightLbs: Int!
  heightIn: Int!
  userId: Int!
  _all: Int!
}

type PersonAvgAggregate {
  weightLbs: Float
  heightIn: Float
}

type PersonSumAggregate {
  weightLbs: Float
  heightIn: Float
}

type PersonMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String
  lastName: String
  birthday: DateTime
  weightLbs: Float
  heightIn: Float
  userId: String
}

type PersonMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String
  lastName: String
  birthday: DateTime
  weightLbs: Float
  heightIn: Float
  userId: String
}

type AffectedRows {
  count: Int!
}

type ShortUrlCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  originalUrl: Int!
  usedKeyId: Int!
  expirationDate: Int!
  _all: Int!
}

type ShortUrlMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  originalUrl: String
  usedKeyId: String
  expirationDate: DateTime
}

type ShortUrlMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  originalUrl: String
  usedKeyId: String
  expirationDate: DateTime
}

type UsedKey {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  key: String!
  ShortUrl: ShortUrl
}

type ShortUrl {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  originalUrl: String!
  usedKeyId: String!
  expirationDate: DateTime!
  shortUrlKey: UsedKey!
}

type UnusedKeyCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  key: Int!
  _all: Int!
}

type UnusedKeyMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  key: String
}

type UnusedKeyMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  key: String
}

type UnusedKey {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  key: String!
}

type UsedKeyCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  key: Int!
  _all: Int!
}

type UsedKeyMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  key: String
}

type UsedKeyMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  key: String
}

type UserCountAggregate {
  id: Int!
  createdAt: Int!
  updatedAt: Int!
  email: Int!
  password: Int!
  role: Int!
  _all: Int!
}

type UserMinAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  email: String
  password: String
  role: String
}

type UserMaxAggregate {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  email: String
  password: String
  role: String
}

type Query {
  habit(where: HabitWhereUniqueInput!): Habit
  habits(where: HabitWhereInput, orderBy: [HabitOrderByWithRelationInput!], cursor: HabitWhereUniqueInput, take: Int, skip: Int, distinct: [HabitScalarFieldEnum!]): [Habit]!
  getUnusedKey: UnusedKey
  financeRecord(where: FinanceRecordWhereUniqueInput!): FinanceRecord
  financeRecords(where: FinanceRecordWhereInput, orderBy: [FinanceRecordOrderByWithRelationInput!], cursor: FinanceRecordWhereUniqueInput, take: Int, skip: Int, distinct: [FinanceRecordScalarFieldEnum!]): [FinanceRecord]!
  user(where: UserWhereUniqueInput!): User
  signin(email: String!, password: String!): String!
  validate(email: String!, encryptedPassword: String!, role: String): Boolean!
  persons(where: PersonWhereInput, orderBy: [PersonOrderByWithRelationInput!], cursor: PersonWhereUniqueInput, take: Int, skip: Int, distinct: [PersonScalarFieldEnum!]): [Person]!
  calorieFirst(where: CalorieRecordWhereInput, orderBy: [CalorieRecordOrderByWithRelationInput!], cursor: CalorieRecordWhereUniqueInput, take: Int, skip: Int, distinct: [CalorieRecordScalarFieldEnum!]): CalorieRecord!
}

input HabitWhereUniqueInput {
  id: String
  name: String
}

input HabitWhereInput {
  AND: [HabitWhereInput!]
  OR: [HabitWhereInput!]
  NOT: [HabitWhereInput!]
  id: StringFilter
  createdAt: DateTimeNullableFilter
  updatedAt: DateTimeNullableFilter
  name: StringFilter
  recurInterval: StringFilter
  dueDate: DateTimeFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
  isSet: Boolean
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
  isSet: Boolean
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input HabitOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  name: SortOrder
  recurInterval: SortOrder
  dueDate: SortOrder
}

enum SortOrder {
  asc
  desc
}

enum HabitScalarFieldEnum {
  id
  createdAt
  updatedAt
  name
  recurInterval
  dueDate
}

input FinanceRecordWhereUniqueInput {
  id: String
}

input FinanceRecordWhereInput {
  AND: [FinanceRecordWhereInput!]
  OR: [FinanceRecordWhereInput!]
  NOT: [FinanceRecordWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  accountName: StringFilter
  currentValue: FloatFilter
  recordedDate: DateTimeFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input FinanceRecordOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  accountName: SortOrder
  currentValue: SortOrder
  recordedDate: SortOrder
}

enum FinanceRecordScalarFieldEnum {
  id
  createdAt
  updatedAt
  accountName
  currentValue
  recordedDate
}

input UserWhereUniqueInput {
  id: String
  email: String
}

input PersonWhereInput {
  AND: [PersonWhereInput!]
  OR: [PersonWhereInput!]
  NOT: [PersonWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  firstName: StringFilter
  lastName: StringFilter
  birthday: DateTimeFilter
  weightLbs: FloatFilter
  heightIn: FloatFilter
  User: UserRelationFilter
  userId: StringFilter
  Calorie: CalorieRecordListRelationFilter
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  email: StringFilter
  password: StringFilter
  role: StringFilter
  Person: PersonRelationFilter
  CompleteCourse: CompleteCourseListRelationFilter
}

input PersonRelationFilter {
  is: PersonWhereInput
  isNot: PersonWhereInput
}

input CompleteCourseListRelationFilter {
  every: CompleteCourseWhereInput
  some: CompleteCourseWhereInput
  none: CompleteCourseWhereInput
}

input CompleteCourseWhereInput {
  AND: [CompleteCourseWhereInput!]
  OR: [CompleteCourseWhereInput!]
  NOT: [CompleteCourseWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  title: StringFilter
  User: UserRelationFilter
  userId: StringFilter
}

input CalorieRecordListRelationFilter {
  every: CalorieRecordWhereInput
  some: CalorieRecordWhereInput
  none: CalorieRecordWhereInput
}

input CalorieRecordWhereInput {
  AND: [CalorieRecordWhereInput!]
  OR: [CalorieRecordWhereInput!]
  NOT: [CalorieRecordWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  calories: IntFilter
  leftForToday: IntNullableFilter
  Person: PersonRelationFilter
  personId: StringFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
  isSet: Boolean
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
  isSet: Boolean
}

input PersonOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  firstName: SortOrder
  lastName: SortOrder
  birthday: SortOrder
  weightLbs: SortOrder
  heightIn: SortOrder
  User: UserOrderByWithRelationInput
  userId: SortOrder
  Calorie: CalorieRecordOrderByRelationAggregateInput
}

input UserOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  email: SortOrder
  password: SortOrder
  role: SortOrder
  Person: PersonOrderByWithRelationInput
  CompleteCourse: CompleteCourseOrderByRelationAggregateInput
}

input CompleteCourseOrderByRelationAggregateInput {
  _count: SortOrder
}

input CalorieRecordOrderByRelationAggregateInput {
  _count: SortOrder
}

input PersonWhereUniqueInput {
  id: String
  userId: String
}

enum PersonScalarFieldEnum {
  id
  createdAt
  updatedAt
  firstName
  lastName
  birthday
  weightLbs
  heightIn
  userId
}

input CalorieRecordOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  calories: SortOrder
  leftForToday: SortOrder
  Person: PersonOrderByWithRelationInput
  personId: SortOrder
}

input CalorieRecordWhereUniqueInput {
  id: String
}

enum CalorieRecordScalarFieldEnum {
  id
  createdAt
  updatedAt
  calories
  leftForToday
  personId
}

type Mutation {
  createHabit(data: HabitCreateInput!): Habit!
  updateHabit(data: HabitUpdateInput!, where: HabitWhereUniqueInput!): Habit!
  deleteUsedKey(where: UsedKeyWhereUniqueInput!): UnusedKey!
  createFinanceRecords(data: [FinanceRecordCreateManyInput!]!): AffectedRows!
  signup(email: String!, password: String!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  createPerson(data: PersonCreateInput!): Person!
  addCalorieRecord(userId: String!, caloriesToAdd: Float!, weight: Float): CalorieRecord!
}

input HabitCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  name: String!
  recurInterval: String!
  dueDate: DateTime!
}

input HabitUpdateInput {
  createdAt: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  recurInterval: StringFieldUpdateOperationsInput
  dueDate: DateTimeFieldUpdateOperationsInput
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
  unset: Boolean
}

input StringFieldUpdateOperationsInput {
  set: String
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input UsedKeyWhereUniqueInput {
  id: String
  key: String
}

input FinanceRecordCreateManyInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  accountName: String!
  currentValue: Float!
  recordedDate: DateTime!
}

input UserUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: StringFieldUpdateOperationsInput
  Person: PersonUpdateOneWithoutUserInput
  CompleteCourse: CompleteCourseUpdateManyWithoutUserInput
}

input PersonUpdateOneWithoutUserInput {
  create: PersonCreateWithoutUserInput
  connectOrCreate: PersonCreateOrConnectWithoutUserInput
  upsert: PersonUpsertWithoutUserInput
  disconnect: Boolean
  delete: Boolean
  connect: PersonWhereUniqueInput
  update: PersonUpdateWithoutUserInput
}

input PersonCreateWithoutUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String!
  lastName: String!
  birthday: DateTime!
  weightLbs: Float!
  heightIn: Float!
  Calorie: CalorieRecordCreateNestedManyWithoutPersonInput
}

input CalorieRecordCreateNestedManyWithoutPersonInput {
  create: [CalorieRecordCreateWithoutPersonInput!]
  connectOrCreate: [CalorieRecordCreateOrConnectWithoutPersonInput!]
  createMany: CalorieRecordCreateManyPersonInputEnvelope
  connect: [CalorieRecordWhereUniqueInput!]
}

input CalorieRecordCreateWithoutPersonInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  calories: Int!
  leftForToday: Int
}

input CalorieRecordCreateOrConnectWithoutPersonInput {
  where: CalorieRecordWhereUniqueInput!
  create: CalorieRecordCreateWithoutPersonInput!
}

input CalorieRecordCreateManyPersonInputEnvelope {
  data: [CalorieRecordCreateManyPersonInput!]!
}

input CalorieRecordCreateManyPersonInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  calories: Int!
  leftForToday: Int
}

input PersonCreateOrConnectWithoutUserInput {
  where: PersonWhereUniqueInput!
  create: PersonCreateWithoutUserInput!
}

input PersonUpsertWithoutUserInput {
  update: PersonUpdateWithoutUserInput!
  create: PersonCreateWithoutUserInput!
}

input PersonUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  birthday: DateTimeFieldUpdateOperationsInput
  weightLbs: FloatFieldUpdateOperationsInput
  heightIn: FloatFieldUpdateOperationsInput
  Calorie: CalorieRecordUpdateManyWithoutPersonInput
}

input FloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input CalorieRecordUpdateManyWithoutPersonInput {
  create: [CalorieRecordCreateWithoutPersonInput!]
  connectOrCreate: [CalorieRecordCreateOrConnectWithoutPersonInput!]
  upsert: [CalorieRecordUpsertWithWhereUniqueWithoutPersonInput!]
  createMany: CalorieRecordCreateManyPersonInputEnvelope
  set: [CalorieRecordWhereUniqueInput!]
  disconnect: [CalorieRecordWhereUniqueInput!]
  delete: [CalorieRecordWhereUniqueInput!]
  connect: [CalorieRecordWhereUniqueInput!]
  update: [CalorieRecordUpdateWithWhereUniqueWithoutPersonInput!]
  updateMany: [CalorieRecordUpdateManyWithWhereWithoutPersonInput!]
  deleteMany: [CalorieRecordScalarWhereInput!]
}

input CalorieRecordUpsertWithWhereUniqueWithoutPersonInput {
  where: CalorieRecordWhereUniqueInput!
  update: CalorieRecordUpdateWithoutPersonInput!
  create: CalorieRecordCreateWithoutPersonInput!
}

input CalorieRecordUpdateWithoutPersonInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  calories: IntFieldUpdateOperationsInput
  leftForToday: NullableIntFieldUpdateOperationsInput
}

input IntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input NullableIntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
  unset: Boolean
}

input CalorieRecordUpdateWithWhereUniqueWithoutPersonInput {
  where: CalorieRecordWhereUniqueInput!
  data: CalorieRecordUpdateWithoutPersonInput!
}

input CalorieRecordUpdateManyWithWhereWithoutPersonInput {
  where: CalorieRecordScalarWhereInput!
  data: CalorieRecordUpdateManyMutationInput!
}

input CalorieRecordScalarWhereInput {
  AND: [CalorieRecordScalarWhereInput!]
  OR: [CalorieRecordScalarWhereInput!]
  NOT: [CalorieRecordScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  calories: IntFilter
  leftForToday: IntNullableFilter
  personId: StringFilter
}

input CalorieRecordUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  calories: IntFieldUpdateOperationsInput
  leftForToday: NullableIntFieldUpdateOperationsInput
}

input CompleteCourseUpdateManyWithoutUserInput {
  create: [CompleteCourseCreateWithoutUserInput!]
  connectOrCreate: [CompleteCourseCreateOrConnectWithoutUserInput!]
  upsert: [CompleteCourseUpsertWithWhereUniqueWithoutUserInput!]
  createMany: CompleteCourseCreateManyUserInputEnvelope
  set: [CompleteCourseWhereUniqueInput!]
  disconnect: [CompleteCourseWhereUniqueInput!]
  delete: [CompleteCourseWhereUniqueInput!]
  connect: [CompleteCourseWhereUniqueInput!]
  update: [CompleteCourseUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CompleteCourseUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [CompleteCourseScalarWhereInput!]
}

input CompleteCourseCreateWithoutUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  title: String!
}

input CompleteCourseCreateOrConnectWithoutUserInput {
  where: CompleteCourseWhereUniqueInput!
  create: CompleteCourseCreateWithoutUserInput!
}

input CompleteCourseWhereUniqueInput {
  id: String
  title_userId: CompleteCourseTitleUserIdCompoundUniqueInput
}

input CompleteCourseTitleUserIdCompoundUniqueInput {
  title: String!
  userId: String!
}

input CompleteCourseUpsertWithWhereUniqueWithoutUserInput {
  where: CompleteCourseWhereUniqueInput!
  update: CompleteCourseUpdateWithoutUserInput!
  create: CompleteCourseCreateWithoutUserInput!
}

input CompleteCourseUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input CompleteCourseCreateManyUserInputEnvelope {
  data: [CompleteCourseCreateManyUserInput!]!
}

input CompleteCourseCreateManyUserInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  title: String!
}

input CompleteCourseUpdateWithWhereUniqueWithoutUserInput {
  where: CompleteCourseWhereUniqueInput!
  data: CompleteCourseUpdateWithoutUserInput!
}

input CompleteCourseUpdateManyWithWhereWithoutUserInput {
  where: CompleteCourseScalarWhereInput!
  data: CompleteCourseUpdateManyMutationInput!
}

input CompleteCourseScalarWhereInput {
  AND: [CompleteCourseScalarWhereInput!]
  OR: [CompleteCourseScalarWhereInput!]
  NOT: [CompleteCourseScalarWhereInput!]
  id: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  title: StringFilter
  userId: StringFilter
}

input CompleteCourseUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input PersonCreateInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String!
  lastName: String!
  birthday: DateTime!
  weightLbs: Float!
  heightIn: Float!
  User: UserCreateNestedOneWithoutPersonInput!
  Calorie: CalorieRecordCreateNestedManyWithoutPersonInput
}

input UserCreateNestedOneWithoutPersonInput {
  create: UserCreateWithoutPersonInput
  connectOrCreate: UserCreateOrConnectWithoutPersonInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPersonInput {
  id: String
  createdAt: DateTime
  updatedAt: DateTime
  email: String!
  password: String!
  role: String!
  CompleteCourse: CompleteCourseCreateNestedManyWithoutUserInput
}

input CompleteCourseCreateNestedManyWithoutUserInput {
  create: [CompleteCourseCreateWithoutUserInput!]
  connectOrCreate: [CompleteCourseCreateOrConnectWithoutUserInput!]
  createMany: CompleteCourseCreateManyUserInputEnvelope
  connect: [CompleteCourseWhereUniqueInput!]
}

input UserCreateOrConnectWithoutPersonInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutPersonInput!
}